[
	{
		"comment": "/**\n\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Envelope}\n\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t *                               0 to it's maximum value. \n\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t *                       \tto fall to the sustain value. \n\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t *                                \tthe release is triggered. \n\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t *  @example\n\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t * \t\"attack\": 0.1,\n\t * \t\"decay\": 0.2,\n\t * \t\"sustain\": 1.0,\n\t * \t\"release\": 0.8\n\t * }).toMaster();\n\t * //create an oscillator and connect it\n\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t * //trigger the envelopes attack and release \"8t\" apart\n\t * ampEnv.triggerAttackRelease(\"8t\");\n\t */",
		"meta": {
			"range": [
				1502,
				1740
			],
			"filename": "AmplitudeEnvelope.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000015",
				"name": "Tone.AmplitudeEnvelope",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.input": "Tone.AmplitudeEnvelope#input",
				"this.output": "Tone.AmplitudeEnvelope#output"
			}
		},
		"kind": "class",
		"classdesc": "Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n         Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n         an audio signal as the input and will apply the envelope to the amplitude\n         of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).",
		"augments": [
			"Tone.Envelope"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The amount of time it takes for the envelope to go from \n                              0 to it's maximum value.",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The period of time after the attack that it takes for the envelope\n                      \tto fall to the sustain value.",
				"name": "decay"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The percent of the maximum value that the envelope rests at until\n                               \tthe release is triggered.",
				"name": "sustain"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The amount of time after the release is triggered it takes to reach 0.",
				"name": "release"
			}
		],
		"examples": [
			"var ampEnv = new Tone.AmplitudeEnvelope({\n\t\"attack\": 0.1,\n\t\"decay\": 0.2,\n\t\"sustain\": 1.0,\n\t\"release\": 0.8\n}).toMaster();\n//create an oscillator and connect it\nvar osc = new Tone.Oscillator().connect(ampEnv).start();\n//trigger the envelopes attack and release \"8t\" apart\nampEnv.triggerAttackRelease(\"8t\");"
		],
		"name": "AmplitudeEnvelope",
		"longname": "Tone.AmplitudeEnvelope",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t */",
		"meta": {
			"range": [
				1867,
				2030
			],
			"filename": "AmplitudeEnvelope.js",
			"lineno": 52,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000067",
				"name": "Tone.AmplitudeEnvelope.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.input": "Tone.AmplitudeEnvelope#input"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AmplitudeEnvelope"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AmplitudeEnvelope#dispose",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"overrides": "Tone.Envelope#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Wrapper around the native Web Audio's \n\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t *          Extracts FFT or Waveform data from the incoming signal.\n\t *  @extends {Tone}\n\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t *                       two in the range 32 to 32768.\n\t */",
		"meta": {
			"range": [
				997,
				1592
			],
			"filename": "Analyser.js",
			"lineno": 30,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000182",
				"name": "Tone.Analyser",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Analyser~options",
				"this._analyser": "Tone.Analyser#_analyser",
				"this.input": "Tone.Analyser#input",
				"this.output": "Tone.Analyser#output",
				"this._type": "Tone.Analyser#_type",
				"this._buffer": "Tone.Analyser#_buffer",
				"this.size": "Tone.Analyser#size",
				"this.type": "Tone.Analyser#type"
			}
		},
		"kind": "class",
		"classdesc": "Wrapper around the native Web Audio's \n         [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n         Extracts FFT or Waveform data from the incoming signal.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "The return type of the analysis, either \"fft\", or \"waveform\".",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "The size of the FFT. Value must be a power of \n                      two in the range 32 to 32768.",
				"name": "size"
			}
		],
		"name": "Analyser",
		"longname": "Tone.Analyser",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The default values.\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1693,
				1777
			],
			"filename": "Analyser.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000266",
				"name": "Tone.Analyser.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.8}",
				"paramnames": []
			}
		},
		"description": "The default values.",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Analyser.defaults",
		"memberof": "Tone.Analyser",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1722,
				1735
			],
			"filename": "Analyser.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000273",
				"name": "size",
				"type": "Literal",
				"value": 1024
			}
		},
		"undocumented": true,
		"name": "size",
		"longname": "Tone.Analyser.defaults.size",
		"kind": "member",
		"memberof": "Tone.Analyser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1739,
				1753
			],
			"filename": "Analyser.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000275",
				"name": "type",
				"type": "Literal",
				"value": "fft"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Analyser.defaults.type",
		"kind": "member",
		"memberof": "Tone.Analyser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1757,
				1774
			],
			"filename": "Analyser.js",
			"lineno": 71,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000277",
				"name": "smoothing",
				"type": "Literal",
				"value": 0.8
			}
		},
		"undocumented": true,
		"name": "smoothing",
		"longname": "Tone.Analyser.defaults.smoothing",
		"kind": "member",
		"memberof": "Tone.Analyser.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Possible return types of Tone.Analyser.analyse()\n\t *  @enum {String}\n\t */",
		"meta": {
			"range": [
				1865,
				1929
			],
			"filename": "Analyser.js",
			"lineno": 78,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000280",
				"name": "Tone.Analyser.Type",
				"type": "ObjectExpression",
				"value": "{\"Waveform\":\"waveform\",\"FFT\":\"fft\"}",
				"paramnames": []
			}
		},
		"description": "Possible return types of Tone.Analyser.analyse()",
		"kind": "member",
		"isEnum": true,
		"type": {
			"names": [
				"String"
			]
		},
		"name": "Type",
		"longname": "Tone.Analyser.Type",
		"memberof": "Tone.Analyser",
		"scope": "static",
		"properties": [
			{
				"comment": "",
				"meta": {
					"range": [
						1890,
						1911
					],
					"filename": "Analyser.js",
					"lineno": 79,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
					"code": {
						"id": "astnode100000287",
						"name": "Waveform",
						"type": "Literal",
						"value": "waveform"
					}
				},
				"name": "Waveform",
				"longname": "Tone.Analyser.Type.Waveform",
				"kind": "member",
				"memberof": "Tone.Analyser.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "waveform"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						1915,
						1926
					],
					"filename": "Analyser.js",
					"lineno": 80,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
					"code": {
						"id": "astnode100000289",
						"name": "FFT",
						"type": "Literal",
						"value": "fft"
					}
				},
				"name": "FFT",
				"longname": "Tone.Analyser.Type.FFT",
				"kind": "member",
				"memberof": "Tone.Analyser.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "fft"
			}
		]
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1890,
				1911
			],
			"filename": "Analyser.js",
			"lineno": 79,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000287",
				"name": "Waveform",
				"type": "Literal",
				"value": "waveform"
			}
		},
		"name": "Waveform",
		"longname": "Tone.Analyser.Type.Waveform",
		"kind": "member",
		"memberof": "Tone.Analyser.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "waveform"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1915,
				1926
			],
			"filename": "Analyser.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000289",
				"name": "FFT",
				"type": "Literal",
				"value": "fft"
			}
		},
		"name": "FFT",
		"longname": "Tone.Analyser.Type.FFT",
		"kind": "member",
		"memberof": "Tone.Analyser.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "fft"
	},
	{
		"comment": "/**\n\t *  Run the analysis given the current settings and return the \n\t *  result as a TypedArray. \n\t *  @returns {TypedArray}\n\t */",
		"meta": {
			"range": [
				2065,
				2355
			],
			"filename": "Analyser.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000292",
				"name": "Tone.Analyser.prototype.analyse",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Run the analysis given the current settings and return the \n result as a TypedArray.",
		"returns": [
			{
				"type": {
					"names": [
						"TypedArray"
					]
				}
			}
		],
		"name": "analyse",
		"longname": "Tone.Analyser#analyse",
		"kind": "function",
		"memberof": "Tone.Analyser",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t *  @memberOf Tone.Analyser#\n\t *  @type {Number}\n\t *  @name size\n\t */",
		"meta": {
			"filename": "Analyser.js",
			"lineno": 97,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The size of analysis. This must be a power of two in the range 32 to 32768.",
		"memberof": "Tone.Analyser",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "size",
		"longname": "Tone.Analyser#size",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t *  @memberOf Tone.Analyser#\n\t *  @type {String}\n\t *  @name type\n\t */",
		"meta": {
			"filename": "Analyser.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\".",
		"memberof": "Tone.Analyser",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "type",
		"longname": "Tone.Analyser#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  0 represents no time averaging with the last analysis frame.\n\t *  @memberOf Tone.Analyser#\n\t *  @type {NormalRange}\n\t *  @name smoothing\n\t */",
		"meta": {
			"filename": "Analyser.js",
			"lineno": 131,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "0 represents no time averaging with the last analysis frame.",
		"memberof": "Tone.Analyser",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "smoothing",
		"longname": "Tone.Analyser#smoothing",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Analyser}  this\n\t */",
		"meta": {
			"range": [
				3665,
				3829
			],
			"filename": "Analyser.js",
			"lineno": 150,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000485",
				"name": "Tone.Analyser.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._analyser": "Tone.Analyser#_analyser",
				"this._buffer": "Tone.Analyser#_buffer"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Analyser"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Analyser#dispose",
		"kind": "function",
		"memberof": "Tone.Analyser",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t *  @example\n\t * var comp = new Tone.Compressor(-30, 3);\n\t */",
		"meta": {
			"range": [
				791,
				2098
			],
			"filename": "Compressor.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000542",
				"name": "Tone.Compressor",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Compressor~options",
				"this._compressor": "Tone.Compressor#_compressor",
				"this.input": "Tone.Compressor#input",
				"this.output": "Tone.Compressor#output",
				"this.threshold": "Tone.Compressor#threshold",
				"this.attack": "Tone.Compressor#attack",
				"this.release": "Tone.Compressor#release",
				"this.knee": "Tone.Compressor#knee",
				"this.ratio": "Tone.Compressor#ratio"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Compressor is a thin wrapper around the Web Audio \n        [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n        Compression reduces the volume of loud sounds or amplifies quiet sounds \n        by narrowing or \"compressing\" an audio signal's dynamic range. \n        Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Decibels",
						"Object"
					]
				},
				"optional": true,
				"description": "The value above which the compression starts to be applied.",
				"name": "threshold"
			},
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"optional": true,
				"description": "The gain reduction ratio.",
				"name": "ratio"
			}
		],
		"examples": [
			"var comp = new Tone.Compressor(-30, 3);"
		],
		"name": "Compressor",
		"longname": "Tone.Compressor",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  the threshold vaue\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1181,
				1315
			],
			"filename": "Compressor.js",
			"lineno": 36,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000588",
				"name": "this.threshold",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the threshold vaue",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "threshold",
		"longname": "Tone.Compressor#threshold",
		"kind": "member",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The attack parameter\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1392,
				1461
			],
			"filename": "Compressor.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000612",
				"name": "this.attack",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The attack parameter",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "attack",
		"longname": "Tone.Compressor#attack",
		"kind": "member",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The release parameter\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1539,
				1610
			],
			"filename": "Compressor.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000631",
				"name": "this.release",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The release parameter",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "release",
		"longname": "Tone.Compressor#release",
		"kind": "member",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The knee parameter\n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1689,
				1813
			],
			"filename": "Compressor.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000650",
				"name": "this.knee",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The knee parameter",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "knee",
		"longname": "Tone.Compressor#knee",
		"kind": "member",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The ratio value\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1887,
				1980
			],
			"filename": "Compressor.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000674",
				"name": "this.ratio",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The ratio value",
		"type": {
			"names": [
				"Number"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "ratio",
		"longname": "Tone.Compressor#ratio",
		"kind": "member",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2189,
				2311
			],
			"filename": "Compressor.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000717",
				"name": "Tone.Compressor.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":30}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Compressor.defaults",
		"memberof": "Tone.Compressor"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2220,
				2232
			],
			"filename": "Compressor.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000724",
				"name": "ratio",
				"type": "Literal",
				"value": 12
			}
		},
		"undocumented": true,
		"name": "ratio",
		"longname": "Tone.Compressor.defaults.ratio",
		"kind": "member",
		"memberof": "Tone.Compressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2236,
				2253
			],
			"filename": "Compressor.js",
			"lineno": 91,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000726",
				"name": "threshold",
				"type": "UnaryExpression",
				"value": -24
			}
		},
		"undocumented": true,
		"name": "threshold",
		"longname": "Tone.Compressor.defaults.threshold",
		"kind": "member",
		"memberof": "Tone.Compressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2257,
				2273
			],
			"filename": "Compressor.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000729",
				"name": "release",
				"type": "Literal",
				"value": 0.25
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Compressor.defaults.release",
		"kind": "member",
		"memberof": "Tone.Compressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2277,
				2293
			],
			"filename": "Compressor.js",
			"lineno": 93,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000731",
				"name": "attack",
				"type": "Literal",
				"value": 0.003
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Compressor.defaults.attack",
		"kind": "member",
		"memberof": "Tone.Compressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2297,
				2308
			],
			"filename": "Compressor.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000733",
				"name": "knee",
				"type": "Literal",
				"value": 30
			}
		},
		"undocumented": true,
		"name": "knee",
		"longname": "Tone.Compressor.defaults.knee",
		"kind": "member",
		"memberof": "Tone.Compressor.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Compressor} this\n\t */",
		"meta": {
			"range": [
				2376,
				2846
			],
			"filename": "Compressor.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000736",
				"name": "Tone.Compressor.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._compressor": "Tone.Compressor#_compressor",
				"this.attack": "Tone.Compressor#attack",
				"this.release": "Tone.Compressor#release",
				"this.threshold": "Tone.Compressor#threshold",
				"this.ratio": "Tone.Compressor#ratio",
				"this.knee": "Tone.Compressor#knee"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Compressor"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Compressor#dispose",
		"kind": "function",
		"memberof": "Tone.Compressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t *\n\t * @constructor\n\t * @extends {Tone}\n\t * @param {NormalRange} [initialFade=0.5]\n\t * @example\n\t * var crossFade = new Tone.CrossFade(0.5);\n\t * //connect effect A to crossfade from\n\t * //effect output 0 to crossfade input 0\n\t * effectA.connect(crossFade, 0, 0);\n\t * //connect effect B to crossfade from\n\t * //effect output 0 to crossfade input 1\n\t * effectB.connect(crossFade, 0, 1);\n\t * crossFade.fade.value = 0;\n\t * // ^ only effectA is output\n\t * crossFade.fade.value = 1;\n\t * // ^ only effectB is output\n\t * crossFade.fade.value = 0.5;\n\t * // ^ the two signals are mixed equally. \n\t */",
		"meta": {
			"range": [
				946,
				2221
			],
			"filename": "CrossFade.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000868",
				"name": "Tone.CrossFade",
				"type": "FunctionExpression",
				"paramnames": [
					"initialFade"
				]
			},
			"vars": {
				"this.a": "Tone.CrossFade#a",
				"this.input[0]": "Tone.CrossFade#input[0]",
				"this.b": "Tone.CrossFade#b",
				"this.input[1]": "Tone.CrossFade#input[1]",
				"this.fade": "Tone.CrossFade#fade",
				"this._equalPowerA": "Tone.CrossFade#_equalPowerA",
				"this._equalPowerB": "Tone.CrossFade#_equalPowerB",
				"this._invert": "Tone.CrossFade#_invert"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Crossfade provides equal power fading between two inputs. \n        More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 0.5,
				"name": "initialFade"
			}
		],
		"examples": [
			"var crossFade = new Tone.CrossFade(0.5);\n//connect effect A to crossfade from\n//effect output 0 to crossfade input 0\neffectA.connect(crossFade, 0, 0);\n//connect effect B to crossfade from\n//effect output 0 to crossfade input 1\neffectB.connect(crossFade, 0, 1);\ncrossFade.fade.value = 0;\n// ^ only effectA is output\ncrossFade.fade.value = 1;\n// ^ only effectB is output\ncrossFade.fade.value = 0.5;\n// ^ the two signals are mixed equally. "
		],
		"name": "CrossFade",
		"longname": "Tone.CrossFade",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  Alias for <code>input[0]</code>. \n\t\t *  @type {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				1113,
				1153
			],
			"filename": "CrossFade.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000889",
				"name": "this.a",
				"type": "AssignmentExpression",
				"value": "this.input[0]",
				"paramnames": []
			}
		},
		"description": "Alias for <code>input[0]</code>.",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "a",
		"longname": "Tone.CrossFade#a",
		"kind": "member",
		"memberof": "Tone.CrossFade",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Alias for <code>input[1]</code>. \n\t\t *  @type {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				1234,
				1274
			],
			"filename": "CrossFade.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000904",
				"name": "this.b",
				"type": "AssignmentExpression",
				"value": "this.input[1]",
				"paramnames": []
			}
		},
		"description": "Alias for <code>input[1]</code>.",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "b",
		"longname": "Tone.CrossFade#b",
		"kind": "member",
		"memberof": "Tone.CrossFade",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t * \twill output 100% <code>input[0]</code> and \n\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1497,
				1582
			],
			"filename": "CrossFade.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100000919",
				"name": "this.fade",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The mix between the two inputs. A fade value of 0\n\twill output 100% <code>input[0]</code> and \n\ta value of 1 will output 100% <code>input[1]</code>.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "fade",
		"longname": "Tone.CrossFade#fade",
		"kind": "member",
		"memberof": "Tone.CrossFade",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.CrossFade} this\n\t */",
		"meta": {
			"range": [
				2316,
				2727
			],
			"filename": "CrossFade.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001034",
				"name": "Tone.CrossFade.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._equalPowerA": "Tone.CrossFade#_equalPowerA",
				"this._equalPowerB": "Tone.CrossFade#_equalPowerB",
				"this.fade": "Tone.CrossFade#fade",
				"this._invert": "Tone.CrossFade#_invert",
				"this.a": "Tone.CrossFade#a",
				"this.b": "Tone.CrossFade#b"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.CrossFade"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.CrossFade#dispose",
		"kind": "function",
		"memberof": "Tone.CrossFade",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t *          envelope generator. Tone.Envelope outputs a signal which \n\t *          can be connected to an AudioParam or Tone.Signal. \n\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t *                         0 to it's maximum value. \n\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t *                       \tto fall to the sustain value. \n\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t *                                \tthe release is triggered. \n\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t *  @example\n\t * //an amplitude envelope\n\t * var gainNode = Tone.context.createGain();\n\t * var env = new Tone.Envelope({\n\t * \t\"attack\" : 0.1,\n\t * \t\"decay\" : 0.2,\n\t * \t\"sustain\" : 1,\n\t * \t\"release\" : 0.8,\n\t * });\n\t * env.connect(gainNode.gain);\n\t */",
		"meta": {
			"range": [
				1313,
				2873
			],
			"filename": "Envelope.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001160",
				"name": "Tone.Envelope",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Envelope~options",
				"this.attack": "Tone.Envelope#attack",
				"this.decay": "Tone.Envelope#decay",
				"this.sustain": "Tone.Envelope#sustain",
				"this.release": "Tone.Envelope#release",
				"this._attackCurve": "Tone.Envelope#_attackCurve",
				"this._releaseCurve": "Tone.Envelope#_releaseCurve",
				"this._sig": "Tone.Envelope#_sig",
				"this.output": "Tone.Envelope#output",
				"this.attackCurve": "Tone.Envelope#attackCurve",
				"this.releaseCurve": "Tone.Envelope#releaseCurve"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n         envelope generator. Tone.Envelope outputs a signal which \n         can be connected to an AudioParam or Tone.Signal. \n         <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The amount of time it takes for the envelope to go from \n                        0 to it's maximum value.",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The period of time after the attack that it takes for the envelope\n                      \tto fall to the sustain value.",
				"name": "decay"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The percent of the maximum value that the envelope rests at until\n                               \tthe release is triggered.",
				"name": "sustain"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The amount of time after the release is triggered it takes to reach 0.",
				"name": "release"
			}
		],
		"examples": [
			"//an amplitude envelope\nvar gainNode = Tone.context.createGain();\nvar env = new Tone.Envelope({\n\t\"attack\" : 0.1,\n\t\"decay\" : 0.2,\n\t\"sustain\" : 1,\n\t\"release\" : 0.8,\n});\nenv.connect(gainNode.gain);"
		],
		"name": "Envelope",
		"longname": "Tone.Envelope",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/** \n\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1662,
				1690
			],
			"filename": "Envelope.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001189",
				"name": "this.attack",
				"type": "MemberExpression",
				"value": "options.attack",
				"paramnames": []
			}
		},
		"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.Envelope#attack",
		"kind": "member",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  After the attack portion of the envelope, the value will fall\n\t\t *  over the duration of the decay time to it's sustain value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1860,
				1886
			],
			"filename": "Envelope.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001197",
				"name": "this.decay",
				"type": "MemberExpression",
				"value": "options.decay",
				"paramnames": []
			}
		},
		"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "decay",
		"longname": "Tone.Envelope#decay",
		"kind": "member",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * \tThe sustain value is the value \n\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t *  @type {NormalRange}\n\t\t */",
		"meta": {
			"range": [
				2079,
				2109
			],
			"filename": "Envelope.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001205",
				"name": "this.sustain",
				"type": "MemberExpression",
				"value": "options.sustain",
				"paramnames": []
			}
		},
		"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "sustain",
		"longname": "Tone.Envelope#sustain",
		"kind": "member",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  After triggerRelease is called, the envelope's\n\t\t *  value will fall to it's miminum value over the\n\t\t *  duration of the release time. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2288,
				2318
			],
			"filename": "Envelope.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001213",
				"name": "this.release",
				"type": "MemberExpression",
				"value": "options.release",
				"paramnames": []
			}
		},
		"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.Envelope#release",
		"kind": "member",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */",
		"meta": {
			"range": [
				2970,
				3133
			],
			"filename": "Envelope.js",
			"lineno": 102,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001279",
				"name": "Tone.Envelope.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"exponential\"}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Envelope.defaults",
		"memberof": "Tone.Envelope"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2999,
				3014
			],
			"filename": "Envelope.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001286",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Envelope.defaults.attack",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3018,
				3031
			],
			"filename": "Envelope.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001288",
				"name": "decay",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.Envelope.defaults.decay",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3035,
				3050
			],
			"filename": "Envelope.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001290",
				"name": "sustain",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.Envelope.defaults.sustain",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3054,
				3067
			],
			"filename": "Envelope.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001292",
				"name": "release",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Envelope.defaults.release",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3071,
				3095
			],
			"filename": "Envelope.js",
			"lineno": 107,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001294",
				"name": "attackCurve",
				"type": "Literal",
				"value": "linear"
			}
		},
		"undocumented": true,
		"name": "attackCurve",
		"longname": "Tone.Envelope.defaults.attackCurve",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3099,
				3129
			],
			"filename": "Envelope.js",
			"lineno": 108,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001296",
				"name": "releaseCurve",
				"type": "Literal",
				"value": "exponential"
			}
		},
		"undocumented": true,
		"name": "releaseCurve",
		"longname": "Tone.Envelope.defaults.releaseCurve",
		"kind": "member",
		"memberof": "Tone.Envelope.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Read the current value of the envelope. Useful for \n\t * syncronizing visual output to the envelope. \n\t * @memberOf Tone.Envelope#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
		"memberof": "Tone.Envelope",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.Envelope#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The shape of the attack. \n\t * Can be any of these strings:\n\t * <ul>\n\t *   <li>linear</li>\n\t *   <li>exponential</li>\n\t *   <li>sine</li>\n\t *   <li>cosine</li>\n\t *   <li>bounce</li>\n\t *   <li>ripple</li>\n\t *   <li>step</li>\n\t * </ul>\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 125,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>cosine</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
		"memberof": "Tone.Envelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "attackCurve",
		"examples": [
			"env.attackCurve = \"linear\";",
			"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
		],
		"longname": "Tone.Envelope#attackCurve",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The shape of the release. See the attack curve types. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the release. See the attack curve types.",
		"memberof": "Tone.Envelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "releaseCurve",
		"examples": [
			"env.releaseCurve = \"linear\";"
		],
		"longname": "Tone.Envelope#releaseCurve",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t *  @param  {Time} [time=now] When the attack should start.\n\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t *                               number between 0-1\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t */",
		"meta": {
			"range": [
				6502,
				7919
			],
			"filename": "Envelope.js",
			"lineno": 231,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001593",
				"name": "Tone.Envelope.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttack~time",
				"originalAttack": "Tone.Envelope#triggerAttack~originalAttack",
				"attack": "Tone.Envelope#triggerAttack~attack",
				"decay": "Tone.Envelope#triggerAttack~decay",
				"velocity": "Tone.Envelope#triggerAttack~velocity",
				"currentValue": "Tone.Envelope#triggerAttack~currentValue",
				"attackRate": "Tone.Envelope#triggerAttack~attackRate",
				"remainingDistance": "Tone.Envelope#triggerAttack~remainingDistance",
				"curve": "Tone.Envelope#triggerAttack~curve",
				"percentComplete": "Tone.Envelope#triggerAttack~percentComplete",
				"sliceIndex": "Tone.Envelope#triggerAttack~sliceIndex",
				"curve[0]": "Tone.Envelope#triggerAttack~curve.0]"
			}
		},
		"description": "Trigger the attack/decay portion of the ADSR envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
		],
		"name": "triggerAttack",
		"longname": "Tone.Envelope#triggerAttack",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Triggers the release of the envelope.\n\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */",
		"meta": {
			"range": [
				8175,
				8800
			],
			"filename": "Envelope.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001803",
				"name": "Tone.Envelope.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerRelease~time",
				"currentValue": "Tone.Envelope#triggerRelease~currentValue",
				"release": "Tone.Envelope#triggerRelease~release",
				"curve": "Tone.Envelope#triggerRelease~curve"
			}
		},
		"description": "Triggers the release of the envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the release portion of the envelope should start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger release immediately\n env.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.Envelope#triggerRelease",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9026,
				9126
			],
			"filename": "Envelope.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001915",
				"name": "Tone.Envelope.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.Envelope#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease. \n\t *  @param {Time} duration The duration of the sustain.\n\t *  @param {Time} [time=now] When the attack should be triggered.\n\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */",
		"meta": {
			"range": [
				9591,
				9817
			],
			"filename": "Envelope.js",
			"lineno": 318,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001935",
				"name": "Tone.Envelope.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttackRelease~time"
			}
		},
		"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration of the sustain.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.Envelope#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t *  @param  {Time} after\n\t *  @returns {Tone.Envelope} this\n\t */",
		"meta": {
			"range": [
				9958,
				10069
			],
			"filename": "Envelope.js",
			"lineno": 330,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001978",
				"name": "Tone.Envelope.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			}
		},
		"description": "Cancels all scheduled envelope changes after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Envelope#cancel",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Disconnect and dispose.\n\t *  @returns {Tone.Envelope} this\n\t */",
		"meta": {
			"range": [
				12400,
				12600
			],
			"filename": "Envelope.js",
			"lineno": 446,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002379",
				"name": "Tone.Envelope.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._sig": "Tone.Envelope#_sig",
				"this._attackCurve": "Tone.Envelope#_attackCurve",
				"this._releaseCurve": "Tone.Envelope#_releaseCurve"
			}
		},
		"description": "Disconnect and dispose.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Envelope#dispose",
		"kind": "function",
		"memberof": "Tone.Envelope",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t *         well as the low and high crossover frequencies.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  \n\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t *  @example\n\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t */",
		"meta": {
			"range": [
				569,
				2597
			],
			"filename": "EQ3.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002445",
				"name": "Tone.EQ3",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.EQ3~options",
				"this.output": "Tone.EQ3#output",
				"this._multibandSplit": "Tone.EQ3#_multibandSplit",
				"this.input": "Tone.EQ3#input",
				"this._lowGain": "Tone.EQ3#_lowGain",
				"this._midGain": "Tone.EQ3#_midGain",
				"this._highGain": "Tone.EQ3#_highGain",
				"this.low": "Tone.EQ3#low",
				"this.mid": "Tone.EQ3#mid",
				"this.high": "Tone.EQ3#high",
				"this.Q": "Tone.EQ3#Q",
				"this.lowFrequency": "Tone.EQ3#lowFrequency",
				"this.highFrequency": "Tone.EQ3#highFrequency"
			}
		},
		"kind": "class",
		"classdesc": "Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n        well as the low and high crossover frequencies.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Decibels",
						"Object"
					]
				},
				"optional": true,
				"description": "The gain applied to the lows.",
				"name": "lowLevel"
			},
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"optional": true,
				"description": "The gain applied to the mid.",
				"name": "midLevel"
			},
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"optional": true,
				"description": "The gain applied to the high.",
				"name": "highLevel"
			}
		],
		"examples": [
			"var eq = new Tone.EQ3(-10, 3, -20);"
		],
		"name": "EQ3",
		"longname": "Tone.EQ3",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The gain in decibels of the low part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1600,
				1629
			],
			"filename": "EQ3.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002555",
				"name": "this.low",
				"type": "MemberExpression",
				"value": "this._lowGain.gain",
				"paramnames": []
			}
		},
		"description": "The gain in decibels of the low part",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "low",
		"longname": "Tone.EQ3#low",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The gain in decibels of the mid part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1723,
				1752
			],
			"filename": "EQ3.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002565",
				"name": "this.mid",
				"type": "MemberExpression",
				"value": "this._midGain.gain",
				"paramnames": []
			}
		},
		"description": "The gain in decibels of the mid part",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "mid",
		"longname": "Tone.EQ3#mid",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The gain in decibels of the high part\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1847,
				1878
			],
			"filename": "EQ3.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002575",
				"name": "this.high",
				"type": "MemberExpression",
				"value": "this._highGain.gain",
				"paramnames": []
			}
		},
		"description": "The gain in decibels of the high part",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "high",
		"longname": "Tone.EQ3#high",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The Q value for all of the filters. \n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1975,
				2006
			],
			"filename": "EQ3.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002585",
				"name": "this.Q",
				"type": "MemberExpression",
				"value": "this._multibandSplit.Q",
				"paramnames": []
			}
		},
		"description": "The Q value for all of the filters.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "Q",
		"longname": "Tone.EQ3#Q",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The low/mid crossover frequency. \n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2101,
				2154
			],
			"filename": "EQ3.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002595",
				"name": "this.lowFrequency",
				"type": "MemberExpression",
				"value": "this._multibandSplit.lowFrequency",
				"paramnames": []
			}
		},
		"description": "The low/mid crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "lowFrequency",
		"longname": "Tone.EQ3#lowFrequency",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The mid/high crossover frequency. \n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2250,
				2305
			],
			"filename": "EQ3.js",
			"lineno": 101,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002605",
				"name": "this.highFrequency",
				"type": "MemberExpression",
				"value": "this._multibandSplit.highFrequency",
				"paramnames": []
			}
		},
		"description": "The mid/high crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "highFrequency",
		"longname": "Tone.EQ3#highFrequency",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default values\n\t */",
		"meta": {
			"range": [
				2660,
				2773
			],
			"filename": "EQ3.js",
			"lineno": 115,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002679",
				"name": "Tone.EQ3.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":2500}",
				"paramnames": []
			}
		},
		"description": "the default values",
		"name": "defaults",
		"longname": "Tone.EQ3.defaults",
		"kind": "member",
		"memberof": "Tone.EQ3",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2684,
				2693
			],
			"filename": "EQ3.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002686",
				"name": "low",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "low",
		"longname": "Tone.EQ3.defaults.low",
		"kind": "member",
		"memberof": "Tone.EQ3.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2697,
				2706
			],
			"filename": "EQ3.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002688",
				"name": "mid",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "mid",
		"longname": "Tone.EQ3.defaults.mid",
		"kind": "member",
		"memberof": "Tone.EQ3.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2710,
				2720
			],
			"filename": "EQ3.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002690",
				"name": "high",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "high",
		"longname": "Tone.EQ3.defaults.high",
		"kind": "member",
		"memberof": "Tone.EQ3.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2724,
				2744
			],
			"filename": "EQ3.js",
			"lineno": 119,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002692",
				"name": "lowFrequency",
				"type": "Literal",
				"value": 400
			}
		},
		"undocumented": true,
		"name": "lowFrequency",
		"longname": "Tone.EQ3.defaults.lowFrequency",
		"kind": "member",
		"memberof": "Tone.EQ3.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2748,
				2770
			],
			"filename": "EQ3.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002694",
				"name": "highFrequency",
				"type": "Literal",
				"value": 2500
			}
		},
		"undocumented": true,
		"name": "highFrequency",
		"longname": "Tone.EQ3.defaults.highFrequency",
		"kind": "member",
		"memberof": "Tone.EQ3.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.EQ3} this\n\t */",
		"meta": {
			"range": [
				2831,
				3353
			],
			"filename": "EQ3.js",
			"lineno": 127,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002697",
				"name": "Tone.EQ3.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._multibandSplit": "Tone.EQ3#_multibandSplit",
				"this.lowFrequency": "Tone.EQ3#lowFrequency",
				"this.highFrequency": "Tone.EQ3#highFrequency",
				"this._lowGain": "Tone.EQ3#_lowGain",
				"this._midGain": "Tone.EQ3#_midGain",
				"this._highGain": "Tone.EQ3#_highGain",
				"this.low": "Tone.EQ3#low",
				"this.mid": "Tone.EQ3#mid",
				"this.high": "Tone.EQ3#high",
				"this.Q": "Tone.EQ3#Q"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.EQ3"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.EQ3#dispose",
		"kind": "function",
		"memberof": "Tone.EQ3",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t */",
		"meta": {
			"range": [
				566,
				1401
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002840",
				"name": "Tone.FeedbackCombFilter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FeedbackCombFilter~options",
				"this._delay": "Tone.FeedbackCombFilter#_delay",
				"this.input": "Tone.FeedbackCombFilter#input",
				"this.output": "Tone.FeedbackCombFilter#output",
				"this.delayTime": "Tone.FeedbackCombFilter#delayTime",
				"this._feedback": "Tone.FeedbackCombFilter#_feedback",
				"this.resonance": "Tone.FeedbackCombFilter#resonance"
			}
		},
		"kind": "class",
		"classdesc": "Comb filters are basic building blocks for physical modeling. Read more\n        about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The delay time of the filter.",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The amount of feedback the filter has.",
				"name": "resonance"
			}
		],
		"name": "FeedbackCombFilter",
		"longname": "Tone.FeedbackCombFilter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of delay of the comb filter. \n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				965,
				1003
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002887",
				"name": "this.delayTime",
				"type": "MemberExpression",
				"value": "this._delay.delayTime",
				"paramnames": []
			}
		},
		"description": "The amount of delay of the comb filter.",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.FeedbackCombFilter#delayTime",
		"kind": "member",
		"memberof": "Tone.FeedbackCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of feedback of the delayed signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1264,
				1300
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 46,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002914",
				"name": "this.resonance",
				"type": "MemberExpression",
				"value": "this._feedback.gain",
				"paramnames": []
			}
		},
		"description": "The amount of feedback of the delayed signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "resonance",
		"longname": "Tone.FeedbackCombFilter#resonance",
		"kind": "member",
		"memberof": "Tone.FeedbackCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1528,
				1608
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 60,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002953",
				"name": "Tone.FeedbackCombFilter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.FeedbackCombFilter.defaults",
		"memberof": "Tone.FeedbackCombFilter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1567,
				1584
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002960",
				"name": "delayTime",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.FeedbackCombFilter.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.FeedbackCombFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1588,
				1605
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 62,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002962",
				"name": "resonance",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "resonance",
		"longname": "Tone.FeedbackCombFilter.defaults.resonance",
		"kind": "member",
		"memberof": "Tone.FeedbackCombFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.FeedbackCombFilter} this\n\t */",
		"meta": {
			"range": [
				1681,
				1987
			],
			"filename": "FeedbackCombFilter.js",
			"lineno": 69,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100002965",
				"name": "Tone.FeedbackCombFilter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._delay": "Tone.FeedbackCombFilter#_delay",
				"this.delayTime": "Tone.FeedbackCombFilter#delayTime",
				"this._feedback": "Tone.FeedbackCombFilter#_feedback",
				"this.resonance": "Tone.FeedbackCombFilter#resonance"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FeedbackCombFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FeedbackCombFilter#dispose",
		"kind": "function",
		"memberof": "Tone.FeedbackCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t *          (default), -24 and -48. \n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t *  @param {string=} type The type of filter.\n\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t *                            3 choices: -12, -24, and -48\n\t *  @example\n\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t */",
		"meta": {
			"range": [
				796,
				2014
			],
			"filename": "Filter.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003051",
				"name": "Tone.Filter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Filter~options",
				"this._filters": "Tone.Filter#_filters",
				"this.frequency": "Tone.Filter#frequency",
				"this.detune": "Tone.Filter#detune",
				"this.gain": "Tone.Filter#gain",
				"this.Q": "Tone.Filter#Q",
				"this._type": "Tone.Filter#_type",
				"this._rolloff": "Tone.Filter#_rolloff",
				"this.rolloff": "Tone.Filter#rolloff"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Filter is a filter which allows for all of the same native methods\n         as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n         Tone.Filter has the added ability to set the filter rolloff at -12 \n         (default), -24 and -48.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "The cutoff frequency of the filter.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"string"
					]
				},
				"optional": true,
				"description": "The type of filter.",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "The drop in decibels per octave after the cutoff frequency.\n                           3 choices: -12, -24, and -48",
				"name": "rolloff"
			}
		],
		"examples": [
			"var filter = new Tone.Filter(200, \"highpass\");"
		],
		"name": "Filter",
		"longname": "Tone.Filter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The cutoff frequency of the filter. \n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1145,
				1217
			],
			"filename": "Filter.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003092",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The cutoff frequency of the filter.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Filter#frequency",
		"kind": "member",
		"memberof": "Tone.Filter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune parameter\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1295,
				1344
			],
			"filename": "Filter.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003109",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune parameter",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.Filter#detune",
		"kind": "member",
		"memberof": "Tone.Filter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The gain of the filter, only used in certain filter types\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1460,
				1543
			],
			"filename": "Filter.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003124",
				"name": "this.gain",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The gain of the filter, only used in certain filter types",
		"type": {
			"names": [
				"Number"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "gain",
		"longname": "Tone.Filter#gain",
		"kind": "member",
		"memberof": "Tone.Filter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The Q or Quality of the filter\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1634,
				1669
			],
			"filename": "Filter.js",
			"lineno": 62,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003140",
				"name": "this.Q",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The Q or Quality of the filter",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "Q",
		"longname": "Tone.Filter#Q",
		"kind": "member",
		"memberof": "Tone.Filter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2121,
				2235
			],
			"filename": "Filter.js",
			"lineno": 91,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003194",
				"name": "Tone.Filter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Filter.defaults",
		"kind": "member",
		"memberof": "Tone.Filter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2148,
				2166
			],
			"filename": "Filter.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003201",
				"name": "type",
				"type": "Literal",
				"value": "lowpass"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Filter.defaults.type",
		"kind": "member",
		"memberof": "Tone.Filter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2170,
				2187
			],
			"filename": "Filter.js",
			"lineno": 93,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003203",
				"name": "frequency",
				"type": "Literal",
				"value": 350
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Filter.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Filter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2191,
				2206
			],
			"filename": "Filter.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003205",
				"name": "rolloff",
				"type": "UnaryExpression",
				"value": -12
			}
		},
		"undocumented": true,
		"name": "rolloff",
		"longname": "Tone.Filter.defaults.rolloff",
		"kind": "member",
		"memberof": "Tone.Filter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2210,
				2217
			],
			"filename": "Filter.js",
			"lineno": 95,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003208",
				"name": "Q",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.Filter.defaults.Q",
		"kind": "member",
		"memberof": "Tone.Filter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2221,
				2231
			],
			"filename": "Filter.js",
			"lineno": 96,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003210",
				"name": "gain",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "gain",
		"longname": "Tone.Filter.defaults.gain",
		"kind": "member",
		"memberof": "Tone.Filter.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t * @memberOf Tone.Filter#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "Filter.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The type of the filter. Types: \"lowpass\", \"highpass\", \n\"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\".",
		"memberof": "Tone.Filter",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.Filter#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The rolloff of the filter which is the drop in db\n\t * per octave. Implemented internally by cascading filters.\n\t * Only accepts the values -12, -24, -48 and -96.\n\t * @memberOf Tone.Filter#\n\t * @type {number}\n\t * @name rolloff\n\t */",
		"meta": {
			"filename": "Filter.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The rolloff of the filter which is the drop in db\nper octave. Implemented internally by cascading filters.\nOnly accepts the values -12, -24, -48 and -96.",
		"memberof": "Tone.Filter",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "rolloff",
		"longname": "Tone.Filter#rolloff",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @return {Tone.Filter} this\n\t */",
		"meta": {
			"range": [
				4423,
				4898
			],
			"filename": "Filter.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003517",
				"name": "Tone.Filter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"i": "Tone.Filter#dispose~i",
				"this._filters[undefined]": "Tone.Filter#_filters[undefined]",
				"this._filters": "Tone.Filter#_filters",
				"this.frequency": "Tone.Filter#frequency",
				"this.Q": "Tone.Filter#Q",
				"this.detune": "Tone.Filter#detune",
				"this.gain": "Tone.Filter#gain"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Filter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Filter#dispose",
		"kind": "function",
		"memberof": "Tone.Filter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t *          the amplitude of an incoming signal. \n\t *          Take care with small (< 0.02) attack or decay values \n\t *          as follower has some ripple which is exaggerated\n\t *          at these values. Read more about envelope followers (also known \n\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t *  @param {Time=} release The rate at which the folower falls. \n\t *  @example\n\t * var follower = new Tone.Follower(0.2, 0.4);\n\t */",
		"meta": {
			"range": [
				907,
				2495
			],
			"filename": "Follower.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003663",
				"name": "Tone.Follower",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Follower~options",
				"this._abs": "Tone.Follower#_abs",
				"this._filter": "Tone.Follower#_filter",
				"this._filter.type": "Tone.Follower#_filter.type",
				"this._filter.frequency.value": "Tone.Follower#_filter.frequency.value",
				"this._filter.Q.value": "Tone.Follower#_filter.Q.value",
				"this._frequencyValues": "Tone.Follower#_frequencyValues",
				"this._sub": "Tone.Follower#_sub",
				"this._delay": "Tone.Follower#_delay",
				"this._mult": "Tone.Follower#_mult",
				"this._attack": "Tone.Follower#_attack",
				"this._release": "Tone.Follower#_release"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Follower is a  crude envelope follower which will follow \n         the amplitude of an incoming signal. \n         Take care with small (< 0.02) attack or decay values \n         as follower has some ripple which is exaggerated\n         at these values. Read more about envelope followers (also known \n         as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The rate at which the follower rises.",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The rate at which the folower falls.",
				"name": "release"
			}
		],
		"examples": [
			"var follower = new Tone.Follower(0.2, 0.4);"
		],
		"name": "Follower",
		"longname": "Tone.Follower",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2572,
				2639
			],
			"filename": "Follower.js",
			"lineno": 98,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003880",
				"name": "Tone.Follower.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Follower.defaults",
		"kind": "member",
		"memberof": "Tone.Follower"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2601,
				2616
			],
			"filename": "Follower.js",
			"lineno": 99,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003887",
				"name": "attack",
				"type": "Literal",
				"value": 0.05
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Follower.defaults.attack",
		"kind": "member",
		"memberof": "Tone.Follower.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2621,
				2636
			],
			"filename": "Follower.js",
			"lineno": 100,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100003889",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Follower.defaults.release",
		"kind": "member",
		"memberof": "Tone.Follower.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The attack time.\n\t * @memberOf Tone.Follower#\n\t * @type {Time}\n\t * @name attack\n\t */",
		"meta": {
			"filename": "Follower.js",
			"lineno": 124,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The attack time.",
		"memberof": "Tone.Follower",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.Follower#attack",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The release time.\n\t * @memberOf Tone.Follower#\n\t * @type {Time}\n\t * @name release\n\t */",
		"meta": {
			"filename": "Follower.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The release time.",
		"memberof": "Tone.Follower",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.Follower#release",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Borrows the connect method from Signal so that the output can be used\n\t *  as a Tone.Signal control signal.\n\t *  @function\n\t */",
		"meta": {
			"range": [
				3978,
				4041
			],
			"filename": "Follower.js",
			"lineno": 161,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004051",
				"name": "Tone.Follower.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.Signal.prototype.connect",
				"paramnames": []
			}
		},
		"description": "Borrows the connect method from Signal so that the output can be used\n as a Tone.Signal control signal.",
		"kind": "function",
		"name": "connect",
		"longname": "Tone.Follower#connect",
		"memberof": "Tone.Follower",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  dispose\n\t *  @returns {Tone.Follower} this\n\t */",
		"meta": {
			"range": [
				4103,
				4528
			],
			"filename": "Follower.js",
			"lineno": 167,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004067",
				"name": "Tone.Follower.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._filter": "Tone.Follower#_filter",
				"this._frequencyValues": "Tone.Follower#_frequencyValues",
				"this._delay": "Tone.Follower#_delay",
				"this._sub": "Tone.Follower#_sub",
				"this._abs": "Tone.Follower#_abs",
				"this._mult": "Tone.Follower#_mult",
				"this._curve": "Tone.Follower#_curve"
			}
		},
		"description": "dispose",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Follower"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Follower#dispose",
		"kind": "function",
		"memberof": "Tone.Follower",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t *\n\t *  @extends {Tone.Envelope}\n\t *  @constructor\n\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t *  @param {Time} [decay]\tthe decay time in seconds\n\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t *  @param {Time} [release]\tthe release time in seconds\n\t *  @example\n\t *  var env = new Tone.FrequencyEnvelope({\n\t *  \t\"attack\" : 0.2,\n\t *  \t\"baseFrequency\" : \"C2\",\n\t *  \t\"octaves\" : 4\n\t *  });\n\t *  scaledEnv.connect(oscillator.frequency);\n\t */",
		"meta": {
			"range": [
				772,
				1283
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004192",
				"name": "Tone.FrequencyEnvelope",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FrequencyEnvelope~options",
				"this._octaves": "Tone.FrequencyEnvelope#_octaves",
				"this.baseFrequency": "Tone.FrequencyEnvelope#baseFrequency",
				"this.octaves": "Tone.FrequencyEnvelope#octaves"
			}
		},
		"kind": "class",
		"classdesc": "Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n        it's got a `baseFrequency` and `octaves` parameter.",
		"augments": [
			"Tone.Envelope"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "the attack time in seconds",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "the decay time in seconds",
				"name": "decay"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "a percentage (0-1) of the full amplitude",
				"name": "sustain"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "the release time in seconds",
				"name": "release"
			}
		],
		"examples": [
			"var env = new Tone.FrequencyEnvelope({\n \t\"attack\" : 0.2,\n \t\"baseFrequency\" : \"C2\",\n \t\"octaves\" : 4\n });\n scaledEnv.connect(oscillator.frequency);"
		],
		"name": "FrequencyEnvelope",
		"longname": "Tone.FrequencyEnvelope",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1392,
				1489
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 49,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004272",
				"name": "Tone.FrequencyEnvelope.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":2}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.FrequencyEnvelope.defaults",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1430,
				1451
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004279",
				"name": "baseFrequency",
				"type": "Literal",
				"value": 200
			}
		},
		"undocumented": true,
		"name": "baseFrequency",
		"longname": "Tone.FrequencyEnvelope.defaults.baseFrequency",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1455,
				1468
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 51,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004281",
				"name": "octaves",
				"type": "Literal",
				"value": 4
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.FrequencyEnvelope.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1472,
				1486
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004283",
				"name": "exponent",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "exponent",
		"longname": "Tone.FrequencyEnvelope.defaults.exponent",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The envelope's mininum output value. This is the value which it\n\t * starts at. \n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {Frequency}\n\t * @name baseFrequency\n\t */",
		"meta": {
			"filename": "FrequencyEnvelope.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The envelope's mininum output value. This is the value which it\nstarts at.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"name": "baseFrequency",
		"longname": "Tone.FrequencyEnvelope#baseFrequency",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The number of octaves above the baseFrequency that the\n\t * envelope will scale to.\n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {Positive}\n\t * @name octaves\n\t */",
		"meta": {
			"filename": "FrequencyEnvelope.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The number of octaves above the baseFrequency that the\nenvelope will scale to.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "octaves",
		"longname": "Tone.FrequencyEnvelope#octaves",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The envelope's exponent value. \n\t * @memberOf Tone.FrequencyEnvelope#\n\t * @type {number}\n\t * @name exponent\n\t */",
		"meta": {
			"filename": "FrequencyEnvelope.js",
			"lineno": 90,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The envelope's exponent value.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "exponent",
		"longname": "Tone.FrequencyEnvelope#exponent",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.FrequencyEnvelope} this\n\t */",
		"meta": {
			"range": [
				2734,
				2858
			],
			"filename": "FrequencyEnvelope.js",
			"lineno": 109,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004410",
				"name": "Tone.FrequencyEnvelope.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FrequencyEnvelope"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FrequencyEnvelope#dispose",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"overrides": "Tone.Envelope#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t *  @param {Time=} attack The follower's attack time\n\t *  @param {Time=} release The follower's release time\n\t *  @example\n\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t * var mic = new Tone.UserMedia().connect(gate);\n\t * //the gate will only pass through the incoming \n\t * //signal when it's louder than -30db\n\t */",
		"meta": {
			"range": [
				917,
				1480
			],
			"filename": "Gate.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004453",
				"name": "Tone.Gate",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Gate~options",
				"this._follower": "Tone.Gate#_follower",
				"this._gt": "Tone.Gate#_gt"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Gate only passes a signal through when the incoming \n         signal exceeds a specified threshold. To do this, Gate uses \n         a Tone.Follower to follow the amplitude of the incoming signal. \n         A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Decibels",
						"Object"
					]
				},
				"optional": true,
				"description": "The threshold above which the gate will open.",
				"name": "threshold"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The follower's attack time",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The follower's release time",
				"name": "release"
			}
		],
		"examples": [
			"var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\nvar mic = new Tone.UserMedia().connect(gate);\n//the gate will only pass through the incoming \n//signal when it's louder than -30db"
		],
		"name": "Gate",
		"longname": "Tone.Gate",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1565,
				1648
			],
			"filename": "Gate.js",
			"lineno": 53,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004555",
				"name": "Tone.Gate.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Gate.defaults",
		"memberof": "Tone.Gate"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1590,
				1604
			],
			"filename": "Gate.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004562",
				"name": "attack",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Gate.defaults.attack",
		"kind": "member",
		"memberof": "Tone.Gate.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1609,
				1624
			],
			"filename": "Gate.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004564",
				"name": "release",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Gate.defaults.release",
		"kind": "member",
		"memberof": "Tone.Gate.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1628,
				1645
			],
			"filename": "Gate.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004566",
				"name": "threshold",
				"type": "UnaryExpression",
				"value": -40
			}
		},
		"undocumented": true,
		"name": "threshold",
		"longname": "Tone.Gate.defaults.threshold",
		"kind": "member",
		"memberof": "Tone.Gate.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The threshold of the gate in decibels\n\t * @memberOf Tone.Gate#\n\t * @type {Decibels}\n\t * @name threshold\n\t */",
		"meta": {
			"filename": "Gate.js",
			"lineno": 59,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The threshold of the gate in decibels",
		"memberof": "Tone.Gate",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"name": "threshold",
		"longname": "Tone.Gate#threshold",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The attack speed of the gate\n\t * @memberOf Tone.Gate#\n\t * @type {Time}\n\t * @name attack\n\t */",
		"meta": {
			"filename": "Gate.js",
			"lineno": 74,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The attack speed of the gate",
		"memberof": "Tone.Gate",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.Gate#attack",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The release speed of the gate\n\t * @memberOf Tone.Gate#\n\t * @type {Time}\n\t * @name release\n\t */",
		"meta": {
			"filename": "Gate.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The release speed of the gate",
		"memberof": "Tone.Gate",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.Gate#release",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Gate} this\n\t */",
		"meta": {
			"range": [
				2631,
				2821
			],
			"filename": "Gate.js",
			"lineno": 108,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004677",
				"name": "Tone.Gate.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._follower": "Tone.Gate#_follower",
				"this._gt": "Tone.Gate#_gt"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Gate"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Gate#dispose",
		"kind": "function",
		"memberof": "Tone.Gate",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t *          which can be attached to an AudioParam or Tone.Signal \n\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t *                               in the frequency range of 0.1 to 10 hertz. \n\t *  @param {number=} min The minimum output value of the LFO. \n\t *  @param {number=} max The maximum value of the LFO. \n\t *  @example\n\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t * lfo.connect(filter.frequency);\n\t */",
		"meta": {
			"range": [
				979,
				2879
			],
			"filename": "LFO.js",
			"lineno": 23,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004748",
				"name": "Tone.LFO",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.LFO~options",
				"this._oscillator": "Tone.LFO#_oscillator",
				"this.frequency": "Tone.LFO#frequency",
				"this.amplitude": "Tone.LFO#amplitude",
				"this.amplitude.units": "Tone.LFO#amplitude.units",
				"this.amplitude.value": "Tone.LFO#amplitude.value",
				"this._stoppedSignal": "Tone.LFO#_stoppedSignal",
				"this._zeros": "Tone.LFO#_zeros",
				"this._stoppedValue": "Tone.LFO#_stoppedValue",
				"this._a2g": "Tone.LFO#_a2g",
				"this._scaler": "Tone.LFO#_scaler",
				"this.output": "Tone.LFO#output",
				"this._units": "Tone.LFO#_units",
				"this.units": "Tone.LFO#units",
				"this.phase": "Tone.LFO#phase"
			}
		},
		"kind": "class",
		"classdesc": "LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n         which can be attached to an AudioParam or Tone.Signal \n         in order to modulate that parameter with an oscillator. The LFO can \n         also be synced to the transport to start/stop and change when the tempo changes.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "The frequency of the oscillation. Typically, LFOs will be\n                              in the frequency range of 0.1 to 10 hertz.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "The minimum output value of the LFO.",
				"name": "min"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "The maximum value of the LFO.",
				"name": "max"
			}
		],
		"examples": [
			"var lfo = new Tone.LFO(\"4n\", 400, 4000);\nlfo.connect(filter.frequency);"
		],
		"name": "LFO",
		"longname": "Tone.LFO",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  the lfo's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1377,
				1420
			],
			"filename": "LFO.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004794",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._oscillator.frequency",
				"paramnames": []
			}
		},
		"description": "the lfo's frequency",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.LFO#frequency",
		"kind": "member",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The amplitude of the LFO, which controls the output range between\n\t\t * the min and max output. For example if the min is -10 and the max \n\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t * between -5 and 5. \n\t\t * @type {Number}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1706,
				1746
			],
			"filename": "LFO.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004804",
				"name": "this.amplitude",
				"type": "MemberExpression",
				"value": "this._oscillator.volume",
				"paramnames": []
			}
		},
		"description": "The amplitude of the LFO, which controls the output range between\nthe min and max output. For example if the min is -10 and the max \nis 10, setting the amplitude to 0.5 would make the LFO modulate\nbetween -5 and 5.",
		"type": {
			"names": [
				"Number"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "amplitude",
		"longname": "Tone.LFO#amplitude",
		"kind": "member",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2995,
				3150
			],
			"filename": "LFO.js",
			"lineno": 115,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004969",
				"name": "Tone.LFO.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.LFO.defaults",
		"memberof": "Tone.LFO"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3019,
				3034
			],
			"filename": "LFO.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004976",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.LFO.defaults.type",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3038,
				3047
			],
			"filename": "LFO.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004978",
				"name": "min",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "min",
		"longname": "Tone.LFO.defaults.min",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3051,
				3060
			],
			"filename": "LFO.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004980",
				"name": "max",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "max",
		"longname": "Tone.LFO.defaults.max",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3064,
				3075
			],
			"filename": "LFO.js",
			"lineno": 119,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004982",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.LFO.defaults.phase",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3079,
				3097
			],
			"filename": "LFO.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004984",
				"name": "frequency",
				"type": "Literal",
				"value": "4n"
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.LFO.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3101,
				3116
			],
			"filename": "LFO.js",
			"lineno": 121,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004986",
				"name": "amplitude",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "amplitude",
		"longname": "Tone.LFO.defaults.amplitude",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3120,
				3147
			],
			"filename": "LFO.js",
			"lineno": 122,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004988",
				"name": "units",
				"type": "MemberExpression",
				"value": "Tone.Type.Default"
			}
		},
		"undocumented": true,
		"name": "units",
		"longname": "Tone.LFO.defaults.units",
		"kind": "member",
		"memberof": "Tone.LFO.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start the LFO. \n\t *  @param  {Time} [time=now] the time the LFO will start\n\t *  @returns {Tone.LFO} this\n\t */",
		"meta": {
			"range": [
				3274,
				3444
			],
			"filename": "LFO.js",
			"lineno": 130,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100004995",
				"name": "Tone.LFO.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.LFO#start~time"
			}
		},
		"description": "Start the LFO.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time the LFO will start",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LFO"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.LFO#start",
		"kind": "function",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the LFO. \n\t *  @param  {Time} [time=now] the time the LFO will stop\n\t *  @returns {Tone.LFO} this\n\t */",
		"meta": {
			"range": [
				3566,
				3751
			],
			"filename": "LFO.js",
			"lineno": 142,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005034",
				"name": "Tone.LFO.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.LFO#stop~time"
			}
		},
		"description": "Stop the LFO.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time the LFO will stop",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LFO"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.LFO#stop",
		"kind": "function",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Sync the start/stop/pause to the transport \n\t *  and the frequency to the bpm of the transport\n\t *  @returns {Tone.LFO} this\n\t *  @example\n\t *  lfo.frequency.value = \"8n\";\n\t *  lfo.sync().start(0)\n\t *  //the rate of the LFO will always be an eighth note, \n\t *  //even as the tempo changes\n\t */",
		"meta": {
			"range": [
				4059,
				4177
			],
			"filename": "LFO.js",
			"lineno": 159,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005075",
				"name": "Tone.LFO.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Sync the start/stop/pause to the transport \n and the frequency to the bpm of the transport",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LFO"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"lfo.frequency.value = \"8n\";\n lfo.sync().start(0)\n //the rate of the LFO will always be an eighth note, \n //even as the tempo changes"
		],
		"name": "sync",
		"longname": "Tone.LFO#sync",
		"kind": "function",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  unsync the LFO from transport control\n\t *  @returns {Tone.LFO} this\n\t */",
		"meta": {
			"range": [
				4264,
				4388
			],
			"filename": "LFO.js",
			"lineno": 169,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005102",
				"name": "Tone.LFO.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "unsync the LFO from transport control",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LFO"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.LFO#unsync",
		"kind": "function",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The miniumum output of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name min\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 175,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The miniumum output of the LFO.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "min",
		"longname": "Tone.LFO#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The maximum output of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name max\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The maximum output of the LFO.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "max",
		"longname": "Tone.LFO#max",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t * @memberOf Tone.LFO#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 207,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The type of the oscillator: sine, square, sawtooth, triangle.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.LFO#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {number}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 224,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The phase of the LFO.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "phase",
		"longname": "Tone.LFO#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The output units of the LFO.\n\t * @memberOf Tone.LFO#\n\t * @type {Tone.Type}\n\t * @name units\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 241,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The output units of the LFO.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.LFO#units",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.LFO#\n\t * @type {Boolean}\n\t * @name mute\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 261,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.LFO",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.LFO#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.LFO#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "LFO.js",
			"lineno": 276,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.LFO",
		"name": "state",
		"longname": "Tone.LFO#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  disconnect and dispose\n\t *  @returns {Tone.LFO} this\n\t */",
		"meta": {
			"range": [
				8014,
				8464
			],
			"filename": "LFO.js",
			"lineno": 328,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005534",
				"name": "Tone.LFO.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._oscillator": "Tone.LFO#_oscillator",
				"this._stoppedSignal": "Tone.LFO#_stoppedSignal",
				"this._zeros": "Tone.LFO#_zeros",
				"this._scaler": "Tone.LFO#_scaler",
				"this._a2g": "Tone.LFO#_a2g",
				"this.frequency": "Tone.LFO#frequency",
				"this.amplitude": "Tone.LFO#amplitude"
			}
		},
		"description": "disconnect and dispose",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LFO"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.LFO#dispose",
		"kind": "function",
		"memberof": "Tone.LFO",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t *         It is composed of a Tone.Compressor with a fast attack \n\t *         and release. Limiters are commonly used to safeguard against \n\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t *         smooth gain reduction and almost completely prevent \n\t *         additional gain above the threshold.\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t *  @example\n\t *  var limiter = new Tone.Limiter(-6);\n\t */",
		"meta": {
			"range": [
				684,
				1198
			],
			"filename": "Limiter.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005659",
				"name": "Tone.Limiter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Limiter~options",
				"this._compressor": "Tone.Limiter#_compressor",
				"this.input": "Tone.Limiter#input",
				"this.output": "Tone.Limiter#output",
				"this.threshold": "Tone.Limiter#threshold"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Limiter will limit the loudness of an incoming signal. \n        It is composed of a Tone.Compressor with a fast attack \n        and release. Limiters are commonly used to safeguard against \n        signal clipping. Unlike a compressor, limiters do not provide \n        smooth gain reduction and almost completely prevent \n        additional gain above the threshold.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The theshold above which the limiting is applied.",
				"name": "threshold"
			}
		],
		"examples": [
			"var limiter = new Tone.Limiter(-6);"
		],
		"name": "Limiter",
		"longname": "Tone.Limiter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The threshold of of the limiter\n\t\t * @type {Decibel}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1119,
				1162
			],
			"filename": "Limiter.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005711",
				"name": "this.threshold",
				"type": "MemberExpression",
				"value": "this._compressor.threshold",
				"paramnames": []
			}
		},
		"description": "The threshold of of the limiter",
		"type": {
			"names": [
				"Decibel"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "threshold",
		"longname": "Tone.Limiter#threshold",
		"kind": "member",
		"memberof": "Tone.Limiter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The default value\n\t *  @type {Object}\n\t *  @const\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1309,
				1357
			],
			"filename": "Limiter.js",
			"lineno": 53,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005735",
				"name": "Tone.Limiter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The default value",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.Limiter.defaults",
		"memberof": "Tone.Limiter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1337,
				1354
			],
			"filename": "Limiter.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005742",
				"name": "threshold",
				"type": "UnaryExpression",
				"value": -12
			}
		},
		"undocumented": true,
		"name": "threshold",
		"longname": "Tone.Limiter.defaults.threshold",
		"kind": "member",
		"memberof": "Tone.Limiter.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Limiter} this\n\t */",
		"meta": {
			"range": [
				1420,
				1632
			],
			"filename": "Limiter.js",
			"lineno": 61,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005746",
				"name": "Tone.Limiter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._compressor": "Tone.Limiter#_compressor",
				"this.threshold": "Tone.Limiter#threshold"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Limiter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Limiter#dispose",
		"kind": "function",
		"memberof": "Tone.Limiter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t *                                signal as it is fedback. \n\t */",
		"meta": {
			"range": [
				659,
				2032
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005815",
				"name": "Tone.LowpassCombFilter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.LowpassCombFilter~options",
				"this._delay": "Tone.LowpassCombFilter#_delay",
				"this.input": "Tone.LowpassCombFilter#input",
				"this.delayTime": "Tone.LowpassCombFilter#delayTime",
				"this._lowpass": "Tone.LowpassCombFilter#_lowpass",
				"this.output": "Tone.LowpassCombFilter#output",
				"this._lowpass.Q.value": "Tone.LowpassCombFilter#_lowpass.Q.value",
				"this._lowpass.type": "Tone.LowpassCombFilter#_lowpass.type",
				"this.dampening": "Tone.LowpassCombFilter#dampening",
				"this._feedback": "Tone.LowpassCombFilter#_feedback",
				"this.resonance": "Tone.LowpassCombFilter#resonance"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n        Tone.FeedbackCombFilter, but includes a lowpass filter.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The delay time of the comb filter",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The resonance (feedback) of the comb filter",
				"name": "resonance"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The cutoff of the lowpass filter dampens the\n                               signal as it is fedback.",
				"name": "dampening"
			}
		],
		"name": "LowpassCombFilter",
		"longname": "Tone.LowpassCombFilter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The delayTime of the comb filter. \n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1077,
				1115
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005866",
				"name": "this.delayTime",
				"type": "MemberExpression",
				"value": "this._delay.delayTime",
				"paramnames": []
			}
		},
		"description": "The delayTime of the comb filter.",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.LowpassCombFilter#delayTime",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The dampening control of the feedback\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1447,
				1589
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 51,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005910",
				"name": "this.dampening",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The dampening control of the feedback",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "dampening",
		"longname": "Tone.LowpassCombFilter#dampening",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of feedback of the delayed signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1851,
				1887
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005953",
				"name": "this.resonance",
				"type": "MemberExpression",
				"value": "this._feedback.gain",
				"paramnames": []
			}
		},
		"description": "The amount of feedback of the delayed signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "resonance",
		"longname": "Tone.LowpassCombFilter#resonance",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2158,
				2259
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 84,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100005996",
				"name": "Tone.LowpassCombFilter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":3000}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.LowpassCombFilter.defaults",
		"memberof": "Tone.LowpassCombFilter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2196,
				2213
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006003",
				"name": "delayTime",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.LowpassCombFilter.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2217,
				2234
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 86,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006005",
				"name": "resonance",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "resonance",
		"longname": "Tone.LowpassCombFilter.defaults.resonance",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2238,
				2256
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006007",
				"name": "dampening",
				"type": "Literal",
				"value": 3000
			}
		},
		"undocumented": true,
		"name": "dampening",
		"longname": "Tone.LowpassCombFilter.defaults.dampening",
		"kind": "member",
		"memberof": "Tone.LowpassCombFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.LowpassCombFilter} this\n\t */",
		"meta": {
			"range": [
				2333,
				2789
			],
			"filename": "LowpassCombFilter.js",
			"lineno": 94,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006010",
				"name": "Tone.LowpassCombFilter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.dampening": "Tone.LowpassCombFilter#dampening",
				"this.resonance": "Tone.LowpassCombFilter#resonance",
				"this._delay": "Tone.LowpassCombFilter#_delay",
				"this.delayTime": "Tone.LowpassCombFilter#delayTime",
				"this._lowpass": "Tone.LowpassCombFilter#_lowpass",
				"this._feedback": "Tone.LowpassCombFilter#_feedback"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.LowpassCombFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.LowpassCombFilter#dispose",
		"kind": "function",
		"memberof": "Tone.LowpassCombFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Merge brings two signals into the left and right \n\t *          channels of a single stereo channel.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @example\n\t * var merge = new Tone.Merge().toMaster();\n\t * //routing a sine tone in the left channel\n\t * //and noise in the right channel\n\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t * var noise = new Tone.Noise().connect(merge.right);\n\t * //starting our oscillators\n\t * noise.start();\n\t * osc.start();\n\t */",
		"meta": {
			"range": [
				553,
				1353
			],
			"filename": "Merge.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006129",
				"name": "Tone.Merge",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.left": "Tone.Merge#left",
				"this.input[0]": "Tone.Merge#input[0]",
				"this.right": "Tone.Merge#right",
				"this.input[1]": "Tone.Merge#input[1]",
				"this._merger": "Tone.Merge#_merger",
				"this.output": "Tone.Merge#output",
				"this.left.channelCount": "Tone.Merge#left.channelCount",
				"this.right.channelCount": "Tone.Merge#right.channelCount",
				"this.left.channelCountMode": "Tone.Merge#left.channelCountMode",
				"this.right.channelCountMode": "Tone.Merge#right.channelCountMode"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Merge brings two signals into the left and right \n         channels of a single stereo channel.",
		"augments": [
			"Tone"
		],
		"examples": [
			"var merge = new Tone.Merge().toMaster();\n//routing a sine tone in the left channel\n//and noise in the right channel\nvar osc = new Tone.Oscillator().connect(merge.left);\nvar noise = new Tone.Noise().connect(merge.right);\n//starting our oscillators\nnoise.start();\nosc.start();"
		],
		"name": "Merge",
		"longname": "Tone.Merge",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The left input channel.\n\t\t *  Alias for <code>input[0]</code>\n\t\t *  @type {GainNode}\n\t\t */",
		"meta": {
			"range": [
				732,
				775
			],
			"filename": "Merge.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006149",
				"name": "this.left",
				"type": "AssignmentExpression",
				"value": "this.input[0]",
				"paramnames": []
			}
		},
		"description": "The left input channel.\n Alias for <code>input[0]</code>",
		"type": {
			"names": [
				"GainNode"
			]
		},
		"name": "left",
		"longname": "Tone.Merge#left",
		"kind": "member",
		"memberof": "Tone.Merge",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The right input channel.\n\t\t *  Alias for <code>input[1]</code>.\n\t\t *  @type {GainNode}\n\t\t */",
		"meta": {
			"range": [
				885,
				929
			],
			"filename": "Merge.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006164",
				"name": "this.right",
				"type": "AssignmentExpression",
				"value": "this.input[1]",
				"paramnames": []
			}
		},
		"description": "The right input channel.\n Alias for <code>input[1]</code>.",
		"type": {
			"names": [
				"GainNode"
			]
		},
		"name": "right",
		"longname": "Tone.Merge#right",
		"kind": "member",
		"memberof": "Tone.Merge",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Merge} this\n\t */",
		"meta": {
			"range": [
				1441,
				1678
			],
			"filename": "Merge.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006259",
				"name": "Tone.Merge.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.left": "Tone.Merge#left",
				"this.right": "Tone.Merge#right",
				"this._merger": "Tone.Merge#_merger"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Merge"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Merge#dispose",
		"kind": "function",
		"memberof": "Tone.Merge",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t *          of an input signal with some averaging applied. It can also get the raw \n\t *          value of the input signal.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {String} type Either \"level\" or \"signal\". \n\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t *  @example\n\t * var meter = new Tone.Meter();\n\t * var mic = new Tone.UserMedia().open();\n\t * //connect mic to the meter\n\t * mic.connect(meter);\n\t * //the current level of the mic input\n\t * var level = meter.value;\n\t */",
		"meta": {
			"range": [
				704,
				1581
			],
			"filename": "Meter.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006338",
				"name": "Tone.Meter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Meter~options",
				"this.type": "Tone.Meter#type",
				"this.input": "Tone.Meter#input",
				"this.output": "Tone.Meter#output",
				"this._analyser": "Tone.Meter#_analyser",
				"this.smoothing": "Tone.Meter#smoothing",
				"this._lastValue": "Tone.Meter#_lastValue"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n         of an input signal with some averaging applied. It can also get the raw \n         value of the input signal.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Either \"level\" or \"signal\".",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The amount of smoothing applied between frames.",
				"name": "smoothing"
			}
		],
		"examples": [
			"var meter = new Tone.Meter();\nvar mic = new Tone.UserMedia().open();\n//connect mic to the meter\nmic.connect(meter);\n//the current level of the mic input\nvar level = meter.value;"
		],
		"name": "Meter",
		"longname": "Tone.Meter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t *  input signal and a \"signal\" meter will return\n\t\t *  the signal value of the input. \n\t\t *  @type  {String}\n\t\t */",
		"meta": {
			"range": [
				1078,
				1102
			],
			"filename": "Meter.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006365",
				"name": "this.type",
				"type": "MemberExpression",
				"value": "options.type",
				"paramnames": []
			}
		},
		"description": "The type of the meter, either \"level\" or \"signal\". \n A \"level\" meter will return the volume level (rms) of the \n input signal and a \"signal\" meter will return\n the signal value of the input.",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "type",
		"longname": "Tone.Meter#type",
		"kind": "member",
		"memberof": "Tone.Meter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of carryover between the current and last frame. \n\t\t *  Only applied meter for \"level\" type.\n\t\t *  @type  {Number}\n\t\t */",
		"meta": {
			"range": [
				1441,
				1475
			],
			"filename": "Meter.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006392",
				"name": "this.smoothing",
				"type": "MemberExpression",
				"value": "options.smoothing",
				"paramnames": []
			}
		},
		"description": "The amount of carryover between the current and last frame. \n Only applied meter for \"level\" type.",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "smoothing",
		"longname": "Tone.Meter#smoothing",
		"kind": "member",
		"memberof": "Tone.Meter",
		"scope": "instance"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1678,
				1693
			],
			"filename": "Meter.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006421",
				"name": "Level",
				"type": "Literal",
				"value": "level"
			}
		},
		"name": "Level",
		"longname": "Tone.Meter.Type.Level",
		"kind": "member",
		"memberof": "Tone.Meter.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "level"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1697,
				1714
			],
			"filename": "Meter.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006423",
				"name": "Signal",
				"type": "Literal",
				"value": "signal"
			}
		},
		"name": "Signal",
		"longname": "Tone.Meter.Type.Signal",
		"kind": "member",
		"memberof": "Tone.Meter.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "signal"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @type {Object}\n\t *  @static\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1794,
				1874
			],
			"filename": "Meter.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006426",
				"name": "Tone.Meter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"scope": "static",
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Meter.defaults",
		"memberof": "Tone.Meter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1820,
				1837
			],
			"filename": "Meter.js",
			"lineno": 76,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006433",
				"name": "smoothing",
				"type": "Literal",
				"value": 0.8
			}
		},
		"undocumented": true,
		"name": "smoothing",
		"longname": "Tone.Meter.defaults.smoothing",
		"kind": "member",
		"memberof": "Tone.Meter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1841,
				1871
			],
			"filename": "Meter.js",
			"lineno": 77,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006435",
				"name": "type",
				"type": "MemberExpression",
				"value": "Tone.Meter.Type.Level"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Meter.defaults.type",
		"kind": "member",
		"memberof": "Tone.Meter.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The current value of the meter. A value of 1 is\n\t * \"unity\".\n\t * @memberOf Tone.Meter#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Meter.js",
			"lineno": 80,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The current value of the meter. A value of 1 is\n\"unity\".",
		"memberof": "Tone.Meter",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.Meter#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Meter} this\n\t */",
		"meta": {
			"range": [
				2680,
				2830
			],
			"filename": "Meter.js",
			"lineno": 116,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006563",
				"name": "Tone.Meter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._analyser": "Tone.Meter#_analyser"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Meter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Meter#dispose",
		"kind": "function",
		"memberof": "Tone.Meter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t *         and side signal components. See Tone.MidSideSplit. \n\t *\n\t *  @extends {Tone}\n\t *  @param {Object} options The options that are passed to the mid and side\n\t *                          compressors. \n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				471,
				1361
			],
			"filename": "MidSideCompressor.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006618",
				"name": "Tone.MidSideCompressor",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.MidSideCompressor~options",
				"this._midSideSplit": "Tone.MidSideCompressor#_midSideSplit",
				"this.input": "Tone.MidSideCompressor#input",
				"this._midSideMerge": "Tone.MidSideCompressor#_midSideMerge",
				"this.output": "Tone.MidSideCompressor#output",
				"this.mid": "Tone.MidSideCompressor#mid",
				"this.side": "Tone.MidSideCompressor#side"
			}
		},
		"kind": "class",
		"classdesc": "Tone.MidSideCompressor applies two different compressors to the mid\n        and side signal components. See Tone.MidSideSplit.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The options that are passed to the mid and side\n                         compressors.",
				"name": "options"
			}
		],
		"name": "MidSideCompressor",
		"longname": "Tone.MidSideCompressor",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The compressor applied to the mid signal\n\t\t *  @type  {Tone.Compressor}\n\t\t */",
		"meta": {
			"range": [
				1002,
				1045
			],
			"filename": "MidSideCompressor.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006671",
				"name": "this.mid",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The compressor applied to the mid signal",
		"type": {
			"names": [
				"Tone.Compressor"
			]
		},
		"name": "mid",
		"longname": "Tone.MidSideCompressor#mid",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The compressor applied to the side signal\n\t\t *  @type  {Tone.Compressor}\n\t\t */",
		"meta": {
			"range": [
				1141,
				1186
			],
			"filename": "MidSideCompressor.js",
			"lineno": 44,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006683",
				"name": "this.side",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The compressor applied to the side signal",
		"type": {
			"names": [
				"Tone.Compressor"
			]
		},
		"name": "side",
		"longname": "Tone.MidSideCompressor#side",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1459,
				1719
			],
			"filename": "MidSideCompressor.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006745",
				"name": "Tone.MidSideCompressor.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MidSideCompressor.defaults",
		"memberof": "Tone.MidSideCompressor"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1497,
				1604
			],
			"filename": "MidSideCompressor.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006752",
				"name": "mid",
				"type": "ObjectExpression",
				"value": "{\"undefined\":16}"
			}
		},
		"undocumented": true,
		"name": "mid",
		"longname": "Tone.MidSideCompressor.defaults.mid",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1510,
				1521
			],
			"filename": "MidSideCompressor.js",
			"lineno": 60,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006754",
				"name": "ratio",
				"type": "Literal",
				"value": 3
			}
		},
		"undocumented": true,
		"name": "ratio",
		"longname": "Tone.MidSideCompressor.defaults.mid.ratio",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.mid",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1526,
				1543
			],
			"filename": "MidSideCompressor.js",
			"lineno": 61,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006756",
				"name": "threshold",
				"type": "UnaryExpression",
				"value": -24
			}
		},
		"undocumented": true,
		"name": "threshold",
		"longname": "Tone.MidSideCompressor.defaults.mid.threshold",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.mid",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1548,
				1564
			],
			"filename": "MidSideCompressor.js",
			"lineno": 62,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006759",
				"name": "release",
				"type": "Literal",
				"value": 0.03
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MidSideCompressor.defaults.mid.release",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.mid",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1569,
				1584
			],
			"filename": "MidSideCompressor.js",
			"lineno": 63,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006761",
				"name": "attack",
				"type": "Literal",
				"value": 0.02
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MidSideCompressor.defaults.mid.attack",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.mid",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1589,
				1600
			],
			"filename": "MidSideCompressor.js",
			"lineno": 64,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006763",
				"name": "knee",
				"type": "Literal",
				"value": 16
			}
		},
		"undocumented": true,
		"name": "knee",
		"longname": "Tone.MidSideCompressor.defaults.mid.knee",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.mid",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1608,
				1716
			],
			"filename": "MidSideCompressor.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006765",
				"name": "side",
				"type": "ObjectExpression",
				"value": "{\"undefined\":10}"
			}
		},
		"undocumented": true,
		"name": "side",
		"longname": "Tone.MidSideCompressor.defaults.side",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1622,
				1633
			],
			"filename": "MidSideCompressor.js",
			"lineno": 67,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006767",
				"name": "ratio",
				"type": "Literal",
				"value": 6
			}
		},
		"undocumented": true,
		"name": "ratio",
		"longname": "Tone.MidSideCompressor.defaults.side.ratio",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.side",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1638,
				1655
			],
			"filename": "MidSideCompressor.js",
			"lineno": 68,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006769",
				"name": "threshold",
				"type": "UnaryExpression",
				"value": -30
			}
		},
		"undocumented": true,
		"name": "threshold",
		"longname": "Tone.MidSideCompressor.defaults.side.threshold",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.side",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1660,
				1676
			],
			"filename": "MidSideCompressor.js",
			"lineno": 69,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006772",
				"name": "release",
				"type": "Literal",
				"value": 0.25
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MidSideCompressor.defaults.side.release",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.side",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1681,
				1696
			],
			"filename": "MidSideCompressor.js",
			"lineno": 70,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006774",
				"name": "attack",
				"type": "Literal",
				"value": 0.03
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MidSideCompressor.defaults.side.attack",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.side",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1701,
				1712
			],
			"filename": "MidSideCompressor.js",
			"lineno": 71,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006776",
				"name": "knee",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "knee",
		"longname": "Tone.MidSideCompressor.defaults.side.knee",
		"kind": "member",
		"memberof": "Tone.MidSideCompressor.defaults.side",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.MidSideCompressor} this\n\t */",
		"meta": {
			"range": [
				1792,
				2142
			],
			"filename": "MidSideCompressor.js",
			"lineno": 79,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006779",
				"name": "Tone.MidSideCompressor.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.mid": "Tone.MidSideCompressor#mid",
				"this.side": "Tone.MidSideCompressor#side",
				"this._midSideSplit": "Tone.MidSideCompressor#_midSideSplit",
				"this._midSideMerge": "Tone.MidSideCompressor#_midSideMerge"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MidSideCompressor"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MidSideCompressor#dispose",
		"kind": "function",
		"memberof": "Tone.MidSideCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Mid/Side processing separates the the 'mid' signal \n\t *         (which comes out of both the left and the right channel) \n\t *         and the 'side' (which only comes out of the the side channels). \n\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t *         by Tone.MidSideSplit.<br><br>\n\t *         <code>\n\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t *         </code>\n\t *\n\t *  @extends {Tone.StereoEffect}\n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				762,
				1965
			],
			"filename": "MidSideMerge.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006882",
				"name": "Tone.MidSideMerge",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.mid": "Tone.MidSideMerge#mid",
				"this.input[0]": "Tone.MidSideMerge#input[0]",
				"this._left": "Tone.MidSideMerge#_left",
				"this.side": "Tone.MidSideMerge#side",
				"this.input[1]": "Tone.MidSideMerge#input[1]",
				"this._right": "Tone.MidSideMerge#_right",
				"this._merge": "Tone.MidSideMerge#_merge",
				"this.output": "Tone.MidSideMerge#output"
			}
		},
		"kind": "class",
		"classdesc": "Mid/Side processing separates the the 'mid' signal \n        (which comes out of both the left and the right channel) \n        and the 'side' (which only comes out of the the side channels). \n        MidSideMerge merges the mid and side signal after they've been seperated\n        by Tone.MidSideSplit.<br><br>\n        <code>\n        Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n        Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n        </code>",
		"augments": [
			"Tone.StereoEffect"
		],
		"name": "MidSideMerge",
		"longname": "Tone.MidSideMerge",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The mid signal input. Alias for\n\t\t *  <code>input[0]</code>\n\t\t *  @type  {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				948,
				990
			],
			"filename": "MidSideMerge.js",
			"lineno": 30,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006902",
				"name": "this.mid",
				"type": "AssignmentExpression",
				"value": "this.input[0]",
				"paramnames": []
			}
		},
		"description": "The mid signal input. Alias for\n <code>input[0]</code>",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "mid",
		"longname": "Tone.MidSideMerge#mid",
		"kind": "member",
		"memberof": "Tone.MidSideMerge",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The side signal input. Alias for\n\t\t *  <code>input[1]</code>\n\t\t *  @type  {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				1238,
				1281
			],
			"filename": "MidSideMerge.js",
			"lineno": 44,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100006927",
				"name": "this.side",
				"type": "AssignmentExpression",
				"value": "this.input[1]",
				"paramnames": []
			}
		},
		"description": "The side signal input. Alias for\n <code>input[1]</code>",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "side",
		"longname": "Tone.MidSideMerge#side",
		"kind": "member",
		"memberof": "Tone.MidSideMerge",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.MidSideMerge} this\n\t */",
		"meta": {
			"range": [
				2066,
				2393
			],
			"filename": "MidSideMerge.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007081",
				"name": "Tone.MidSideMerge.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.mid": "Tone.MidSideMerge#mid",
				"this.side": "Tone.MidSideMerge#side",
				"this._left": "Tone.MidSideMerge#_left",
				"this._right": "Tone.MidSideMerge#_right",
				"this._merge": "Tone.MidSideMerge#_merge"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MidSideMerge"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MidSideMerge#dispose",
		"kind": "function",
		"memberof": "Tone.MidSideMerge",
		"scope": "instance",
		"overrides": "Tone.StereoEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Mid/Side processing separates the the 'mid' signal \n\t *         (which comes out of both the left and the right channel) \n\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t *         <code>\n\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t *         </code>\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				615,
				1528
			],
			"filename": "MidSideSplit.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007188",
				"name": "Tone.MidSideSplit",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._split": "Tone.MidSideSplit#_split",
				"this.input": "Tone.MidSideSplit#input",
				"this.mid": "Tone.MidSideSplit#mid",
				"this.output[0]": "Tone.MidSideSplit#output[0]",
				"this.side": "Tone.MidSideSplit#side",
				"this.output[1]": "Tone.MidSideSplit#output[1]"
			}
		},
		"kind": "class",
		"classdesc": "Mid/Side processing separates the the 'mid' signal \n        (which comes out of both the left and the right channel) \n        and the 'side' (which only comes out of the the side channels). <br><br>\n        <code>\n        Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n        Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n        </code>",
		"augments": [
			"Tone"
		],
		"name": "MidSideSplit",
		"longname": "Tone.MidSideSplit",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t *  <code>output[0]</code>\n\t\t *  @type {Tone.Expr}\n\t\t */",
		"meta": {
			"range": [
				982,
				1041
			],
			"filename": "MidSideSplit.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007221",
				"name": "this.mid",
				"type": "AssignmentExpression",
				"value": "this.output[0]",
				"paramnames": []
			}
		},
		"description": "The mid send. Connect to mid processing. Alias for\n <code>output[0]</code>",
		"type": {
			"names": [
				"Tone.Expr"
			]
		},
		"name": "mid",
		"longname": "Tone.MidSideSplit#mid",
		"kind": "member",
		"memberof": "Tone.MidSideSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The side output. Connect to side processing. Alias for\n\t\t *  <code>output[1]</code>\n\t\t *  @type {Tone.Expr}\n\t\t */",
		"meta": {
			"range": [
				1172,
				1232
			],
			"filename": "MidSideSplit.js",
			"lineno": 42,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007237",
				"name": "this.side",
				"type": "AssignmentExpression",
				"value": "this.output[1]",
				"paramnames": []
			}
		},
		"description": "The side output. Connect to side processing. Alias for\n <code>output[1]</code>",
		"type": {
			"names": [
				"Tone.Expr"
			]
		},
		"name": "side",
		"longname": "Tone.MidSideSplit#side",
		"kind": "member",
		"memberof": "Tone.MidSideSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.MidSideSplit} this\n\t */",
		"meta": {
			"range": [
				1629,
				1864
			],
			"filename": "MidSideSplit.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007345",
				"name": "Tone.MidSideSplit.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.mid": "Tone.MidSideSplit#mid",
				"this.side": "Tone.MidSideSplit#side",
				"this._split": "Tone.MidSideSplit#_split"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MidSideSplit"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MidSideSplit#dispose",
		"kind": "function",
		"memberof": "Tone.MidSideSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t *         where both left and right channels have the same value. This can be useful \n\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				390,
				717
			],
			"filename": "Mono.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007424",
				"name": "Tone.Mono",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._merge": "Tone.Mono#_merge",
				"this.output": "Tone.Mono#output",
				"this.input.gain.value": "Tone.Mono#input.gain.value"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n        where both left and right channels have the same value. This can be useful \n        for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).",
		"augments": [
			"Tone"
		],
		"name": "Mono",
		"longname": "Tone.Mono",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Mono} this\n\t */",
		"meta": {
			"range": [
				802,
				945
			],
			"filename": "Mono.js",
			"lineno": 36,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007504",
				"name": "Tone.Mono.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._merge": "Tone.Mono#_merge"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Mono"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Mono#dispose",
		"kind": "function",
		"memberof": "Tone.Mono",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Object} options The low/mid/high compressor settings.\n\t *  @example\n\t *  var multiband = new Tone.MultibandCompressor({\n\t *  \t\"lowFrequency\" : 200,\n\t *  \t\"highFrequency\" : 1300\n\t *  \t\"low\" : {\n\t *  \t\t\"threshold\" : -12\n\t *  \t}\n\t *  })\n\t */",
		"meta": {
			"range": [
				498,
				1972
			],
			"filename": "MultibandCompressor.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007558",
				"name": "Tone.MultibandCompressor",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.MultibandCompressor~options",
				"this._splitter": "Tone.MultibandCompressor#_splitter",
				"this.input": "Tone.MultibandCompressor#input",
				"this.lowFrequency": "Tone.MultibandCompressor#lowFrequency",
				"this.highFrequency": "Tone.MultibandCompressor#highFrequency",
				"this.output": "Tone.MultibandCompressor#output",
				"this.low": "Tone.MultibandCompressor#low",
				"this.mid": "Tone.MultibandCompressor#mid",
				"this.high": "Tone.MultibandCompressor#high"
			}
		},
		"kind": "class",
		"classdesc": "A compressor with seperate controls over low/mid/high dynamics",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The low/mid/high compressor settings.",
				"name": "options"
			}
		],
		"examples": [
			"var multiband = new Tone.MultibandCompressor({\n \t\"lowFrequency\" : 200,\n \t\"highFrequency\" : 1300\n \t\"low\" : {\n \t\t\"threshold\" : -12\n \t}\n })"
		],
		"name": "MultibandCompressor",
		"longname": "Tone.MultibandCompressor",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  low/mid crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				988,
				1035
			],
			"filename": "MultibandCompressor.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007607",
				"name": "this.lowFrequency",
				"type": "MemberExpression",
				"value": "this._splitter.lowFrequency",
				"paramnames": []
			}
		},
		"description": "low/mid crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "lowFrequency",
		"longname": "Tone.MultibandCompressor#lowFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  mid/high crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1126,
				1175
			],
			"filename": "MultibandCompressor.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007617",
				"name": "this.highFrequency",
				"type": "MemberExpression",
				"value": "this._splitter.highFrequency",
				"paramnames": []
			}
		},
		"description": "mid/high crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "highFrequency",
		"longname": "Tone.MultibandCompressor#highFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The compressor applied to the low frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */",
		"meta": {
			"range": [
				1377,
				1420
			],
			"filename": "MultibandCompressor.js",
			"lineno": 60,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007636",
				"name": "this.low",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The compressor applied to the low frequencies.",
		"type": {
			"names": [
				"Tone.Compressor"
			]
		},
		"name": "low",
		"longname": "Tone.MultibandCompressor#low",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The compressor applied to the mid frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */",
		"meta": {
			"range": [
				1520,
				1563
			],
			"filename": "MultibandCompressor.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007648",
				"name": "this.mid",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The compressor applied to the mid frequencies.",
		"type": {
			"names": [
				"Tone.Compressor"
			]
		},
		"name": "mid",
		"longname": "Tone.MultibandCompressor#mid",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The compressor applied to the high frequencies.\n\t\t *  @type {Tone.Compressor}\n\t\t */",
		"meta": {
			"range": [
				1664,
				1709
			],
			"filename": "MultibandCompressor.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007660",
				"name": "this.high",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The compressor applied to the high frequencies.",
		"type": {
			"names": [
				"Tone.Compressor"
			]
		},
		"name": "high",
		"longname": "Tone.MultibandCompressor#high",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2072,
				2270
			],
			"filename": "MultibandCompressor.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007736",
				"name": "Tone.MultibandCompressor.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":2000}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MultibandCompressor.defaults",
		"memberof": "Tone.MultibandCompressor"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2112,
				2144
			],
			"filename": "MultibandCompressor.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007743",
				"name": "low",
				"type": "MemberExpression",
				"value": "Tone.Compressor.defaults"
			}
		},
		"undocumented": true,
		"name": "low",
		"longname": "Tone.MultibandCompressor.defaults.low",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2148,
				2180
			],
			"filename": "MultibandCompressor.js",
			"lineno": 91,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007749",
				"name": "mid",
				"type": "MemberExpression",
				"value": "Tone.Compressor.defaults"
			}
		},
		"undocumented": true,
		"name": "mid",
		"longname": "Tone.MultibandCompressor.defaults.mid",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2184,
				2217
			],
			"filename": "MultibandCompressor.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007755",
				"name": "high",
				"type": "MemberExpression",
				"value": "Tone.Compressor.defaults"
			}
		},
		"undocumented": true,
		"name": "high",
		"longname": "Tone.MultibandCompressor.defaults.high",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2221,
				2241
			],
			"filename": "MultibandCompressor.js",
			"lineno": 93,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007761",
				"name": "lowFrequency",
				"type": "Literal",
				"value": 250
			}
		},
		"undocumented": true,
		"name": "lowFrequency",
		"longname": "Tone.MultibandCompressor.defaults.lowFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2245,
				2267
			],
			"filename": "MultibandCompressor.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007763",
				"name": "highFrequency",
				"type": "Literal",
				"value": 2000
			}
		},
		"undocumented": true,
		"name": "highFrequency",
		"longname": "Tone.MultibandCompressor.defaults.highFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandCompressor.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.MultibandCompressor} this\n\t */",
		"meta": {
			"range": [
				2344,
				2765
			],
			"filename": "MultibandCompressor.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007766",
				"name": "Tone.MultibandCompressor.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._splitter": "Tone.MultibandCompressor#_splitter",
				"this.low": "Tone.MultibandCompressor#low",
				"this.mid": "Tone.MultibandCompressor#mid",
				"this.high": "Tone.MultibandCompressor#high",
				"this.lowFrequency": "Tone.MultibandCompressor#lowFrequency",
				"this.highFrequency": "Tone.MultibandCompressor#highFrequency"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultibandCompressor"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MultibandCompressor#dispose",
		"kind": "function",
		"memberof": "Tone.MultibandCompressor",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t *         with two crossover frequency controls. \n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t */",
		"meta": {
			"range": [
				454,
				2454
			],
			"filename": "MultibandSplit.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007883",
				"name": "Tone.MultibandSplit",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.MultibandSplit~options",
				"this.input": "Tone.MultibandSplit#input",
				"this.output": "Tone.MultibandSplit#output",
				"this.low": "Tone.MultibandSplit#low",
				"this.output[0]": "Tone.MultibandSplit#output[0]",
				"this._lowMidFilter": "Tone.MultibandSplit#_lowMidFilter",
				"this.mid": "Tone.MultibandSplit#mid",
				"this.output[1]": "Tone.MultibandSplit#output[1]",
				"this.high": "Tone.MultibandSplit#high",
				"this.output[2]": "Tone.MultibandSplit#output[2]",
				"this.lowFrequency": "Tone.MultibandSplit#lowFrequency",
				"this.highFrequency": "Tone.MultibandSplit#highFrequency",
				"this.Q": "Tone.MultibandSplit#Q"
			}
		},
		"kind": "class",
		"classdesc": "Split the incoming signal into three bands (low, mid, high)\n        with two crossover frequency controls.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "the low/mid crossover frequency",
				"name": "lowFrequency"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "the mid/high crossover frequency",
				"name": "highFrequency"
			}
		],
		"name": "MultibandSplit",
		"longname": "Tone.MultibandSplit",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */",
		"meta": {
			"range": [
				896,
				953
			],
			"filename": "MultibandSplit.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007927",
				"name": "this.low",
				"type": "AssignmentExpression",
				"value": "this.output[0]",
				"paramnames": []
			}
		},
		"description": "The low band. Alias for <code>output[0]</code>",
		"type": {
			"names": [
				"Tone.Filter"
			]
		},
		"name": "low",
		"longname": "Tone.MultibandSplit#low",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */",
		"meta": {
			"range": [
				1204,
				1261
			],
			"filename": "MultibandSplit.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007955",
				"name": "this.mid",
				"type": "AssignmentExpression",
				"value": "this.output[1]",
				"paramnames": []
			}
		},
		"description": "The mid band output. Alias for <code>output[1]</code>",
		"type": {
			"names": [
				"Tone.Filter"
			]
		},
		"name": "mid",
		"longname": "Tone.MultibandSplit#mid",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t *  @type {Tone.Filter}\n\t\t */",
		"meta": {
			"range": [
				1365,
				1424
			],
			"filename": "MultibandSplit.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007972",
				"name": "this.high",
				"type": "AssignmentExpression",
				"value": "this.output[2]",
				"paramnames": []
			}
		},
		"description": "The high band output. Alias for <code>output[2]</code>",
		"type": {
			"names": [
				"Tone.Filter"
			]
		},
		"name": "high",
		"longname": "Tone.MultibandSplit#high",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The low/mid crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1518,
				1596
			],
			"filename": "MultibandSplit.js",
			"lineno": 63,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100007989",
				"name": "this.lowFrequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The low/mid crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "lowFrequency",
		"longname": "Tone.MultibandSplit#lowFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The mid/high crossover frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1691,
				1771
			],
			"filename": "MultibandSplit.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008006",
				"name": "this.highFrequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The mid/high crossover frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "highFrequency",
		"longname": "Tone.MultibandSplit#highFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The quality of all the filters\n\t\t *  @type {Number}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1860,
				1895
			],
			"filename": "MultibandSplit.js",
			"lineno": 77,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008023",
				"name": "this.Q",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The quality of all the filters",
		"type": {
			"names": [
				"Number"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "Q",
		"longname": "Tone.MultibandSplit#Q",
		"kind": "member",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2586,
				2606
			],
			"filename": "MultibandSplit.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008183",
				"name": "lowFrequency",
				"type": "Literal",
				"value": 400
			}
		},
		"undocumented": true,
		"name": "lowFrequency",
		"longname": "Tone.MultibandSplit.defaults.lowFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandSplit.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2610,
				2632
			],
			"filename": "MultibandSplit.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008185",
				"name": "highFrequency",
				"type": "Literal",
				"value": 2500
			}
		},
		"undocumented": true,
		"name": "highFrequency",
		"longname": "Tone.MultibandSplit.defaults.highFrequency",
		"kind": "member",
		"memberof": "Tone.MultibandSplit.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2636,
				2643
			],
			"filename": "MultibandSplit.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008187",
				"name": "Q",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.MultibandSplit.defaults.Q",
		"kind": "member",
		"memberof": "Tone.MultibandSplit.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.MultibandSplit} this\n\t */",
		"meta": {
			"range": [
				2717,
				3241
			],
			"filename": "MultibandSplit.js",
			"lineno": 112,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008190",
				"name": "Tone.MultibandSplit.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.low": "Tone.MultibandSplit#low",
				"this._lowMidFilter": "Tone.MultibandSplit#_lowMidFilter",
				"this.mid": "Tone.MultibandSplit#mid",
				"this.high": "Tone.MultibandSplit#high",
				"this.lowFrequency": "Tone.MultibandSplit#lowFrequency",
				"this.highFrequency": "Tone.MultibandSplit#highFrequency",
				"this.Q": "Tone.MultibandSplit#Q"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultibandSplit"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MultibandSplit#dispose",
		"kind": "function",
		"memberof": "Tone.MultibandSplit",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {NormalRange} [initialPan=0] The initail panner value (center).\n\t *  @example\n\t *  //pan the input signal hard right. \n\t *  var panner = new Tone.Panner(1);\n\t */",
		"meta": {
			"range": [
				582,
				2251
			],
			"filename": "Panner.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008337",
				"name": "Tone.Panner",
				"type": "FunctionExpression",
				"paramnames": [
					"initialPan"
				]
			},
			"vars": {
				"this._panner": "Tone.Panner#_panner",
				"this.input": "Tone.Panner#input",
				"this.output": "Tone.Panner#output",
				"this.pan": "Tone.Panner#pan",
				"this._crossFade": "Tone.Panner#_crossFade",
				"this._merger": "Tone.Panner#_merger",
				"this._splitter": "Tone.Panner#_splitter",
				"this._zero": "Tone.Panner#_zero",
				"this._a2g": "Tone.Panner#_a2g",
				"this.pan.value": "Tone.Panner#pan.value"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Panner is an equal power Left/Right Panner and does not\n         support 3D. Panner uses the StereoPannerNode when available.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The initail panner value (center).",
				"name": "initialPan"
			}
		],
		"examples": [
			"//pan the input signal hard right. \n var panner = new Tone.Panner(1);"
		],
		"name": "Panner",
		"longname": "Tone.Panner",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */",
		"meta": {
			"range": [
				958,
				985
			],
			"filename": "Panner.js",
			"lineno": 35,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008377",
				"name": "this.pan",
				"type": "MemberExpression",
				"value": "this._panner.pan",
				"paramnames": []
			}
		},
		"description": "The pan control. -1 = hard left, 1 = hard right.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "pan",
		"longname": "Tone.Panner#pan",
		"kind": "member",
		"memberof": "Tone.Panner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */",
		"meta": {
			"range": [
				1471,
				1522
			],
			"filename": "Panner.js",
			"lineno": 63,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008423",
				"name": "this.pan",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The pan control. -1 = hard left, 1 = hard right.",
		"type": {
			"names": [
				"AudioRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "pan",
		"longname": "Tone.Panner#pan",
		"kind": "member",
		"memberof": "Tone.Panner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Panner} this\n\t */",
		"meta": {
			"range": [
				2587,
				3133
			],
			"filename": "Panner.js",
			"lineno": 109,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008580",
				"name": "Tone.Panner.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._panner": "Tone.Panner#_panner",
				"this.pan": "Tone.Panner#pan",
				"this._zero": "Tone.Panner#_zero",
				"this._crossFade": "Tone.Panner#_crossFade",
				"this._splitter": "Tone.Panner#_splitter",
				"this._merger": "Tone.Panner#_merger",
				"this._a2g": "Tone.Panner#_a2g"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Panner"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Panner#dispose",
		"kind": "function",
		"memberof": "Tone.Panner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Number} positionX The initial x position.\n\t *  @param {Number} positionY The initial y position.\n\t *  @param {Number} positionZ The initial z position.\n\t */",
		"meta": {
			"range": [
				594,
				1960
			],
			"filename": "Panner3D.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008736",
				"name": "Tone.Panner3D",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Panner3D~options",
				"this._panner": "Tone.Panner3D#_panner",
				"this.input": "Tone.Panner3D#input",
				"this.output": "Tone.Panner3D#output",
				"this._panner.panningModel": "Tone.Panner3D#_panner.panningModel",
				"this._panner.maxDistance": "Tone.Panner3D#_panner.maxDistance",
				"this._panner.distanceModel": "Tone.Panner3D#_panner.distanceModel",
				"this._panner.coneOuterGain": "Tone.Panner3D#_panner.coneOuterGain",
				"this._panner.coneOuterAngle": "Tone.Panner3D#_panner.coneOuterAngle",
				"this._panner.coneInnerAngle": "Tone.Panner3D#_panner.coneInnerAngle",
				"this._panner.refDistance": "Tone.Panner3D#_panner.refDistance",
				"this._panner.rolloffFactor": "Tone.Panner3D#_panner.rolloffFactor",
				"this._orientation": "Tone.Panner3D#_orientation",
				"this._position": "Tone.Panner3D#_position",
				"this.orientationX": "Tone.Panner3D#orientationX",
				"this.orientationY": "Tone.Panner3D#orientationY",
				"this.orientationZ": "Tone.Panner3D#orientationZ",
				"this.positionX": "Tone.Panner3D#positionX",
				"this.positionY": "Tone.Panner3D#positionY",
				"this.positionZ": "Tone.Panner3D#positionZ"
			}
		},
		"kind": "class",
		"classdesc": "A spatialized panner node which supports equalpower or HRTF panning.\n         Tries to normalize the API across various browsers. See Tone.Listener",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The initial x position.",
				"name": "positionX"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The initial y position.",
				"name": "positionY"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The initial z position.",
				"name": "positionZ"
			}
		],
		"name": "Panner3D",
		"longname": "Tone.Panner3D",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Defaults according to the specification\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2094,
				2453
			],
			"filename": "Panner3D.js",
			"lineno": 69,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008949",
				"name": "Tone.Panner3D.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "Defaults according to the specification",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Panner3D.defaults",
		"memberof": "Tone.Panner3D"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2123,
				2138
			],
			"filename": "Panner3D.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008956",
				"name": "positionX",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionX",
		"longname": "Tone.Panner3D.defaults.positionX",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2142,
				2157
			],
			"filename": "Panner3D.js",
			"lineno": 71,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008958",
				"name": "positionY",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionY",
		"longname": "Tone.Panner3D.defaults.positionY",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2161,
				2176
			],
			"filename": "Panner3D.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008960",
				"name": "positionZ",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionZ",
		"longname": "Tone.Panner3D.defaults.positionZ",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2180,
				2198
			],
			"filename": "Panner3D.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008962",
				"name": "orientationX",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "orientationX",
		"longname": "Tone.Panner3D.defaults.orientationX",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2202,
				2220
			],
			"filename": "Panner3D.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008964",
				"name": "orientationY",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "orientationY",
		"longname": "Tone.Panner3D.defaults.orientationY",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2224,
				2242
			],
			"filename": "Panner3D.js",
			"lineno": 75,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008966",
				"name": "orientationZ",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "orientationZ",
		"longname": "Tone.Panner3D.defaults.orientationZ",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2246,
				2275
			],
			"filename": "Panner3D.js",
			"lineno": 76,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008968",
				"name": "panningModel",
				"type": "Literal",
				"value": "equalpower"
			}
		},
		"undocumented": true,
		"name": "panningModel",
		"longname": "Tone.Panner3D.defaults.panningModel",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2279,
				2300
			],
			"filename": "Panner3D.js",
			"lineno": 77,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008970",
				"name": "maxDistance",
				"type": "Literal",
				"value": 10000
			}
		},
		"undocumented": true,
		"name": "maxDistance",
		"longname": "Tone.Panner3D.defaults.maxDistance",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2304,
				2331
			],
			"filename": "Panner3D.js",
			"lineno": 78,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008972",
				"name": "distanceModel",
				"type": "Literal",
				"value": "inverse"
			}
		},
		"undocumented": true,
		"name": "distanceModel",
		"longname": "Tone.Panner3D.defaults.distanceModel",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2335,
				2354
			],
			"filename": "Panner3D.js",
			"lineno": 79,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008974",
				"name": "coneOuterGain",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "coneOuterGain",
		"longname": "Tone.Panner3D.defaults.coneOuterGain",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2358,
				2380
			],
			"filename": "Panner3D.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008976",
				"name": "coneOuterAngle",
				"type": "Literal",
				"value": 360
			}
		},
		"undocumented": true,
		"name": "coneOuterAngle",
		"longname": "Tone.Panner3D.defaults.coneOuterAngle",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2384,
				2406
			],
			"filename": "Panner3D.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008978",
				"name": "coneInnerAngle",
				"type": "Literal",
				"value": 360
			}
		},
		"undocumented": true,
		"name": "coneInnerAngle",
		"longname": "Tone.Panner3D.defaults.coneInnerAngle",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2410,
				2427
			],
			"filename": "Panner3D.js",
			"lineno": 82,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008980",
				"name": "refDistance",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "refDistance",
		"longname": "Tone.Panner3D.defaults.refDistance",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2431,
				2450
			],
			"filename": "Panner3D.js",
			"lineno": 83,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008982",
				"name": "rolloffFactor",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "rolloffFactor",
		"longname": "Tone.Panner3D.defaults.rolloffFactor",
		"kind": "member",
		"memberof": "Tone.Panner3D.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Sets the position of the source in 3d space.\t\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Panner3D} this\n\t */",
		"meta": {
			"range": [
				2779,
				3245
			],
			"filename": "Panner3D.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100008995",
				"name": "Tone.Panner3D.prototype.setPosition",
				"type": "FunctionExpression",
				"paramnames": [
					"x",
					"y",
					"z"
				]
			},
			"vars": {
				"now": "Tone.Panner3D#setPosition~now",
				"this._position": "Tone.Panner3D#_position"
			}
		},
		"description": "Sets the position of the source in 3d space.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "x"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "y"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "z"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Panner3D"
					]
				},
				"description": "this"
			}
		],
		"name": "setPosition",
		"longname": "Tone.Panner3D#setPosition",
		"kind": "function",
		"memberof": "Tone.Panner3D",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Sets the orientation of the source in 3d space.\t\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Panner3D} this\n\t */",
		"meta": {
			"range": [
				3422,
				3909
			],
			"filename": "Panner3D.js",
			"lineno": 120,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009092",
				"name": "Tone.Panner3D.prototype.setOrientation",
				"type": "FunctionExpression",
				"paramnames": [
					"x",
					"y",
					"z"
				]
			},
			"vars": {
				"now": "Tone.Panner3D#setOrientation~now",
				"this._orientation": "Tone.Panner3D#_orientation"
			}
		},
		"description": "Sets the orientation of the source in 3d space.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "x"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "y"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "z"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Panner3D"
					]
				},
				"description": "this"
			}
		],
		"name": "setOrientation",
		"longname": "Tone.Panner3D#setOrientation",
		"kind": "function",
		"memberof": "Tone.Panner3D",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The x position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionX\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 133,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The x position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "positionX",
		"longname": "Tone.Panner3D#positionX",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The y position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionY\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 149,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The y position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "positionY",
		"longname": "Tone.Panner3D#positionY",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The z position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name positionZ\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 165,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The z position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "positionZ",
		"longname": "Tone.Panner3D#positionZ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The x orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationX\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The x orientation of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "orientationX",
		"longname": "Tone.Panner3D#orientationX",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The y orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationY\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 197,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The y orientation of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "orientationY",
		"longname": "Tone.Panner3D#orientationY",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The z orientation of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name orientationZ\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 213,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The z orientation of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "orientationZ",
		"longname": "Tone.Panner3D#orientationZ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t *  @type {String}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name panningModel\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 245,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The panning model. Either \"equalpower\" or \"HRTF\".",
		"type": {
			"names": [
				"String"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "panningModel",
		"longname": "Tone.Panner3D#panningModel",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  A reference distance for reducing volume as source move further from the listener\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name refDistance\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 253,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "A reference distance for reducing volume as source move further from the listener",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "refDistance",
		"longname": "Tone.Panner3D#refDistance",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t *  @type {Number}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name rolloffFactor\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 261,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Describes how quickly the volume is reduced as source moves away from listener.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "rolloffFactor",
		"longname": "Tone.Panner3D#rolloffFactor",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t *  @type {String}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name distanceModel\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 269,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The distance model used by,  \"linear\", \"inverse\", or \"exponential\".",
		"type": {
			"names": [
				"String"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "distanceModel",
		"longname": "Tone.Panner3D#distanceModel",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t *  @type {Degrees}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneInnerAngle\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The angle, in degrees, inside of which there will be no volume reduction",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "coneInnerAngle",
		"longname": "Tone.Panner3D#coneInnerAngle",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The angle, in degrees, outside of which the volume will be reduced \n\t *  to a constant value of coneOuterGain\n\t *  @type {Degrees}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneOuterAngle\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 285,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The angle, in degrees, outside of which the volume will be reduced \n to a constant value of coneOuterGain",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "coneOuterAngle",
		"longname": "Tone.Panner3D#coneOuterAngle",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The gain outside of the coneOuterAngle\n\t *  @type {Gain}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name coneOuterGain\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The gain outside of the coneOuterAngle",
		"type": {
			"names": [
				"Gain"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "coneOuterGain",
		"longname": "Tone.Panner3D#coneOuterGain",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The maximum distance between source and listener, \n\t *  after which the volume will not be reduced any further.\n\t *  @type {Positive}\n\t *  @memberOf Tone.Panner3D#\n\t *  @name maxDistance\n\t */",
		"meta": {
			"filename": "Panner3D.js",
			"lineno": 302,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The maximum distance between source and listener, \n after which the volume will not be reduced any further.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"memberof": "Tone.Panner3D",
		"name": "maxDistance",
		"longname": "Tone.Panner3D#maxDistance",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Panner3D} this\n\t */",
		"meta": {
			"range": [
				8208,
				8376
			],
			"filename": "Panner3D.js",
			"lineno": 315,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009560",
				"name": "Tone.Panner3D.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._panner": "Tone.Panner3D#_panner",
				"this._orientation": "Tone.Panner3D#_orientation",
				"this._position": "Tone.Panner3D#_position"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Panner3D"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Panner3D#dispose",
		"kind": "function",
		"memberof": "Tone.Panner3D",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {AudioRange} pan the initial pan\n\t *  @param {number} volume The output volume. \n\t *  @example\n\t * //pan the incoming signal left and drop the volume\n\t * var panVol = new Tone.PanVol(-0.25, -12);\n\t */",
		"meta": {
			"range": [
				437,
				1171
			],
			"filename": "PanVol.js",
			"lineno": 16,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009616",
				"name": "Tone.PanVol",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PanVol~options",
				"this._panner": "Tone.PanVol#_panner",
				"this.input": "Tone.PanVol#input",
				"this.pan": "Tone.PanVol#pan",
				"this._volume": "Tone.PanVol#_volume",
				"this.output": "Tone.PanVol#output",
				"this.volume": "Tone.PanVol#volume"
			}
		},
		"kind": "class",
		"classdesc": "Tone.PanVol is a Tone.Panner and Tone.Volume in one.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioRange"
					]
				},
				"description": "the initial pan",
				"name": "pan"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The output volume.",
				"name": "volume"
			}
		],
		"examples": [
			"//pan the incoming signal left and drop the volume\nvar panVol = new Tone.PanVol(-0.25, -12);"
		],
		"name": "PanVol",
		"longname": "Tone.PanVol",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The L/R panning control.\n\t\t *  @type {AudioRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				781,
				808
			],
			"filename": "PanVol.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009659",
				"name": "this.pan",
				"type": "MemberExpression",
				"value": "this._panner.pan",
				"paramnames": []
			}
		},
		"description": "The L/R panning control.",
		"type": {
			"names": [
				"AudioRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "pan",
		"longname": "Tone.PanVol#pan",
		"kind": "member",
		"memberof": "Tone.PanVol",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The volume control in decibels. \n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1041,
				1074
			],
			"filename": "PanVol.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009685",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume control in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "volume",
		"longname": "Tone.PanVol#volume",
		"kind": "member",
		"memberof": "Tone.PanVol",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1277,
				1334
			],
			"filename": "PanVol.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009721",
				"name": "Tone.PanVol.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.PanVol.defaults",
		"memberof": "Tone.PanVol"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1304,
				1315
			],
			"filename": "PanVol.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009728",
				"name": "pan",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "pan",
		"longname": "Tone.PanVol.defaults.pan",
		"kind": "member",
		"memberof": "Tone.PanVol.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1319,
				1331
			],
			"filename": "PanVol.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009730",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.PanVol.defaults.volume",
		"kind": "member",
		"memberof": "Tone.PanVol.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.PanVol} this\n\t */",
		"meta": {
			"range": [
				1395,
				1669
			],
			"filename": "PanVol.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009733",
				"name": "Tone.PanVol.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._panner": "Tone.PanVol#_panner",
				"this.pan": "Tone.PanVol#pan",
				"this._volume": "Tone.PanVol#_volume",
				"this.volume": "Tone.PanVol#volume"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PanVol"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PanVol#dispose",
		"kind": "function",
		"memberof": "Tone.PanVol",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t *         to any range. It's useful for applying an envelope \n\t *         to a frequency or any other non-NormalRange signal \n\t *         parameter. \n\t *\n\t *  @extends {Tone.Envelope}\n\t *  @constructor\n\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t *  @param {Time} [decay]\tthe decay time in seconds\n\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t *  @param {Time} [release]\tthe release time in seconds\n\t *  @example\n\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t *  \t\"attack\" : 0.2,\n\t *  \t\"min\" : 200,\n\t *  \t\"max\" : 2000\n\t *  });\n\t *  scaledEnv.connect(oscillator.frequency);\n\t */",
		"meta": {
			"range": [
				813,
				1458
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 26,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009820",
				"name": "Tone.ScaledEnvelope",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.ScaledEnvelope~options",
				"this._exp": "Tone.ScaledEnvelope#_exp",
				"this.output": "Tone.ScaledEnvelope#output",
				"this._scale": "Tone.ScaledEnvelope#_scale"
			}
		},
		"kind": "class",
		"classdesc": "Tone.ScaledEnvelop is an envelope which can be scaled \n        to any range. It's useful for applying an envelope \n        to a frequency or any other non-NormalRange signal \n        parameter.",
		"augments": [
			"Tone.Envelope"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "the attack time in seconds",
				"name": "attack"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "the decay time in seconds",
				"name": "decay"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "a percentage (0-1) of the full amplitude",
				"name": "sustain"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "the release time in seconds",
				"name": "release"
			}
		],
		"examples": [
			"var scaledEnv = new Tone.ScaledEnvelope({\n \t\"attack\" : 0.2,\n \t\"min\" : 200,\n \t\"max\" : 2000\n });\n scaledEnv.connect(oscillator.frequency);"
		],
		"name": "ScaledEnvelope",
		"longname": "Tone.ScaledEnvelope",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1564,
				1642
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009924",
				"name": "Tone.ScaledEnvelope.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.ScaledEnvelope.defaults",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1599,
				1608
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009931",
				"name": "min",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "min",
		"longname": "Tone.ScaledEnvelope.defaults.min",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1612,
				1621
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009933",
				"name": "max",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "max",
		"longname": "Tone.ScaledEnvelope.defaults.max",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1625,
				1639
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100009935",
				"name": "exponent",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "exponent",
		"longname": "Tone.ScaledEnvelope.defaults.exponent",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The envelope's min output value. This is the value which it\n\t * starts at. \n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name min\n\t */",
		"meta": {
			"filename": "ScaledEnvelope.js",
			"lineno": 62,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The envelope's min output value. This is the value which it\nstarts at.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "min",
		"longname": "Tone.ScaledEnvelope#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The envelope's max output value. In other words, the value\n\t * at the peak of the attack portion of the envelope. \n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name max\n\t */",
		"meta": {
			"filename": "ScaledEnvelope.js",
			"lineno": 78,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The envelope's max output value. In other words, the value\nat the peak of the attack portion of the envelope.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "max",
		"longname": "Tone.ScaledEnvelope#max",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The envelope's exponent value. \n\t * @memberOf Tone.ScaledEnvelope#\n\t * @type {number}\n\t * @name exponent\n\t */",
		"meta": {
			"filename": "ScaledEnvelope.js",
			"lineno": 94,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The envelope's exponent value.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "exponent",
		"longname": "Tone.ScaledEnvelope#exponent",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.ScaledEnvelope} this\n\t */",
		"meta": {
			"range": [
				2713,
				2918
			],
			"filename": "ScaledEnvelope.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010037",
				"name": "Tone.ScaledEnvelope.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._scale": "Tone.ScaledEnvelope#_scale",
				"this._exp": "Tone.ScaledEnvelope#_exp"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.ScaledEnvelope"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.ScaledEnvelope#dispose",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"overrides": "Tone.Envelope#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Solo lets you isolate a specific audio stream. When\n\t *         an instance is set to `solo=true`, it will mute all other instances.\n\t *  @extends {Tone}\n\t *  @example\n\t * var soloA = new Tone.Solo()\n\t * var soloB = new Tone.Solo()\n\t * soloA.solo = true\n\t * //no audio will pass through soloB\n\t */",
		"meta": {
			"range": [
				385,
				979
			],
			"filename": "Solo.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010103",
				"name": "Tone.Solo",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Solo~options",
				"this.input": "Tone.Solo#input",
				"this.output": "Tone.Solo#output",
				"this._solo": "Tone.Solo#_solo",
				"this._soloBind": "Tone.Solo#_soloBind",
				"this.solo": "Tone.Solo#solo"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Solo lets you isolate a specific audio stream. When\n        an instance is set to `solo=true`, it will mute all other instances.",
		"augments": [
			"Tone"
		],
		"examples": [
			"var soloA = new Tone.Solo()\nvar soloB = new Tone.Solo()\nsoloA.solo = true\n//no audio will pass through soloB"
		],
		"name": "Solo",
		"longname": "Tone.Solo",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The input and output node\n\t\t *  @type  {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				564,
				606
			],
			"filename": "Solo.js",
			"lineno": 22,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010129",
				"name": "this.input",
				"type": "AssignmentExpression",
				"value": "this.output",
				"paramnames": []
			}
		},
		"description": "The input and output node",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "input",
		"longname": "Tone.Solo#input",
		"kind": "member",
		"memberof": "Tone.Solo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1071,
				1111
			],
			"filename": "Solo.js",
			"lineno": 51,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010187",
				"name": "Tone.Solo.defaults",
				"type": "ObjectExpression",
				"value": "{\"solo\":false}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.Solo.defaults",
		"kind": "member",
		"memberof": "Tone.Solo"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1096,
				1107
			],
			"filename": "Solo.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010194",
				"name": "solo",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "solo",
		"longname": "Tone.Solo.defaults.solo",
		"kind": "member",
		"memberof": "Tone.Solo.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Isolates this instance and mutes all other instances of Tone.Solo. \n\t *  Only one instance can be soloed at a time. A soloed\n\t *  instance will report `solo=false` when another instance is soloed.\n\t *  @memberOf Tone.Solo#\n\t *  @type {Boolean}\n\t *  @name solo\n\t */",
		"meta": {
			"filename": "Solo.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Isolates this instance and mutes all other instances of Tone.Solo. \n Only one instance can be soloed at a time. A soloed\n instance will report `solo=false` when another instance is soloed.",
		"memberof": "Tone.Solo",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "solo",
		"longname": "Tone.Solo#solo",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  If the current instance is muted, i.e. another instance is soloed\n\t *  @memberOf Tone.Solo#\n\t *  @type {Boolean}\n\t *  @name muted\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Solo.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "If the current instance is muted, i.e. another instance is soloed",
		"memberof": "Tone.Solo",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "muted",
		"readonly": true,
		"longname": "Tone.Solo#muted",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Solo}  this\n\t */",
		"meta": {
			"range": [
				2611,
				2776
			],
			"filename": "Solo.js",
			"lineno": 116,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010374",
				"name": "Tone.Solo.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._soloBind": "Tone.Solo#_soloBind"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Solo"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Solo#dispose",
		"kind": "function",
		"memberof": "Tone.Solo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t *\t\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @example\n\t * var split = new Tone.Split();\n\t * stereoSignal.connect(split);\n\t */",
		"meta": {
			"range": [
				293,
				997
			],
			"filename": "Split.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010431",
				"name": "Tone.Split",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._splitter": "Tone.Split#_splitter",
				"this.input": "Tone.Split#input",
				"this._splitter.channelCount": "Tone.Split#_splitter.channelCount",
				"this._splitter.channelCountMode": "Tone.Split#_splitter.channelCountMode",
				"this.left": "Tone.Split#left",
				"this.output[0]": "Tone.Split#output[0]",
				"this.right": "Tone.Split#right",
				"this.output[1]": "Tone.Split#output[1]"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Split splits an incoming signal into left and right channels.",
		"augments": [
			"Tone"
		],
		"examples": [
			"var split = new Tone.Split();\nstereoSignal.connect(split);"
		],
		"name": "Split",
		"longname": "Tone.Split",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/** \n\t\t *  Left channel output. \n\t\t *  Alias for <code>output[0]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				690,
				734
			],
			"filename": "Split.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010483",
				"name": "this.left",
				"type": "AssignmentExpression",
				"value": "this.output[0]",
				"paramnames": []
			}
		},
		"description": "Left channel output. \n Alias for <code>output[0]</code>",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "left",
		"longname": "Tone.Split#left",
		"kind": "member",
		"memberof": "Tone.Split",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Right channel output.\n\t\t *  Alias for <code>output[1]</code>\n\t\t *  @type {Tone.Gain}\n\t\t */",
		"meta": {
			"range": [
				842,
				887
			],
			"filename": "Split.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010498",
				"name": "this.right",
				"type": "AssignmentExpression",
				"value": "this.output[1]",
				"paramnames": []
			}
		},
		"description": "Right channel output.\n Alias for <code>output[1]</code>",
		"type": {
			"names": [
				"Tone.Gain"
			]
		},
		"name": "right",
		"longname": "Tone.Split#right",
		"kind": "member",
		"memberof": "Tone.Split",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Split} this\n\t */",
		"meta": {
			"range": [
				1086,
				1327
			],
			"filename": "Split.js",
			"lineno": 52,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010545",
				"name": "Tone.Split.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.left": "Tone.Split#left",
				"this.right": "Tone.Split#right",
				"this._splitter": "Tone.Split#_splitter"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Split"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Split#dispose",
		"kind": "function",
		"memberof": "Tone.Split",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t *\n\t *  @extends {Tone}\n\t *  @constructor\n\t *  @param {Decibels} [volume=0] the initial volume\n\t *  @example\n\t * var vol = new Tone.Volume(-12);\n\t * instrument.chain(vol, Tone.Master);\n\t */",
		"meta": {
			"range": [
				383,
				969
			],
			"filename": "Volume.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010625",
				"name": "Tone.Volume",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Volume~options",
				"this.output": "Tone.Volume#output",
				"this.input": "Tone.Volume#input",
				"this._unmutedVolume": "Tone.Volume#_unmutedVolume",
				"this.volume": "Tone.Volume#volume",
				"this.mute": "Tone.Volume#mute"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Volume is a simple volume node, useful for creating a volume fader.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "the initial volume",
				"name": "volume"
			}
		],
		"examples": [
			"var vol = new Tone.Volume(-12);\ninstrument.chain(vol, Tone.Master);"
		],
		"name": "Volume",
		"longname": "Tone.Volume",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The volume control in decibels. \n\t\t *  @type {Decibels}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				850,
				880
			],
			"filename": "Volume.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010680",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this.output.gain",
				"paramnames": []
			}
		},
		"description": "The volume control in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "volume",
		"longname": "Tone.Volume#volume",
		"kind": "member",
		"memberof": "Tone.Volume",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1071,
				1131
			],
			"filename": "Volume.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010712",
				"name": "Tone.Volume.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "Defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.Volume.defaults",
		"memberof": "Tone.Volume"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1098,
				1110
			],
			"filename": "Volume.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010719",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.Volume.defaults.volume",
		"kind": "member",
		"memberof": "Tone.Volume.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1114,
				1128
			],
			"filename": "Volume.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010721",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Volume.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Volume.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Volume#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * volume.mute = true;\n\t */",
		"meta": {
			"filename": "Volume.js",
			"lineno": 60,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Volume",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nvolume.mute = true;"
		],
		"longname": "Tone.Volume#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Volume} this\n\t */",
		"meta": {
			"range": [
				1730,
				1927
			],
			"filename": "Volume.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100010797",
				"name": "Tone.Volume.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.volume": "Tone.Volume#volume"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Volume"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Volume#dispose",
		"kind": "function",
		"memberof": "Tone.Volume",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t *         on the \"index\" property. Passing in an array or object literal\n\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t *         assumed to be numbers. \n\t *  @example\n\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t * interp.index = 0.75;\n\t * interp.value; //returns 1.5\n\t *\n\t *  @example\n\t * var interp = new Tone.CtrlInterpolate([\n\t * \t[2, 4, 5],\n\t * \t[9, 3, 2],\n\t * ]);\n\t * @param {Array} values The array of values to interpolate over\n\t * @param {Positive} index The initial interpolation index.\n\t * @extends {Tone}\n\t */",
		"meta": {
			"range": [
				805,
				1460
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010863",
				"name": "Tone.CtrlInterpolate",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.CtrlInterpolate~options",
				"this.values": "Tone.CtrlInterpolate#values",
				"this.index": "Tone.CtrlInterpolate#index"
			}
		},
		"kind": "class",
		"classdesc": "Tone.CtrlInterpolate will interpolate between given values based\n        on the \"index\" property. Passing in an array or object literal\n        will interpolate each of the parameters. Note (i.e. \"C3\")\n        and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n        assumed to be numbers.",
		"examples": [
			"var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\ninterp.index = 0.75;\ninterp.value; //returns 1.5\n\n ",
			"var interp = new Tone.CtrlInterpolate([\n\t[2, 4, 5],\n\t[9, 3, 2],\n]);"
		],
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The array of values to interpolate over",
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"description": "The initial interpolation index.",
				"name": "index"
			}
		],
		"augments": [
			"Tone"
		],
		"name": "CtrlInterpolate",
		"longname": "Tone.CtrlInterpolate",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The values to interpolate between\n\t\t *  @type  {Array}\n\t\t */",
		"meta": {
			"range": [
				1021,
				1049
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010890",
				"name": "this.values",
				"type": "MemberExpression",
				"value": "options.values",
				"paramnames": []
			}
		},
		"description": "The values to interpolate between",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "values",
		"longname": "Tone.CtrlInterpolate#values",
		"kind": "member",
		"memberof": "Tone.CtrlInterpolate",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t *  would interpolate equally between the value at index 1\n\t\t *  and the value at index 2. \n\t\t *  @example\n\t\t * interp.index = 0; \n\t\t * interp.value; //returns the value at 0\n\t\t * interp.index = 0.5;\n\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t *  @type  {Positive}\n\t\t */",
		"meta": {
			"range": [
				1430,
				1456
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010898",
				"name": "this.index",
				"type": "MemberExpression",
				"value": "options.index",
				"paramnames": []
			}
		},
		"description": "The interpolated index between values. For example: a value of 1.5\n would interpolate equally between the value at index 1\n and the value at index 2.",
		"examples": [
			"interp.index = 0; \ninterp.value; //returns the value at 0\ninterp.index = 0.5;\ninterp.value; //returns the value between indices 0 and 1. \n "
		],
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "index",
		"longname": "Tone.CtrlInterpolate#index",
		"kind": "member",
		"memberof": "Tone.CtrlInterpolate",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1562,
				1629
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 57,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010914",
				"name": "Tone.CtrlInterpolate.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.CtrlInterpolate.defaults",
		"memberof": "Tone.CtrlInterpolate",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1598,
				1609
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010921",
				"name": "index",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "index",
		"longname": "Tone.CtrlInterpolate.defaults.index",
		"kind": "member",
		"memberof": "Tone.CtrlInterpolate.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1613,
				1626
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100010923",
				"name": "values",
				"type": "ArrayExpression",
				"value": "[]"
			}
		},
		"undocumented": true,
		"name": "values",
		"longname": "Tone.CtrlInterpolate.defaults.values",
		"kind": "member",
		"memberof": "Tone.CtrlInterpolate.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The current interpolated value based on the index\n\t *  @readOnly\n\t *  @memberOf Tone.CtrlInterpolate#\n\t *  @type {*}\n\t *  @name value\n\t */",
		"meta": {
			"filename": "CtrlInterpolate.js",
			"lineno": 62,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {}
		},
		"description": "The current interpolated value based on the index",
		"readonly": true,
		"memberof": "Tone.CtrlInterpolate",
		"type": {
			"names": [
				"*"
			]
		},
		"name": "value",
		"longname": "Tone.CtrlInterpolate#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.CtrlInterpolate}  this\n\t */",
		"meta": {
			"range": [
				3341,
				3418
			],
			"filename": "CtrlInterpolate.js",
			"lineno": 127,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011146",
				"name": "Tone.CtrlInterpolate.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.values": "Tone.CtrlInterpolate#values"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.CtrlInterpolate"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.CtrlInterpolate#dispose",
		"kind": "function",
		"memberof": "Tone.CtrlInterpolate",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t *         state choice is an array, the next state is chosen randomly with\n\t *         even probability for all of the choices. For a weighted probability\n\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t *         The probabilities will be normalized and then chosen. If no next options\n\t *         are given for the current state, the state will stay there. \n\t *  @extends {Tone}\n\t *  @example\n\t * var chain = new Tone.CtrlMarkov({\n\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t * \t\"middle\" : \"end\"\n\t * });\n\t * chain.value = \"beginning\";\n\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t *\n\t *  @example\n\t * var chain = new Tone.CtrlMarkov({\n\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t * \t\"middle\" : \"end\"\n\t * });\n\t * chain.value = \"beginning\";\n\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t *  @param {Object} values An object with the state names as the keys\n\t *                         and the next state(s) as the values. \n\t */",
		"meta": {
			"range": [
				1314,
				1796
			],
			"filename": "CtrlMarkov.js",
			"lineno": 33,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011179",
				"name": "Tone.CtrlMarkov",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"initial"
				]
			},
			"vars": {
				"this.values": "Tone.CtrlMarkov#values",
				"this.value": "Tone.CtrlMarkov#value"
			}
		},
		"kind": "class",
		"classdesc": "Tone.CtrlMarkov represents a Markov Chain where each call\n        to Tone.CtrlMarkov.next will move to the next state. If the next\n        state choice is an array, the next state is chosen randomly with\n        even probability for all of the choices. For a weighted probability\n        of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n        The probabilities will be normalized and then chosen. If no next options\n        are given for the current state, the state will stay there.",
		"augments": [
			"Tone"
		],
		"examples": [
			"var chain = new Tone.CtrlMarkov({\n\t\"beginning\" : [\"end\", \"middle\"],\n\t\"middle\" : \"end\"\n});\nchain.value = \"beginning\";\nchain.next(); //returns \"end\" or \"middle\" with 50% probability\n\n ",
			"var chain = new Tone.CtrlMarkov({\n\t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\"middle\" : \"end\"\n});\nchain.value = \"beginning\";\nchain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n "
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "An object with the state names as the keys\n                        and the next state(s) as the values.",
				"name": "values"
			}
		],
		"name": "CtrlMarkov",
		"longname": "Tone.CtrlMarkov",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The Markov values with states as the keys\n\t\t *  and next state(s) as the values. \n\t\t *  @type {Object}\n\t\t */",
		"meta": {
			"range": [
				1503,
				1544
			],
			"filename": "CtrlMarkov.js",
			"lineno": 42,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011194",
				"name": "this.values",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The Markov values with states as the keys\n and next state(s) as the values.",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "values",
		"longname": "Tone.CtrlMarkov#values",
		"kind": "member",
		"memberof": "Tone.CtrlMarkov",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The current state of the Markov values. The next\n\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t *  is invoked.\n\t\t *  @type {String}\n\t\t */",
		"meta": {
			"range": [
				1726,
				1792
			],
			"filename": "CtrlMarkov.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011205",
				"name": "this.value",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The current state of the Markov values. The next\n state will be evaluated and returned when Tone.CtrlMarkov.next\n is invoked.",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "value",
		"longname": "Tone.CtrlMarkov#value",
		"kind": "member",
		"memberof": "Tone.CtrlMarkov",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns the next state of the Markov values. \n\t *  @return  {String}\n\t */",
		"meta": {
			"range": [
				1916,
				2559
			],
			"filename": "CtrlMarkov.js",
			"lineno": 59,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011232",
				"name": "Tone.CtrlMarkov.prototype.next",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"next": "Tone.CtrlMarkov#next~next",
				"distribution": "Tone.CtrlMarkov#next~distribution",
				"rand": "Tone.CtrlMarkov#next~rand",
				"total": "Tone.CtrlMarkov#next~total",
				"i": "Tone.CtrlMarkov#next~i",
				"dist": "Tone.CtrlMarkov#next~dist",
				"chosen": "Tone.CtrlMarkov#next~chosen",
				"this.value": "Tone.CtrlMarkov#value"
			}
		},
		"description": "Returns the next state of the Markov values.",
		"returns": [
			{
				"type": {
					"names": [
						"String"
					]
				}
			}
		],
		"name": "next",
		"longname": "Tone.CtrlMarkov#next",
		"kind": "function",
		"memberof": "Tone.CtrlMarkov",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.CtrlMarkov}  this\n\t */",
		"meta": {
			"range": [
				3461,
				3533
			],
			"filename": "CtrlMarkov.js",
			"lineno": 119,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011470",
				"name": "Tone.CtrlMarkov.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.values": "Tone.CtrlMarkov#values"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.CtrlMarkov"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.CtrlMarkov#dispose",
		"kind": "function",
		"memberof": "Tone.CtrlMarkov",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Generate patterns from an array of values.\n\t *         Has a number of arpeggiation and randomized\n\t *         selection patterns. \n\t *           <ul>\n\t *  \t        <li>\"up\" - cycles upward</li>\n\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t *     \t\t</ul>\n\t *  @param  {Array}  values   An array of options to choose from.\n\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t *  @extends {Tone}\n\t */",
		"meta": {
			"range": [
				962,
				1678
			],
			"filename": "CtrlPattern.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011503",
				"name": "Tone.CtrlPattern",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.CtrlPattern~options",
				"this.values": "Tone.CtrlPattern#values",
				"this.index": "Tone.CtrlPattern#index",
				"this._type": "Tone.CtrlPattern#_type",
				"this._shuffled": "Tone.CtrlPattern#_shuffled",
				"this._direction": "Tone.CtrlPattern#_direction",
				"this.type": "Tone.CtrlPattern#type"
			}
		},
		"kind": "class",
		"classdesc": "Generate patterns from an array of values.\n        Has a number of arpeggiation and randomized\n        selection patterns. \n          <ul>\n \t        <li>\"up\" - cycles upward</li>\n \t\t\t<li>\"down\" - cycles downward</li>\n \t\t\t<li>\"upDown\" - up then and down</li>\n \t\t\t<li>\"downUp\" - cycles down then and up</li>\n \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n \t\t\t<li>\"random\" - randomly select an index</li>\n \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n    \t\t</ul>",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "An array of options to choose from.",
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Tone.CtrlPattern.Type"
					]
				},
				"optional": true,
				"description": "The name of the pattern.",
				"name": "type"
			}
		],
		"augments": [
			"Tone"
		],
		"name": "CtrlPattern",
		"longname": "Tone.CtrlPattern",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The array of values to arpeggiate over\n\t\t *  @type {Array}\n\t\t */",
		"meta": {
			"range": [
				1173,
				1201
			],
			"filename": "CtrlPattern.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011530",
				"name": "this.values",
				"type": "MemberExpression",
				"value": "options.values",
				"paramnames": []
			}
		},
		"description": "The array of values to arpeggiate over",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "values",
		"longname": "Tone.CtrlPattern#values",
		"kind": "member",
		"memberof": "Tone.CtrlPattern",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The current position in the values array\n\t\t *  @type  {Number}\n\t\t */",
		"meta": {
			"range": [
				1289,
				1303
			],
			"filename": "CtrlPattern.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011538",
				"name": "this.index",
				"type": "Literal",
				"value": 0,
				"paramnames": []
			}
		},
		"description": "The current position in the values array",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "index",
		"longname": "Tone.CtrlPattern#index",
		"kind": "member",
		"memberof": "Tone.CtrlPattern",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The Control Patterns\n\t *  @type  {Object}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				1785,
				2030
			],
			"filename": "CtrlPattern.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011578",
				"name": "Tone.CtrlPattern.Type",
				"type": "ObjectExpression",
				"value": "{\"Up\":\"up\",\"Down\":\"down\",\"UpDown\":\"upDown\",\"DownUp\":\"downUp\",\"AlternateUp\":\"alternateUp\",\"AlternateDown\":\"alternateDown\",\"Random\":\"random\",\"RandomWalk\":\"randomWalk\",\"RandomOnce\":\"randomOnce\"}",
				"paramnames": []
			}
		},
		"description": "The Control Patterns",
		"type": {
			"names": [
				"Object"
			]
		},
		"scope": "static",
		"name": "Type",
		"longname": "Tone.CtrlPattern.Type",
		"kind": "member",
		"memberof": "Tone.CtrlPattern"
	},
	{
		"comment": "/**\n\t *  The default values. \n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				2091,
				2176
			],
			"filename": "CtrlPattern.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011604",
				"name": "Tone.CtrlPattern.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The default values.",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.CtrlPattern.defaults",
		"kind": "member",
		"memberof": "Tone.CtrlPattern",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2123,
				2156
			],
			"filename": "CtrlPattern.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011611",
				"name": "type",
				"type": "MemberExpression",
				"value": "Tone.CtrlPattern.Type.Up"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.CtrlPattern.defaults.type",
		"kind": "member",
		"memberof": "Tone.CtrlPattern.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2160,
				2173
			],
			"filename": "CtrlPattern.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011619",
				"name": "values",
				"type": "ArrayExpression",
				"value": "[]"
			}
		},
		"undocumented": true,
		"name": "values",
		"longname": "Tone.CtrlPattern.defaults.values",
		"kind": "member",
		"memberof": "Tone.CtrlPattern.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The value at the current index of the pattern.\n\t *  @readOnly\n\t *  @memberOf Tone.CtrlPattern#\n\t *  @type {*}\n\t *  @name value\n\t */",
		"meta": {
			"filename": "CtrlPattern.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {}
		},
		"description": "The value at the current index of the pattern.",
		"readonly": true,
		"memberof": "Tone.CtrlPattern",
		"type": {
			"names": [
				"*"
			]
		},
		"name": "value",
		"longname": "Tone.CtrlPattern#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The pattern used to select the next\n\t *  item from the values array\n\t *  @memberOf Tone.CtrlPattern#\n\t *  @type {Tone.CtrlPattern.Type}\n\t *  @name type\n\t */",
		"meta": {
			"filename": "CtrlPattern.js",
			"lineno": 121,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {}
		},
		"description": "The pattern used to select the next\n item from the values array",
		"memberof": "Tone.CtrlPattern",
		"type": {
			"names": [
				"Tone.CtrlPattern.Type"
			]
		},
		"name": "type",
		"longname": "Tone.CtrlPattern#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Return the next value given the current position\n\t *  and pattern.\n\t *  @return {*} The next value\n\t */",
		"meta": {
			"range": [
				4393,
				6572
			],
			"filename": "CtrlPattern.js",
			"lineno": 171,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100011999",
				"name": "Tone.CtrlPattern.prototype.next",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"type": "Tone.CtrlPattern#next~type",
				"this.index": "Tone.CtrlPattern#index",
				"this._direction": "Tone.CtrlPattern#_direction"
			}
		},
		"description": "Return the next value given the current position\n and pattern.",
		"returns": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The next value"
			}
		],
		"name": "next",
		"longname": "Tone.CtrlPattern#next",
		"kind": "function",
		"memberof": "Tone.CtrlPattern",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.CtrlPattern} this\n\t */",
		"meta": {
			"range": [
				7039,
				7137
			],
			"filename": "CtrlPattern.js",
			"lineno": 265,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012584",
				"name": "Tone.CtrlPattern.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._shuffled": "Tone.CtrlPattern#_shuffled",
				"this.values": "Tone.CtrlPattern#values"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.CtrlPattern"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.CtrlPattern#dispose",
		"kind": "function",
		"memberof": "Tone.CtrlPattern",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Choose a random value.\n\t *  @extends {Tone}\n\t *  @example\n\t * var randomWalk = new Tone.CtrlRandom({\n\t * \t\"min\" : 0,\n\t * \t\"max\" : 10,\n\t * \t\"integer\" : true\n\t * });\n\t * randomWalk.eval();\n\t *\n\t *  @param {Number|Time=} min The minimum return value.\n\t *  @param {Number|Time=} max The maximum return value.\n\t */",
		"meta": {
			"range": [
				409,
				847
			],
			"filename": "CtrlRandom.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012624",
				"name": "Tone.CtrlRandom",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.CtrlRandom~options",
				"this.min": "Tone.CtrlRandom#min",
				"this.max": "Tone.CtrlRandom#max",
				"this.integer": "Tone.CtrlRandom#integer"
			}
		},
		"kind": "class",
		"classdesc": "Choose a random value.",
		"augments": [
			"Tone"
		],
		"examples": [
			"var randomWalk = new Tone.CtrlRandom({\n\t\"min\" : 0,\n\t\"max\" : 10,\n\t\"integer\" : true\n});\nrandomWalk.eval();\n\n "
		],
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"Time"
					]
				},
				"description": "The minimum return value.",
				"name": "min"
			},
			{
				"type": {
					"names": [
						"Number",
						"Time"
					]
				},
				"description": "The maximum return value.",
				"name": "max"
			}
		],
		"name": "CtrlRandom",
		"longname": "Tone.CtrlRandom",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The minimum return value\n\t\t *  @type  {Number|Time}\n\t\t */",
		"meta": {
			"range": [
				607,
				629
			],
			"filename": "CtrlRandom.js",
			"lineno": 28,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012651",
				"name": "this.min",
				"type": "MemberExpression",
				"value": "options.min",
				"paramnames": []
			}
		},
		"description": "The minimum return value",
		"type": {
			"names": [
				"Number",
				"Time"
			]
		},
		"name": "min",
		"longname": "Tone.CtrlRandom#min",
		"kind": "member",
		"memberof": "Tone.CtrlRandom",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The maximum return value\n\t\t *  @type  {Number|Time}\n\t\t */",
		"meta": {
			"range": [
				704,
				726
			],
			"filename": "CtrlRandom.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012659",
				"name": "this.max",
				"type": "MemberExpression",
				"value": "options.max",
				"paramnames": []
			}
		},
		"description": "The maximum return value",
		"type": {
			"names": [
				"Number",
				"Time"
			]
		},
		"name": "max",
		"longname": "Tone.CtrlRandom#max",
		"kind": "member",
		"memberof": "Tone.CtrlRandom",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  If the return value should be an integer\n\t\t *  @type  {Boolean}\n\t\t */",
		"meta": {
			"range": [
				813,
				843
			],
			"filename": "CtrlRandom.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012667",
				"name": "this.integer",
				"type": "MemberExpression",
				"value": "options.integer",
				"paramnames": []
			}
		},
		"description": "If the return value should be an integer",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "integer",
		"longname": "Tone.CtrlRandom#integer",
		"kind": "member",
		"memberof": "Tone.CtrlRandom",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				944,
				1021
			],
			"filename": "CtrlRandom.js",
			"lineno": 50,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012683",
				"name": "Tone.CtrlRandom.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.CtrlRandom.defaults",
		"memberof": "Tone.CtrlRandom",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				975,
				984
			],
			"filename": "CtrlRandom.js",
			"lineno": 51,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012690",
				"name": "min",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "min",
		"longname": "Tone.CtrlRandom.defaults.min",
		"kind": "member",
		"memberof": "Tone.CtrlRandom.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				988,
				997
			],
			"filename": "CtrlRandom.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012692",
				"name": "max",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "max",
		"longname": "Tone.CtrlRandom.defaults.max",
		"kind": "member",
		"memberof": "Tone.CtrlRandom.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1001,
				1018
			],
			"filename": "CtrlRandom.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {
				"id": "astnode100012694",
				"name": "integer",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "integer",
		"longname": "Tone.CtrlRandom.defaults.integer",
		"kind": "member",
		"memberof": "Tone.CtrlRandom.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Return a random value between min and max. \n\t *  @readOnly\n\t *  @memberOf Tone.CtrlRandom#\n\t *  @type {*}\n\t *  @name value\n\t */",
		"meta": {
			"filename": "CtrlRandom.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/control",
			"code": {}
		},
		"description": "Return a random value between min and max.",
		"readonly": true,
		"memberof": "Tone.CtrlRandom",
		"type": {
			"names": [
				"*"
			]
		},
		"name": "value",
		"longname": "Tone.CtrlRandom#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t *          classes that make requests for audio files such as Tone.Player,\n\t *          Tone.Sampler and Tone.Convolver.\n\t *          \n\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t *  \t\tprovides events which keep track of the loading progress \n\t *  \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t *\n\t *  @constructor \n\t *  @extends {Tone}\n\t *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set. \n\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead \n\t *                            since it will give you a callback when _all_ buffers are loaded.\n\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t *  @example\n\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t * \t//the buffer is now available.\n\t * \tvar buff = buffer.get();\n\t * });\n\t *  @example\n\t * //can load provide fallback extension types if the first type is not supported.\n\t * var buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");\n\t */",
		"meta": {
			"range": [
				1949,
				2731
			],
			"filename": "Buffer.js",
			"lineno": 51,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100012894",
				"name": "Tone.Buffer",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Buffer~options",
				"this._buffer": "Tone.Buffer#_buffer",
				"this._reversed": "Tone.Buffer#_reversed",
				"this._xhr": "Tone.Buffer#_xhr"
			}
		},
		"kind": "class",
		"classdesc": "Buffer loading and storage. Tone.Buffer is used internally by all \n         classes that make requests for audio files such as Tone.Player,\n         Tone.Sampler and Tone.Convolver.\n         \n         Aside from load callbacks from individual buffers, Tone.Buffer \n \t\tprovides events which keep track of the loading progress \n \t\tof _all_ of the buffers. These are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioBuffer",
						"String"
					]
				},
				"description": "The url to load, or the audio buffer to set.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "A callback which is invoked after the buffer is loaded. \n                           It's recommended to use `Tone.Buffer.on('load', callback)` instead \n                           since it will give you a callback when _all_ buffers are loaded.",
				"name": "onload"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke if there is an error",
				"name": "onerror"
			}
		],
		"examples": [
			"var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t//the buffer is now available.\n\tvar buff = buffer.get();\n});\n ",
			"//can load provide fallback extension types if the first type is not supported.\nvar buffer = new Tone.Buffer(\"path/to/sound.[mp3|ogg|wav]\");"
		],
		"name": "Buffer",
		"longname": "Tone.Buffer",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2821,
				2889
			],
			"filename": "Buffer.js",
			"lineno": 94,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013007",
				"name": "Tone.Buffer.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Buffer.defaults",
		"kind": "member",
		"memberof": "Tone.Buffer",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2848,
				2865
			],
			"filename": "Buffer.js",
			"lineno": 95,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013014",
				"name": "url",
				"type": "Identifier",
				"value": "undefined"
			}
		},
		"undocumented": true,
		"name": "url",
		"longname": "Tone.Buffer.defaults.url",
		"kind": "member",
		"memberof": "Tone.Buffer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2869,
				2886
			],
			"filename": "Buffer.js",
			"lineno": 96,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013016",
				"name": "reverse",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "reverse",
		"longname": "Tone.Buffer.defaults.reverse",
		"kind": "member",
		"memberof": "Tone.Buffer.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t *  of this buffer.\n\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t *  @returns {Tone.Buffer} this\n\t */",
		"meta": {
			"range": [
				3073,
				3247
			],
			"filename": "Buffer.js",
			"lineno": 105,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013019",
				"name": "Tone.Buffer.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"buffer"
				]
			},
			"vars": {
				"this._buffer": "Tone.Buffer#_buffer"
			}
		},
		"description": "Pass in an AudioBuffer or Tone.Buffer to set the value\n of this buffer.",
		"params": [
			{
				"type": {
					"names": [
						"AudioBuffer",
						"Tone.Buffer"
					]
				},
				"description": "the buffer",
				"name": "buffer"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.Buffer#set",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t */",
		"meta": {
			"range": [
				3327,
				3392
			],
			"filename": "Buffer.js",
			"lineno": 117,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013056",
				"name": "Tone.Buffer.prototype.get",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"returns": [
			{
				"type": {
					"names": [
						"AudioBuffer"
					]
				},
				"description": "The audio buffer stored in the object."
			}
		],
		"name": "get",
		"longname": "Tone.Buffer#get",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Makes an xhr reqest for the selected url then decodes\n\t *  the file as an audio buffer. Invokes\n\t *  the callback once the audio buffer loads.\n\t *  @param {String} url The url of the buffer to load.\n\t *                      filetype support depends on the\n\t *                      browser.\n\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t */",
		"meta": {
			"range": [
				3779,
				4267
			],
			"filename": "Buffer.js",
			"lineno": 130,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013071",
				"name": "Tone.Buffer.prototype.load",
				"type": "FunctionExpression",
				"paramnames": [
					"url",
					"onload",
					"onerror"
				]
			},
			"vars": {
				"promise": "Tone.Buffer#load~promise",
				"": null
			}
		},
		"description": "Makes an xhr reqest for the selected url then decodes\n the file as an audio buffer. Invokes\n the callback once the audio buffer loads.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The url of the buffer to load.\n                     filetype support depends on the\n                     browser.",
				"name": "url"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				},
				"description": "returns a Promise which resolves with the Tone.Buffer"
			}
		],
		"name": "load",
		"longname": "Tone.Buffer#load",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Buffer} this\n\t */",
		"meta": {
			"range": [
				4342,
				4580
			],
			"filename": "Buffer.js",
			"lineno": 164,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013166",
				"name": "Tone.Buffer.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._buffer": "Tone.Buffer#_buffer",
				"this._xhr": "Tone.Buffer#_xhr"
			}
		},
		"description": "dispose and disconnect",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Buffer#dispose",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If the buffer is loaded or not\n\t * @memberOf Tone.Buffer#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Buffer.js",
			"lineno": 175,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "If the buffer is loaded or not",
		"memberof": "Tone.Buffer",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loaded",
		"readonly": true,
		"longname": "Tone.Buffer#loaded",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The duration of the buffer. \n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name duration\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Buffer.js",
			"lineno": 188,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The duration of the buffer.",
		"memberof": "Tone.Buffer",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "duration",
		"readonly": true,
		"longname": "Tone.Buffer#duration",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The length of the buffer in samples\n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name length\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Buffer.js",
			"lineno": 205,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The length of the buffer in samples",
		"memberof": "Tone.Buffer",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "length",
		"readonly": true,
		"longname": "Tone.Buffer#length",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The number of discrete audio channels. Returns 0 if no buffer\n\t * is loaded.\n\t * @memberOf Tone.Buffer#\n\t * @type {Number}\n\t * @name numberOfChannels\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Buffer.js",
			"lineno": 222,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of discrete audio channels. Returns 0 if no buffer\nis loaded.",
		"memberof": "Tone.Buffer",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "numberOfChannels",
		"readonly": true,
		"longname": "Tone.Buffer#numberOfChannels",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Set the audio buffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array. \n\t *  @param {Float32Array} array The array to fill the audio buffer\n\t *  @return {Tone.Buffer} this\n\t */",
		"meta": {
			"range": [
				6026,
				6520
			],
			"filename": "Buffer.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013331",
				"name": "Tone.Buffer.prototype.fromArray",
				"type": "FunctionExpression",
				"paramnames": [
					"array"
				]
			},
			"vars": {
				"isMultidimensional": "Tone.Buffer#fromArray~isMultidimensional",
				"channels": "Tone.Buffer#fromArray~channels",
				"len": "Tone.Buffer#fromArray~len",
				"buffer": "Tone.Buffer#fromArray~buffer",
				"array": "Tone.Buffer#fromArray~array",
				"c": "Tone.Buffer#fromArray~c",
				"this._buffer": "Tone.Buffer#_buffer"
			}
		},
		"description": "Set the audio buffer from the array. To create a multichannel AudioBuffer,\n pass in a multidimensional array.",
		"params": [
			{
				"type": {
					"names": [
						"Float32Array"
					]
				},
				"description": "The array to fill the audio buffer",
				"name": "array"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				},
				"description": "this"
			}
		],
		"name": "fromArray",
		"longname": "Tone.Buffer#fromArray",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * \tSums muliple channels into 1 channel\n\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t *  @return {Array}\n\t */",
		"meta": {
			"range": [
				6681,
				7301
			],
			"filename": "Buffer.js",
			"lineno": 266,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013432",
				"name": "Tone.Buffer.prototype.toMono",
				"type": "FunctionExpression",
				"paramnames": [
					"chanNum"
				]
			},
			"vars": {
				"outputArray": "Tone.Buffer#toMono~outputArray",
				"numChannels": "Tone.Buffer#toMono~numChannels",
				"channel": "Tone.Buffer#toMono~channel",
				"channelArray": "Tone.Buffer#toMono~channelArray",
				"i": "Tone.Buffer#toMono~i",
				"outputArray[undefined]": "Tone.Buffer#toMono~outputArray.undefined]",
				"": null
			}
		},
		"description": "Sums muliple channels into 1 channel",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "Optionally only copy a single channel from the array.",
				"name": "channel"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Array"
					]
				}
			}
		],
		"name": "toMono",
		"longname": "Tone.Buffer#toMono",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t *  @return {Array}\n\t */",
		"meta": {
			"range": [
				7586,
				7921
			],
			"filename": "Buffer.js",
			"lineno": 293,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013538",
				"name": "Tone.Buffer.prototype.toArray",
				"type": "FunctionExpression",
				"paramnames": [
					"channel"
				]
			},
			"vars": {
				"ret": "Tone.Buffer#toArray~ret",
				"c": "Tone.Buffer#toArray~c",
				"ret[undefined]": "Tone.Buffer#toArray~ret.undefined]"
			}
		},
		"description": "Get the buffer as an array. Single channel buffers will return a 1-dimensional \n\tFloat32Array, and multichannel buffers will return multidimensional arrays.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "Optionally only copy a single channel from the array.",
				"name": "channel"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Array"
					]
				}
			}
		],
		"name": "toArray",
		"longname": "Tone.Buffer#toArray",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t *  @param  {Number}  channel  The channel number to return\n\t *  @return  {Float32Array}  The audio as a TypedArray\n\t */",
		"meta": {
			"range": [
				8140,
				8247
			],
			"filename": "Buffer.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013606",
				"name": "Tone.Buffer.prototype.getChannelData",
				"type": "FunctionExpression",
				"paramnames": [
					"channel"
				]
			}
		},
		"description": "Returns the Float32Array representing the PCM audio data for the specific channel.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The channel number to return",
				"name": "channel"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Float32Array"
					]
				},
				"description": "The audio as a TypedArray"
			}
		],
		"name": "getChannelData",
		"longname": "Tone.Buffer#getChannelData",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cut a subsection of the array and return a buffer of the\n\t *  subsection. Does not modify the original buffer\n\t *  @param {Time} start The time to start the slice\n\t *  @param {Time=} end The end time to slice. If none is given\n\t *                     will default to the end of the buffer\n\t *  @return {Tone.Buffer} this\n\t */",
		"meta": {
			"range": [
				8587,
				9074
			],
			"filename": "Buffer.js",
			"lineno": 324,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013626",
				"name": "Tone.Buffer.prototype.slice",
				"type": "FunctionExpression",
				"paramnames": [
					"start",
					"end"
				]
			},
			"vars": {
				"end": "Tone.Buffer#slice~end",
				"startSamples": "Tone.Buffer#slice~startSamples",
				"endSamples": "Tone.Buffer#slice~endSamples",
				"replacement": "Tone.Buffer#slice~replacement",
				"i": "Tone.Buffer#slice~i",
				"replacement[undefined]": "Tone.Buffer#slice~replacement.undefined]",
				"retBuffer": "Tone.Buffer#slice~retBuffer"
			}
		},
		"description": "Cut a subsection of the array and return a buffer of the\n subsection. Does not modify the original buffer",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to start the slice",
				"name": "start"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The end time to slice. If none is given\n                    will default to the end of the buffer",
				"name": "end"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				},
				"description": "this"
			}
		],
		"name": "slice",
		"longname": "Tone.Buffer#slice",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Reverse the buffer.\n\t * @memberOf Tone.Buffer#\n\t * @type {Boolean}\n\t * @name reverse\n\t */",
		"meta": {
			"filename": "Buffer.js",
			"lineno": 350,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Reverse the buffer.",
		"memberof": "Tone.Buffer",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "reverse",
		"longname": "Tone.Buffer#reverse",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  A path which is prefixed before every url.\n\t *  @type  {String}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				10161,
				10185
			],
			"filename": "Buffer.js",
			"lineno": 387,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013835",
				"name": "Tone.Buffer.baseUrl",
				"type": "Literal",
				"value": "",
				"paramnames": []
			}
		},
		"description": "A path which is prefixed before every url.",
		"type": {
			"names": [
				"String"
			]
		},
		"scope": "static",
		"name": "baseUrl",
		"longname": "Tone.Buffer.baseUrl",
		"kind": "member",
		"memberof": "Tone.Buffer"
	},
	{
		"comment": "/**\n\t *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n\t *  pass in a multidimensional array. \n\t *  @param {Float32Array} array The array to fill the audio buffer\n\t *  @return {Tone.Buffer} A Tone.Buffer created from the array\n\t */",
		"meta": {
			"range": [
				10451,
				10541
			],
			"filename": "Buffer.js",
			"lineno": 395,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013843",
				"name": "Tone.Buffer.fromArray",
				"type": "FunctionExpression",
				"paramnames": [
					"array"
				]
			}
		},
		"description": "Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,\n pass in a multidimensional array.",
		"params": [
			{
				"type": {
					"names": [
						"Float32Array"
					]
				},
				"description": "The array to fill the audio buffer",
				"name": "array"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				},
				"description": "A Tone.Buffer created from the array"
			}
		],
		"name": "fromArray",
		"longname": "Tone.Buffer.fromArray",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Loads a url using XMLHttpRequest.\n\t *  @param {String} url\n\t *  @param {Function} onload\n\t *  @param {Function} onerror\n\t *  @param {Function} onprogress\n\t *  @return {XMLHttpRequest}\n\t */",
		"meta": {
			"range": [
				11013,
				13150
			],
			"filename": "Buffer.js",
			"lineno": 418,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100013901",
				"name": "Tone.Buffer.load",
				"type": "FunctionExpression",
				"paramnames": [
					"url",
					"onload",
					"onerror"
				]
			},
			"vars": {
				"onload": "Tone.Buffer.load~onload",
				"matches": "Tone.Buffer.load~matches",
				"extensions": "Tone.Buffer.load~extensions",
				"extension": "Tone.Buffer.load~extension",
				"i": "Tone.Buffer.load~i",
				"url": "Tone.Buffer.load~url",
				"onError": "Tone.Buffer.load~onError",
				"onProgress": "Tone.Buffer.load~onProgress",
				"request": "Tone.Buffer.load~request",
				"request.responseType": "Tone.Buffer.load~request.responseType",
				"request.progress": "Tone.Buffer.load~request.progress",
				"": null
			}
		},
		"description": "Loads a url using XMLHttpRequest.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"name": "onload"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"name": "onerror"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"name": "onprogress"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"XMLHttpRequest"
					]
				}
			}
		],
		"name": "load",
		"longname": "Tone.Buffer.load",
		"kind": "function",
		"memberof": "Tone.Buffer",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Stop all of the downloads in progress\n\t *  @return {Tone.Buffer}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				13247,
				13453
			],
			"filename": "Buffer.js",
			"lineno": 505,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014254",
				"name": "Tone.Buffer.cancelDownloads",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null
			}
		},
		"description": "Stop all of the downloads in progress",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				}
			}
		],
		"scope": "static",
		"name": "cancelDownloads",
		"longname": "Tone.Buffer.cancelDownloads",
		"kind": "function",
		"memberof": "Tone.Buffer"
	},
	{
		"comment": "/**\n\t *  Checks a url's extension to see if the current browser can play that file type.\n\t *  @param {String} url The url/extension to test\n\t *  @return {Boolean} If the file extension can be played\n\t *  @static\n\t *  @example\n\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t */",
		"meta": {
			"range": [
				13806,
				14039
			],
			"filename": "Buffer.js",
			"lineno": 522,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014295",
				"name": "Tone.Buffer.supportsType",
				"type": "FunctionExpression",
				"paramnames": [
					"url"
				]
			},
			"vars": {
				"extension": "Tone.Buffer.supportsType~extension",
				"response": "Tone.Buffer.supportsType~response"
			}
		},
		"description": "Checks a url's extension to see if the current browser can play that file type.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The url/extension to test",
				"name": "url"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Boolean"
					]
				},
				"description": "If the file extension can be played"
			}
		],
		"scope": "static",
		"examples": [
			"Tone.Buffer.supportsType(\"wav\"); //returns true\nTone.Buffer.supportsType(\"path/to/file.wav\"); //returns true"
		],
		"name": "supportsType",
		"longname": "Tone.Buffer.supportsType",
		"kind": "function",
		"memberof": "Tone.Buffer"
	},
	{
		"comment": "/**\n\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t *  @return {Promise}\n\t */",
		"meta": {
			"range": [
				14150,
				14674
			],
			"filename": "Buffer.js",
			"lineno": 533,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014341",
				"name": "Tone.loaded",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"onload": "Tone.loaded~onload",
				"onerror": "Tone.loaded~onerror",
				"removeEvents": "Tone.loaded~removeEvents",
				"": null
			}
		},
		"description": "Returns a Promise which resolves when all of the buffers have loaded",
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				}
			}
		],
		"name": "loaded",
		"longname": "Tone.loaded",
		"kind": "function",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @class A data structure for holding multiple buffers.\n\t *  \n\t *  @param  {Object|Array}    urls      An object literal or array\n\t *                                      of urls to load.\n\t *  @param  {Function=}  callback  The callback to invoke when\n\t *                                 the buffers are loaded. \n\t *  @extends {Tone}\n\t *  @example\n\t * //load a whole bank of piano samples\n\t * var pianoSamples = new Tone.Buffers({\n\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t * \t...\n\t * }, function(){\n\t * \t//play one of the samples when they all load\n\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t * \tplayer.start();\n\t * });\n\t * \t@example\n\t * //To pass in additional parameters in the second parameter\n\t * var buffers = new Tone.Buffers(urls, {\n\t * \t\"onload\" : callback,\n\t * \t\"baseUrl\" : \"../path/to/audio/\"\n\t * })\n\t */",
		"meta": {
			"range": [
				973,
				1594
			],
			"filename": "Buffers.js",
			"lineno": 31,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014447",
				"name": "Tone.Buffers",
				"type": "FunctionExpression",
				"paramnames": [
					"urls"
				]
			},
			"vars": {
				"args": "Tone.Buffers~args",
				"options": "Tone.Buffers~options",
				"this._buffers": "Tone.Buffers#_buffers",
				"this.baseUrl": "Tone.Buffers#baseUrl",
				"this._loadingCount": "Tone.Buffers#_loadingCount",
				"key": "Tone.Buffers~key"
			}
		},
		"kind": "class",
		"classdesc": "A data structure for holding multiple buffers.",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"Array"
					]
				},
				"description": "An object literal or array\n                                     of urls to load.",
				"name": "urls"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke when\n                                the buffers are loaded.",
				"name": "callback"
			}
		],
		"augments": [
			"Tone"
		],
		"examples": [
			"//load a whole bank of piano samples\nvar pianoSamples = new Tone.Buffers({\n\t\"C4\" : \"path/to/C4.mp3\"\n\t\"C#4\" : \"path/to/C#4.mp3\"\n\t\"D4\" : \"path/to/D4.mp3\"\n\t\"D#4\" : \"path/to/D#4.mp3\"\n\t...\n}, function(){\n\t//play one of the samples when they all load\n\tplayer.buffer = pianoSamples.get(\"C4\");\n\tplayer.start();\n});\n\t",
			"//To pass in additional parameters in the second parameter\nvar buffers = new Tone.Buffers(urls, {\n\t\"onload\" : callback,\n\t\"baseUrl\" : \"../path/to/audio/\"\n})"
		],
		"name": "Buffers",
		"longname": "Tone.Buffers",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t */",
		"meta": {
			"range": [
				1386,
				1416
			],
			"filename": "Buffers.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014498",
				"name": "this.baseUrl",
				"type": "MemberExpression",
				"value": "options.baseUrl",
				"paramnames": []
			}
		},
		"description": "A path which is prefixed before every url.",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "baseUrl",
		"longname": "Tone.Buffers#baseUrl",
		"kind": "member",
		"memberof": "Tone.Buffers",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Defaults\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1672,
				1741
			],
			"filename": "Buffers.js",
			"lineno": 66,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014550",
				"name": "Tone.Buffers.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "Defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Buffers.defaults",
		"kind": "member",
		"memberof": "Tone.Buffers",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1700,
				1720
			],
			"filename": "Buffers.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014557",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.Buffers.defaults.onload",
		"kind": "member",
		"memberof": "Tone.Buffers.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1724,
				1738
			],
			"filename": "Buffers.js",
			"lineno": 68,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014561",
				"name": "baseUrl",
				"type": "Literal",
				"value": ""
			}
		},
		"undocumented": true,
		"name": "baseUrl",
		"longname": "Tone.Buffers.defaults.baseUrl",
		"kind": "member",
		"memberof": "Tone.Buffers.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  {String|Number}  name  The key or index of the \n\t *                                 buffer.\n\t *  @return  {Boolean}\n\t */",
		"meta": {
			"range": [
				1943,
				2035
			],
			"filename": "Buffers.js",
			"lineno": 77,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014564",
				"name": "Tone.Buffers.prototype.has",
				"type": "FunctionExpression",
				"paramnames": [
					"name"
				]
			}
		},
		"description": "True if the buffers object has a buffer by that name.",
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"description": "The key or index of the \n                                buffer.",
				"name": "name"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Boolean"
					]
				}
			}
		],
		"name": "has",
		"longname": "Tone.Buffers#has",
		"kind": "function",
		"memberof": "Tone.Buffers",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get a buffer by name. If an array was loaded, \n\t *  then use the array index.\n\t *  @param  {String|Number}  name  The key or index of the \n\t *                                 buffer.\n\t *  @return  {Tone.Buffer}\n\t */",
		"meta": {
			"range": [
				2265,
				2440
			],
			"filename": "Buffers.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014584",
				"name": "Tone.Buffers.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"name"
				]
			}
		},
		"description": "Get a buffer by name. If an array was loaded, \n then use the array index.",
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"description": "The key or index of the \n                                buffer.",
				"name": "name"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffer"
					]
				}
			}
		],
		"name": "get",
		"longname": "Tone.Buffers#get",
		"kind": "function",
		"memberof": "Tone.Buffers",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If the buffers are loaded or not\n\t * @memberOf Tone.Buffers#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Buffers.js",
			"lineno": 108,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "If the buffers are loaded or not",
		"memberof": "Tone.Buffers",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loaded",
		"readonly": true,
		"longname": "Tone.Buffers#loaded",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Add a buffer by name and url to the Buffers\n\t *  @param  {String}    name      A unique name to give\n\t *                                the buffer\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke \n\t *                                 when the url is loaded.\n\t */",
		"meta": {
			"range": [
				3609,
				4039
			],
			"filename": "Buffers.js",
			"lineno": 136,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014691",
				"name": "Tone.Buffers.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"name",
					"url",
					"callback"
				]
			},
			"vars": {
				"callback": "Tone.Buffers#add~callback",
				"this._buffers[undefined]": "Tone.Buffers#_buffers[undefined]"
			}
		},
		"description": "Add a buffer by name and url to the Buffers",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "A unique name to give\n                               the buffer",
				"name": "name"
			},
			{
				"type": {
					"names": [
						"String",
						"Tone.Buffer",
						"Audiobuffer"
					]
				},
				"description": "Either the url of the bufer, \n                                                or a buffer which will be added\n                                                with the given name.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke \n                                when the url is loaded.",
				"name": "callback"
			}
		],
		"name": "add",
		"longname": "Tone.Buffers#add",
		"kind": "function",
		"memberof": "Tone.Buffers",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Buffers} this\n\t */",
		"meta": {
			"range": [
				4102,
				4298
			],
			"filename": "Buffers.js",
			"lineno": 154,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014782",
				"name": "Tone.Buffers.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"name": "Tone.Buffers#dispose~name",
				"this._buffers": "Tone.Buffers#_buffers"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Buffers"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Buffers#dispose",
		"kind": "function",
		"memberof": "Tone.Buffers",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Send this signal to the channel name. \n\t *  @param  {String} channelName A named channel to send the signal to.\n\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t *                     Can be used to adjust the levels of the send.\n\t *  @example\n\t * source.send(\"reverb\", -12);\n\t */",
		"meta": {
			"range": [
				714,
				1038
			],
			"filename": "Bus.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014849",
				"name": "Tone.prototype.send",
				"type": "FunctionExpression",
				"paramnames": [
					"channelName",
					"amount"
				]
			},
			"vars": {
				"Buses[undefined]": "<anonymous>~Buses.undefined]",
				"amount": "Tone#send~amount",
				"sendKnob": "Tone#send~sendKnob"
			}
		},
		"description": "Send this signal to the channel name.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "A named channel to send the signal to.",
				"name": "channelName"
			},
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"description": "The amount of the source to send to the bus.",
				"name": "amount"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"GainNode"
					]
				},
				"description": "The gain node which connects this node to the desired channel. \n                    Can be used to adjust the levels of the send."
			}
		],
		"examples": [
			"source.send(\"reverb\", -12);"
		],
		"name": "send",
		"longname": "Tone#send",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Recieve the input from the desired channelName to the input\n\t *\n\t *  @param  {String} channelName A named channel to send the signal to.\n\t *  @param  {Number=} channelNumber The channel to connect to\n\t *  @returns {Tone} this\n\t *  @example\n\t * reverbEffect.receive(\"reverb\");\n\t */",
		"meta": {
			"range": [
				1333,
				1556
			],
			"filename": "Bus.js",
			"lineno": 48,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100014914",
				"name": "Tone.prototype.receive",
				"type": "FunctionExpression",
				"paramnames": [
					"channelName",
					"inputNum"
				]
			},
			"vars": {
				"Buses[undefined]": "<anonymous>~Buses.undefined]"
			}
		},
		"description": "Recieve the input from the desired channelName to the input",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "A named channel to send the signal to.",
				"name": "channelName"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "The channel to connect to",
				"name": "channelNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"reverbEffect.receive(\"reverb\");"
		],
		"name": "receive",
		"longname": "Tone#receive",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t *          While the callback is not sample-accurate (it is still susceptible to\n\t *          loose JS timing), the time passed in as the argument to the callback\n\t *          is precise. For most applications, it is better to use Tone.Transport\n\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t *\n\t * \t@constructor\n\t *  @extends {Tone.Emitter}\n\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t * \t@param {Frequency} frequency The rate of the callback\n\t * \t@example\n\t * //the callback will be invoked approximately once a second\n\t * //and will print the time exactly once a second apart.\n\t * var clock = new Tone.Clock(function(time){\n\t * \tconsole.log(time);\n\t * }, 1);\n\t */",
		"meta": {
			"range": [
				1011,
				2363
			],
			"filename": "Clock.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015007",
				"name": "Tone.Clock",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Clock~options",
				"this.callback": "Tone.Clock#callback",
				"this._nextTick": "Tone.Clock#_nextTick",
				"this._lastState": "Tone.Clock#_lastState",
				"this.frequency": "Tone.Clock#frequency",
				"this.ticks": "Tone.Clock#ticks",
				"this._state": "Tone.Clock#_state",
				"this._boundLoop": "Tone.Clock#_boundLoop"
			}
		},
		"kind": "class",
		"classdesc": "A sample accurate clock which provides a callback at the given rate. \n         While the callback is not sample-accurate (it is still susceptible to\n         loose JS timing), the time passed in as the argument to the callback\n         is precise. For most applications, it is better to use Tone.Transport\n         instead of the Clock by itself since you can synchronize multiple callbacks.",
		"augments": [
			"Tone.Emitter"
		],
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to be invoked with the time of the audio event",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The rate of the callback",
				"name": "frequency"
			}
		],
		"examples": [
			"//the callback will be invoked approximately once a second\n//and will print the time exactly once a second apart.\nvar clock = new Tone.Clock(function(time){\n\tconsole.log(time);\n}, 1);"
		],
		"name": "Clock",
		"longname": "Tone.Clock",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The callback function to invoke at the scheduled tick.\n\t\t *  @type  {Function}\n\t\t */",
		"meta": {
			"range": [
				1245,
				1277
			],
			"filename": "Clock.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015036",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback function to invoke at the scheduled tick.",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Clock#callback",
		"kind": "member",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The rate the callback function should be invoked. \n\t\t *  @type  {BPM}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1626,
				1702
			],
			"filename": "Clock.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015060",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The rate the callback function should be invoked.",
		"type": {
			"names": [
				"BPM"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Clock#frequency",
		"kind": "member",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t *  and increments after the callback was invoked. \n\t\t *  @type {Ticks}\n\t\t *  @readOnly\n\t\t */",
		"meta": {
			"range": [
				1913,
				1927
			],
			"filename": "Clock.js",
			"lineno": 63,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015083",
				"name": "this.ticks",
				"type": "Literal",
				"value": 0,
				"paramnames": []
			}
		},
		"description": "The number of times the callback was invoked. Starts counting at 0\n and increments after the callback was invoked.",
		"type": {
			"names": [
				"Ticks"
			]
		},
		"readonly": true,
		"name": "ticks",
		"longname": "Tone.Clock#ticks",
		"kind": "member",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				2469,
				2540
			],
			"filename": "Clock.js",
			"lineno": 91,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015137",
				"name": "Tone.Clock.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Clock.defaults",
		"memberof": "Tone.Clock",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2495,
				2517
			],
			"filename": "Clock.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015144",
				"name": "callback",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "callback",
		"longname": "Tone.Clock.defaults.callback",
		"kind": "member",
		"memberof": "Tone.Clock.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2521,
				2536
			],
			"filename": "Clock.js",
			"lineno": 93,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015148",
				"name": "frequency",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Clock.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Clock.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Clock#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Clock.js",
			"lineno": 96,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Clock",
		"name": "state",
		"longname": "Tone.Clock#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Start the clock at the given time. Optionally pass in an offset\n\t *  of where to start the tick counter from.\n\t *  @param  {Time=}  time    The time the clock should start\n\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t *  @return  {Tone.Clock}  this\n\t */",
		"meta": {
			"range": [
				3157,
				3426
			],
			"filename": "Clock.js",
			"lineno": 116,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015177",
				"name": "Tone.Clock.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset"
				]
			},
			"vars": {
				"time": "Tone.Clock#start~time",
				".offset": "Tone.Clock#start~.offset"
			}
		},
		"description": "Start the clock at the given time. Optionally pass in an offset\n of where to start the tick counter from.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The time the clock should start",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"optional": true,
				"description": "Where the tick counter starts counting from.",
				"name": "offset"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Clock"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Clock#start",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t *  @example\n\t * clock.stop();\n\t */",
		"meta": {
			"range": [
				3641,
				3818
			],
			"filename": "Clock.js",
			"lineno": 132,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015240",
				"name": "Tone.Clock.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Clock#stop~time"
			}
		},
		"description": "Stop the clock. Stopping the clock resets the tick counter to 0.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the clock should stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Clock"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"clock.stop();"
		],
		"name": "stop",
		"longname": "Tone.Clock#stop",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Pause the clock. Pausing does not reset the tick counter.\n\t *  @param {Time} [time=now] The time when the clock should stop.\n\t *  @returns {Tone.Clock} this\n\t */",
		"meta": {
			"range": [
				3995,
				4213
			],
			"filename": "Clock.js",
			"lineno": 145,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015283",
				"name": "Tone.Clock.prototype.pause",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Clock#pause~time"
			}
		},
		"description": "Pause the clock. Pausing does not reset the tick counter.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the clock should stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Clock"
					]
				},
				"description": "this"
			}
		],
		"name": "pause",
		"longname": "Tone.Clock#pause",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns the scheduled state at the given time.\n\t *  @param  {Time}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t *  @example\n\t * clock.start(\"+0.1\");\n\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t */",
		"meta": {
			"range": [
				5721,
				5851
			],
			"filename": "Clock.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015543",
				"name": "Tone.Clock.prototype.getStateAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Clock#getStateAtTime~time"
			}
		},
		"description": "Returns the scheduled state at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the state input in setStateAtTime."
			}
		],
		"examples": [
			"clock.start(\"+0.1\");\nclock.getStateAtTime(\"+0.1\"); //returns \"started\""
		],
		"name": "getStateAtTime",
		"longname": "Tone.Clock#getStateAtTime",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.Clock} this\n\t */",
		"meta": {
			"range": [
				5911,
				6256
			],
			"filename": "Clock.js",
			"lineno": 223,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015571",
				"name": "Tone.Clock.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.frequency": "Tone.Clock#frequency",
				"this._boundLoop": "Tone.Clock#_boundLoop",
				"this._nextTick": "Tone.Clock#_nextTick",
				"this.callback": "Tone.Clock#callback",
				"this._state": "Tone.Clock#_state"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Clock"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Clock#dispose",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance",
		"overrides": "Tone.Emitter#dispose"
	},
	{
		"comment": "/**\n\t *  @class Wrapper around the native AudioContext.\n\t *  @extends {Tone.Emitter}\n\t *  @param {AudioContext=} context optionally pass in a context\n\t */",
		"meta": {
			"range": [
				428,
				2149
			],
			"filename": "Context.js",
			"lineno": 16,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015693",
				"name": "Tone.Context",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Context~options",
				"options.context": "Tone.Context~options.context",
				"this._context": "Tone.Context#_context",
				"prop": "Tone.Context~prop",
				"this._latencyHint": "Tone.Context#_latencyHint",
				"this._constants": "Tone.Context#_constants",
				"this.lookAhead": "Tone.Context#lookAhead",
				"this._computedUpdateInterval": "Tone.Context#_computedUpdateInterval",
				"this._ticker": "Tone.Context#_ticker",
				"this._timeouts": "Tone.Context#_timeouts",
				"this._timeoutIds": "Tone.Context#_timeoutIds"
			}
		},
		"kind": "class",
		"classdesc": "Wrapper around the native AudioContext.",
		"augments": [
			"Tone.Emitter"
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioContext"
					]
				},
				"optional": true,
				"description": "optionally pass in a context",
				"name": "context"
			}
		],
		"name": "Context",
		"longname": "Tone.Context",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * defaults\n\t * @static\n\t * @type {Object}\n\t */",
		"meta": {
			"range": [
				2285,
				2421
			],
			"filename": "Context.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015859",
				"name": "Tone.Context.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.03}",
				"paramnames": []
			}
		},
		"description": "defaults",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Context.defaults",
		"kind": "member",
		"memberof": "Tone.Context"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2313,
				2337
			],
			"filename": "Context.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015866",
				"name": "clockSource",
				"type": "Literal",
				"value": "worker"
			}
		},
		"undocumented": true,
		"name": "clockSource",
		"longname": "Tone.Context.defaults.clockSource",
		"kind": "member",
		"memberof": "Tone.Context.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2341,
				2370
			],
			"filename": "Context.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015868",
				"name": "latencyHint",
				"type": "Literal",
				"value": "interactive"
			}
		},
		"undocumented": true,
		"name": "latencyHint",
		"longname": "Tone.Context.defaults.latencyHint",
		"kind": "member",
		"memberof": "Tone.Context.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2374,
				2391
			],
			"filename": "Context.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015870",
				"name": "lookAhead",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "lookAhead",
		"longname": "Tone.Context.defaults.lookAhead",
		"kind": "member",
		"memberof": "Tone.Context.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2395,
				2418
			],
			"filename": "Context.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015872",
				"name": "updateInterval",
				"type": "Literal",
				"value": 0.03
			}
		},
		"undocumented": true,
		"name": "updateInterval",
		"longname": "Tone.Context.defaults.updateInterval",
		"kind": "member",
		"memberof": "Tone.Context.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The current audio context time\n\t *  @return  {Number}\n\t */",
		"meta": {
			"range": [
				3061,
				3157
			],
			"filename": "Context.js",
			"lineno": 136,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015939",
				"name": "Tone.Context.prototype.now",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "The current audio context time",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				}
			}
		],
		"name": "now",
		"longname": "Tone.Context#now",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Generate a looped buffer at some constant value.\n\t *  @param  {Number}  val\n\t *  @return  {BufferSourceNode}\n\t */",
		"meta": {
			"range": [
				3285,
				3855
			],
			"filename": "Context.js",
			"lineno": 145,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015960",
				"name": "Tone.Context.prototype.getConstant",
				"type": "FunctionExpression",
				"paramnames": [
					"val"
				]
			},
			"vars": {
				"buffer": "Tone.Context#getConstant~buffer",
				"arr": "Tone.Context#getConstant~arr",
				"i": "Tone.Context#getConstant~i",
				"arr[undefined]": "Tone.Context#getConstant~arr.undefined]",
				"constant": "Tone.Context#getConstant~constant",
				"constant.channelCount": "Tone.Context#getConstant~constant.channelCount",
				"constant.channelCountMode": "Tone.Context#getConstant~constant.channelCountMode",
				"constant.buffer": "Tone.Context#getConstant~constant.buffer",
				"constant.loop": "Tone.Context#getConstant~constant.loop",
				"this._constants[undefined]": "Tone.Context#_constants[undefined]"
			}
		},
		"description": "Generate a looped buffer at some constant value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "val"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"BufferSourceNode"
					]
				}
			}
		],
		"name": "getConstant",
		"longname": "Tone.Context#getConstant",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  A setTimeout which is gaurenteed by the clock source. \n\t *  Also runs in the offline context.\n\t *  @param  {Function}  fn       The callback to invoke\n\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t */",
		"meta": {
			"range": [
				4501,
				4733
			],
			"filename": "Context.js",
			"lineno": 184,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016128",
				"name": "Tone.Context.prototype.setTimeout",
				"type": "FunctionExpression",
				"paramnames": [
					"fn",
					"timeout"
				]
			},
			"vars": {
				"now": "Tone.Context#setTimeout~now"
			}
		},
		"description": "A setTimeout which is gaurenteed by the clock source. \n Also runs in the offline context.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke",
				"name": "fn"
			},
			{
				"type": {
					"names": [
						"Seconds"
					]
				},
				"description": "The timeout in seconds",
				"name": "timeout"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "ID to use when invoking Tone.Context.clearTimeout"
			}
		],
		"name": "setTimeout",
		"longname": "Tone.Context#setTimeout",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  {Number}  id  The ID returned from setTimeout\n\t *  @return  {Tone.Context}  this\n\t */",
		"meta": {
			"range": [
				4913,
				5084
			],
			"filename": "Context.js",
			"lineno": 200,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016175",
				"name": "Tone.Context.prototype.clearTimeout",
				"type": "FunctionExpression",
				"paramnames": [
					"id"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Clears a previously scheduled timeout with Tone.context.setTimeout",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The ID returned from setTimeout",
				"name": "id"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Context"
					]
				},
				"description": "this"
			}
		],
		"name": "clearTimeout",
		"longname": "Tone.Context#clearTimeout",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  How often the Web Worker callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t *  @type {Number}\n\t *  @memberOf Tone.Context#\n\t *  @name updateInterval\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 209,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "How often the Web Worker callback is invoked.\n This number corresponds to how responsive the scheduling\n can be. Context.updateInterval + Context.lookAhead gives you the\n total latency between scheduling an event and hearing it.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Context",
		"name": "updateInterval",
		"longname": "Tone.Context#updateInterval",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  What the source of the clock is, either \"worker\" (Web Worker [default]), \n\t *  \"timeout\" (setTimeout), or \"offline\" (none). \n\t *  @type {String}\n\t *  @memberOf Tone.Context#\n\t *  @name clockSource\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 227,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "What the source of the clock is, either \"worker\" (Web Worker [default]), \n \"timeout\" (setTimeout), or \"offline\" (none).",
		"type": {
			"names": [
				"String"
			]
		},
		"memberof": "Tone.Context",
		"name": "clockSource",
		"longname": "Tone.Context#clockSource",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The type of playback, which affects tradeoffs between audio \n\t *  output latency and responsiveness. \n\t *  \n\t *  In addition to setting the value in seconds, the latencyHint also\n\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t *  @type {String|Seconds}\n\t *  @memberOf Tone.Context#\n\t *  @name latencyHint\n\t *  @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 243,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The type of playback, which affects tradeoffs between audio \n output latency and responsiveness. \n \n In addition to setting the value in seconds, the latencyHint also\n accepts the strings \"interactive\" (prioritizes low latency), \n \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n latency and performance), and \"fastest\" (lowest latency, might glitch more often).",
		"type": {
			"names": [
				"String",
				"Seconds"
			]
		},
		"memberof": "Tone.Context",
		"name": "latencyHint",
		"examples": [
			"//set the lookAhead to 0.3 seconds\nTone.context.latencyHint = 0.3;"
		],
		"longname": "Tone.Context#latencyHint",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.Context} this\n\t */",
		"meta": {
			"range": [
				7414,
				7778
			],
			"filename": "Context.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016394",
				"name": "Tone.Context.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._ticker": "Tone.Context#_ticker",
				"this._timeouts": "Tone.Context#_timeouts",
				"con": "Tone.Context#dispose~con",
				"this._constants": "Tone.Context#_constants"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Context"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Context#dispose",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance",
		"overrides": "Tone.Emitter#dispose"
	},
	{
		"comment": "/**\n\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t *  @extends {Tone}\n\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t *  @param {Time=} maxDelay The maximum delay time. \n\t */",
		"meta": {
			"range": [
				557,
				1156
			],
			"filename": "Delay.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017162",
				"name": "Tone.Delay",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Delay~options",
				"this._delayNode": "Tone.Delay#_delayNode",
				"this.input": "Tone.Delay#input",
				"this.output": "Tone.Delay#output",
				"this.delayTime": "Tone.Delay#delayTime"
			}
		},
		"kind": "class",
		"classdesc": "Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The delay applied to the incoming signal.",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The maximum delay time.",
				"name": "maxDelay"
			}
		],
		"name": "Delay",
		"longname": "Tone.Delay",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of time the incoming signal is\n\t\t *  delayed. \n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				982,
				1120
			],
			"filename": "Delay.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017215",
				"name": "this.delayTime",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amount of time the incoming signal is\n delayed.",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.Delay#delayTime",
		"kind": "member",
		"memberof": "Tone.Delay",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1248,
				1310
			],
			"filename": "Delay.js",
			"lineno": 53,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017255",
				"name": "Tone.Delay.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Delay.defaults",
		"memberof": "Tone.Delay",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1274,
				1288
			],
			"filename": "Delay.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017262",
				"name": "maxDelay",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "maxDelay",
		"longname": "Tone.Delay.defaults.maxDelay",
		"kind": "member",
		"memberof": "Tone.Delay.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1292,
				1307
			],
			"filename": "Delay.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017264",
				"name": "delayTime",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.Delay.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.Delay.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Delay}  this\n\t */",
		"meta": {
			"range": [
				1373,
				1590
			],
			"filename": "Delay.js",
			"lineno": 62,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017267",
				"name": "Tone.Delay.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._delayNode": "Tone.Delay#_delayNode",
				"this.delayTime": "Tone.Delay#delayTime"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Delay"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Delay#dispose",
		"kind": "function",
		"memberof": "Tone.Delay",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t *         always happen _before_ the scheduled time and are not synchronized\n\t *         to the animation frame so they are not good for triggering tightly\n\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t *         \n\t *  @singleton\n\t *  @extends {Tone}\n\t *  @example\n\t * Tone.Transport.schedule(function(time){\n\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t * \tTone.Draw.schedule(function(){\n\t * \t\t//do drawing or DOM manipulation here\n\t * \t}, time)\n\t * }, \"+0.5\")\n\t */",
		"meta": {
			"range": [
				850,
				1524
			],
			"filename": "Draw.js",
			"lineno": 23,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017334",
				"name": "Tone.Draw",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._events": "Tone.Draw#_events",
				"this.expiration": "Tone.Draw#expiration",
				"this.anticipation": "Tone.Draw#anticipation",
				"this._boundDrawLoop": "Tone.Draw#_boundDrawLoop"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Draw is useful for synchronizing visuals and audio events.\n        Callbacks from Tone.Transport or any of the Tone.Event classes\n        always happen _before_ the scheduled time and are not synchronized\n        to the animation frame so they are not good for triggering tightly\n        synchronized visuals and sound. Tone.Draw makes it easy to schedule\n        callbacks using the AudioContext time and uses requestAnimationFrame.",
		"tags": [
			{
				"originalTitle": "singleton",
				"title": "singleton",
				"text": ""
			}
		],
		"augments": [
			"Tone"
		],
		"examples": [
			"Tone.Transport.schedule(function(time){\n\t//use the time argument to schedule a callback with Tone.Draw\n\tTone.Draw.schedule(function(){\n\t\t//do drawing or DOM manipulation here\n\t}, time)\n}, \"+0.5\")"
		],
		"name": "Draw",
		"longname": "Tone.Draw",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The duration after which events are not invoked.\n\t\t *  @type  {Number}\n\t\t *  @default 0.25\n\t\t */",
		"meta": {
			"range": [
				1128,
				1150
			],
			"filename": "Draw.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017356",
				"name": "this.expiration",
				"type": "Literal",
				"value": 0.25,
				"paramnames": []
			}
		},
		"description": "The duration after which events are not invoked.",
		"type": {
			"names": [
				"Number"
			]
		},
		"defaultvalue": "0.25",
		"name": "expiration",
		"longname": "Tone.Draw#expiration",
		"kind": "member",
		"memberof": "Tone.Draw",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of time before the scheduled time \n\t\t *  that the callback can be invoked. Default is\n\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t *  @type  {Number}\n\t\t *  @default 0.008\n\t\t */",
		"meta": {
			"range": [
				1372,
				1397
			],
			"filename": "Draw.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017362",
				"name": "this.anticipation",
				"type": "Literal",
				"value": 0.008,
				"paramnames": []
			}
		},
		"description": "The amount of time before the scheduled time \n that the callback can be invoked. Default is\n half the time of an animation frame (0.008 seconds).",
		"type": {
			"names": [
				"Number"
			]
		},
		"defaultvalue": "0.008",
		"name": "anticipation",
		"longname": "Tone.Draw#anticipation",
		"kind": "member",
		"memberof": "Tone.Draw",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedule a function at the given time to be invoked\n\t *  on the nearest animation frame.\n\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t *                              to invoke the callback.\n\t *  @return  {Tone.Draw}    this\n\t */",
		"meta": {
			"range": [
				1899,
				2183
			],
			"filename": "Draw.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017388",
				"name": "Tone.Draw.prototype.schedule",
				"type": "FunctionExpression",
				"paramnames": [
					"callback",
					"time"
				]
			}
		},
		"description": "Schedule a function at the given time to be invoked\n on the nearest animation frame.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "Callback is invoked at the given time.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time relative to the AudioContext time\n                             to invoke the callback.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Draw"
					]
				},
				"description": "this"
			}
		],
		"name": "schedule",
		"longname": "Tone.Draw#schedule",
		"kind": "function",
		"memberof": "Tone.Draw",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel events scheduled after the given time\n\t *  @param  {Time=}  after  Time after which scheduled events will \n\t *                          be removed from the scheduling timeline.\n\t *  @return  {Tone.Draw}  this\n\t */",
		"meta": {
			"range": [
				2418,
				2527
			],
			"filename": "Draw.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017434",
				"name": "Tone.Draw.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			}
		},
		"description": "Cancel events scheduled after the given time",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "Time after which scheduled events will \n                         be removed from the scheduling timeline.",
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Draw"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Draw#cancel",
		"kind": "function",
		"memberof": "Tone.Draw",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Emitter gives classes which extend it\n\t *         the ability to listen for and emit events. \n\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t *         MIT (c) 2011 Jerome Etienne.\n\t *         \n\t *  @extends {Tone}\n\t */",
		"meta": {
			"range": [
				381,
				533
			],
			"filename": "Emitter.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017565",
				"name": "Tone.Emitter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._events": "Tone.Emitter#_events"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Emitter gives classes which extend it\n        the ability to listen for and emit events. \n        Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n        MIT (c) 2011 Jerome Etienne.",
		"augments": [
			"Tone"
		],
		"name": "Emitter",
		"longname": "Tone.Emitter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				846,
				1181
			],
			"filename": "Emitter.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017592",
				"name": "Tone.Emitter.prototype.on",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#on~events",
				"i": "Tone.Emitter#on~i",
				"eventName": "Tone.Emitter#on~eventName",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]"
			}
		},
		"description": "Bind a callback to a specific event.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event to listen for.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the\n                               event is emitted",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "on",
		"longname": "Tone.Emitter#on",
		"kind": "function",
		"memberof": "Tone.Emitter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				1596,
				2084
			],
			"filename": "Emitter.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017662",
				"name": "Tone.Emitter.prototype.off",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#off~events",
				"ev": "Tone.Emitter#off~ev",
				"event": "Tone.Emitter#off~event",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]",
				"eventList": "Tone.Emitter#off~eventList",
				"i": "Tone.Emitter#off~i"
			}
		},
		"description": "Remove the event listener.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The event to stop listening to.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "off",
		"longname": "Tone.Emitter#off",
		"kind": "function",
		"memberof": "Tone.Emitter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				2348,
				2682
			],
			"filename": "Emitter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017764",
				"name": "Tone.Emitter.prototype.emit",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"args": "Tone.Emitter#emit~args",
				"eventList": "Tone.Emitter#emit~eventList",
				"i": "Tone.Emitter#emit~i",
				"len": "Tone.Emitter#emit~len"
			}
		},
		"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The arguments to pass to the functions listening.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "emit",
		"longname": "Tone.Emitter#emit",
		"kind": "function",
		"memberof": "Tone.Emitter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add Emitter functions (on/off/emit) to the object\n\t *  @param  {Object|Function}  object  The object or class to extend.\n\t *  @returns {Tone.Emitter}\n\t */",
		"meta": {
			"range": [
				2851,
				3139
			],
			"filename": "Emitter.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017838",
				"name": "Tone.Emitter.mixin",
				"type": "FunctionExpression",
				"paramnames": [
					"object"
				]
			},
			"vars": {
				"functions": "Tone.Emitter.mixin~functions",
				"object._events": "object._events",
				"i": "Tone.Emitter.mixin~i",
				"func": "Tone.Emitter.mixin~func",
				"emitterFunc": "Tone.Emitter.mixin~emitterFunc",
				"object[undefined]": null
			}
		},
		"description": "Add Emitter functions (on/off/emit) to the object",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"function"
					]
				},
				"description": "The object or class to extend.",
				"name": "object"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				}
			}
		],
		"name": "mixin",
		"longname": "Tone.Emitter.mixin",
		"kind": "function",
		"memberof": "Tone.Emitter",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				3202,
				3324
			],
			"filename": "Emitter.js",
			"lineno": 114,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017900",
				"name": "Tone.Emitter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._events": "Tone.Emitter#_events"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Emitter#dispose",
		"kind": "function",
		"memberof": "Tone.Emitter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t *         The GainNode is a basic building block of the Web Audio\n\t *         API and is useful for routing audio and adjusting gains.\n\t *  @extends {Tone}\n\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t *  @param {Tone.Type=} units The units of the gain parameter.\n\t */",
		"meta": {
			"range": [
				647,
				1181
			],
			"filename": "Gain.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017971",
				"name": "Tone.Gain",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Gain~options",
				"this.input": "Tone.Gain#input",
				"this.output": "Tone.Gain#output",
				"this._gainNode": "Tone.Gain#_gainNode",
				"this.gain": "Tone.Gain#gain"
			}
		},
		"kind": "class",
		"classdesc": "A thin wrapper around the Native Web Audio GainNode.\n        The GainNode is a basic building block of the Web Audio\n        API and is useful for routing audio and adjusting gains.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "The initial gain of the GainNode",
				"name": "gain"
			},
			{
				"type": {
					"names": [
						"Tone.Type"
					]
				},
				"optional": true,
				"description": "The units of the gain parameter.",
				"name": "units"
			}
		],
		"name": "Gain",
		"longname": "Tone.Gain",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The gain parameter of the gain node.\n\t\t *  @type {Gain}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				998,
				1151
			],
			"filename": "Gain.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018017",
				"name": "this.gain",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The gain parameter of the gain node.",
		"type": {
			"names": [
				"Gain"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "gain",
		"longname": "Tone.Gain#gain",
		"kind": "member",
		"memberof": "Tone.Gain",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1272,
				1331
			],
			"filename": "Gain.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018059",
				"name": "Tone.Gain.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":true}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Gain.defaults",
		"memberof": "Tone.Gain",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1297,
				1307
			],
			"filename": "Gain.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018066",
				"name": "gain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "gain",
		"longname": "Tone.Gain.defaults.gain",
		"kind": "member",
		"memberof": "Tone.Gain.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1311,
				1327
			],
			"filename": "Gain.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018068",
				"name": "convert",
				"type": "Literal",
				"value": true
			}
		},
		"undocumented": true,
		"name": "convert",
		"longname": "Tone.Gain.defaults.convert",
		"kind": "member",
		"memberof": "Tone.Gain.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Gain}  this\n\t */",
		"meta": {
			"range": [
				1392,
				1604
			],
			"filename": "Gain.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018071",
				"name": "Tone.Gain.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._gainNode": "Tone.Gain#_gainNode",
				"this.gain": "Tone.Gain#gain"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Gain"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Gain#dispose",
		"kind": "function",
		"memberof": "Tone.Gain",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Similar to Tone.Timeline, but all events represent\n\t *         intervals with both \"time\" and \"duration\" times. The \n\t *         events are placed in a tree structure optimized\n\t *         for querying an intersection point with the timeline\n\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t *         to represent the data.\n\t *  @extends {Tone}\n\t */",
		"meta": {
			"range": [
				501,
				794
			],
			"filename": "IntervalTimeline.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018208",
				"name": "Tone.IntervalTimeline",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._root": "Tone.IntervalTimeline#_root",
				"this._length": "Tone.IntervalTimeline#_length"
			}
		},
		"kind": "class",
		"classdesc": "Similar to Tone.Timeline, but all events represent\n        intervals with both \"time\" and \"duration\" times. The \n        events are placed in a tree structure optimized\n        for querying an intersection point with the timeline\n        events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n        to represent the data.",
		"augments": [
			"Tone"
		],
		"name": "IntervalTimeline",
		"longname": "Tone.IntervalTimeline",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The event to add to the timeline. All events must \n\t *  have a time and duration value\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */",
		"meta": {
			"range": [
				1045,
				1629
			],
			"filename": "IntervalTimeline.js",
			"lineno": 41,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018241",
				"name": "Tone.IntervalTimeline.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"node": "Tone.IntervalTimeline#add~node",
				"this._root": "Tone.IntervalTimeline#_root"
			}
		},
		"description": "The event to add to the timeline. All events must \n have a time and duration value",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event to add to the timeline",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "add",
		"longname": "Tone.IntervalTimeline#add",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event to remove from the timeline\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */",
		"meta": {
			"range": [
				1795,
				2142
			],
			"filename": "IntervalTimeline.js",
			"lineno": 67,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018346",
				"name": "Tone.IntervalTimeline.prototype.remove",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"results": "Tone.IntervalTimeline#remove~results",
				"i": "Tone.IntervalTimeline#remove~i",
				"node": "Tone.IntervalTimeline#remove~node"
			}
		},
		"description": "Remove an event from the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event to remove from the timeline",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "remove",
		"longname": "Tone.IntervalTimeline#remove",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.IntervalTimeline#\n\t *  @name length\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "IntervalTimeline.js",
			"lineno": 83,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of items in the timeline.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.IntervalTimeline",
		"name": "length",
		"readonly": true,
		"longname": "Tone.IntervalTimeline#length",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Remove events whose time time is after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.IntervalTimeline} this\n\t */",
		"meta": {
			"range": [
				2571,
				2730
			],
			"filename": "IntervalTimeline.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100018439",
				"name": "Tone.IntervalTimeline.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Remove events whose time time is after the given time",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.IntervalTimeline#cancel",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get an event whose time and duration span the give time. Will\n\t *  return the match whose \"time\" value is closest to the given time.\n\t *  @param  {Object}  event  The event to add to the timeline\n\t *  @return  {Object}  The event which spans the desired time\n\t */",
		"meta": {
			"range": [
				7115,
				7477
			],
			"filename": "IntervalTimeline.js",
			"lineno": 281,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019090",
				"name": "Tone.IntervalTimeline.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"results": "Tone.IntervalTimeline#get~results",
				"max": "Tone.IntervalTimeline#get~max",
				"i": "Tone.IntervalTimeline#get~i"
			}
		},
		"description": "Get an event whose time and duration span the give time. Will\n return the match whose \"time\" value is closest to the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event to add to the timeline",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event which spans the desired time"
			}
		],
		"name": "get",
		"longname": "Tone.IntervalTimeline#get",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the timeline.\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */",
		"meta": {
			"range": [
				7653,
				7978
			],
			"filename": "IntervalTimeline.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019171",
				"name": "Tone.IntervalTimeline.prototype.forEach",
				"type": "FunctionExpression",
				"paramnames": [
					"callback"
				]
			},
			"vars": {
				"allNodes": "Tone.IntervalTimeline#forEach~allNodes",
				"": null,
				"i": "Tone.IntervalTimeline#forEach~i",
				"ev": "Tone.IntervalTimeline#forEach~ev"
			}
		},
		"description": "Iterate over everything in the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEach",
		"longname": "Tone.IntervalTimeline#forEach",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array in which the given time\n\t *  overlaps with the time and duration time of the event.\n\t *  @param  {Number}  time The time to check if items are overlapping\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */",
		"meta": {
			"range": [
				8305,
				8610
			],
			"filename": "IntervalTimeline.js",
			"lineno": 326,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019240",
				"name": "Tone.IntervalTimeline.prototype.forEachAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"results": "Tone.IntervalTimeline#forEachAtTime~results",
				"i": "Tone.IntervalTimeline#forEachAtTime~i",
				"ev": "Tone.IntervalTimeline#forEachAtTime~ev"
			}
		},
		"description": "Iterate over everything in the array in which the given time\n overlaps with the time and duration time of the event.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are overlapping",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAtTime",
		"longname": "Tone.IntervalTimeline#forEachAtTime",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array in which the time is greater\n\t *  than the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.IntervalTimeline} this\n\t */",
		"meta": {
			"range": [
				8903,
				9192
			],
			"filename": "IntervalTimeline.js",
			"lineno": 347,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019305",
				"name": "Tone.IntervalTimeline.prototype.forEachAfter",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"results": "Tone.IntervalTimeline#forEachAfter~results",
				"i": "Tone.IntervalTimeline#forEachAfter~i",
				"ev": "Tone.IntervalTimeline#forEachAfter~ev"
			}
		},
		"description": "Iterate over everything in the array in which the time is greater\n than the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAfter",
		"longname": "Tone.IntervalTimeline#forEachAfter",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.IntervalTimeline}  this\n\t */",
		"meta": {
			"range": [
				9264,
				9575
			],
			"filename": "IntervalTimeline.js",
			"lineno": 363,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019367",
				"name": "Tone.IntervalTimeline.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"allNodes": "Tone.IntervalTimeline#dispose~allNodes",
				"": null,
				"i": "Tone.IntervalTimeline#dispose~i",
				"this._root": "Tone.IntervalTimeline#_root"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.IntervalTimeline"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.IntervalTimeline#dispose",
		"kind": "function",
		"memberof": "Tone.IntervalTimeline",
		"scope": "instance"
	},
	{
		"comment": "/** \n\t *  Insert a node into the correct spot in the tree\n\t *  @param  {IntervalNode}  node\n\t */",
		"meta": {
			"range": [
				10689,
				10977
			],
			"filename": "IntervalTimeline.js",
			"lineno": 416,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019495",
				"name": "IntervalNode.prototype.insert",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"node"
				]
			},
			"vars": {
				"this.left": "<anonymous>~IntervalNode#insert#left",
				"this.right": "<anonymous>~IntervalNode#insert#right"
			}
		},
		"description": "Insert a node into the correct spot in the tree",
		"params": [
			{
				"type": {
					"names": [
						"IntervalNode"
					]
				},
				"name": "node"
			}
		],
		"name": "insert",
		"longname": "<anonymous>~IntervalNode#insert",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Search the tree for nodes which overlap \n\t *  with the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */",
		"meta": {
			"range": [
				11172,
				11832
			],
			"filename": "IntervalTimeline.js",
			"lineno": 438,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019559",
				"name": "IntervalNode.prototype.search",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"point",
					"results"
				]
			}
		},
		"description": "Search the tree for nodes which overlap \n with the given point",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The point to query",
				"name": "point"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The array to put the results",
				"name": "results"
			}
		],
		"name": "search",
		"longname": "<anonymous>~IntervalNode#search",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Search the tree for nodes which are less \n\t *  than the given point\n\t *  @param  {Number}  point  The point to query\n\t *  @param  {Array}  results  The array to put the results\n\t */",
		"meta": {
			"range": [
				12028,
				12347
			],
			"filename": "IntervalTimeline.js",
			"lineno": 469,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019637",
				"name": "IntervalNode.prototype.searchAfter",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"point",
					"results"
				]
			}
		},
		"description": "Search the tree for nodes which are less \n than the given point",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The point to query",
				"name": "point"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The array to put the results",
				"name": "results"
			}
		],
		"name": "searchAfter",
		"longname": "<anonymous>~IntervalNode#searchAfter",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Invoke the callback on this element and both it's branches\n\t *  @param  {Function}  callback\n\t */",
		"meta": {
			"range": [
				12459,
				12663
			],
			"filename": "IntervalTimeline.js",
			"lineno": 487,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019693",
				"name": "IntervalNode.prototype.traverse",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"callback"
				]
			}
		},
		"description": "Invoke the callback on this element and both it's branches",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"name": "callback"
			}
		],
		"name": "traverse",
		"longname": "<anonymous>~IntervalNode#traverse",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Update the height of the node\n\t */",
		"meta": {
			"range": [
				12712,
				13065
			],
			"filename": "IntervalTimeline.js",
			"lineno": 500,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019737",
				"name": "IntervalNode.prototype.updateHeight",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"this.height": "<anonymous>~IntervalNode#updateHeight#height"
			}
		},
		"description": "Update the height of the node",
		"name": "updateHeight",
		"longname": "<anonymous>~IntervalNode#updateHeight",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Update the height of the node\n\t */",
		"meta": {
			"range": [
				13114,
				13349
			],
			"filename": "IntervalTimeline.js",
			"lineno": 515,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019825",
				"name": "IntervalNode.prototype.updateMax",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"this.max": "<anonymous>~IntervalNode#updateMax#max"
			}
		},
		"description": "Update the height of the node",
		"name": "updateMax",
		"longname": "<anonymous>~IntervalNode#updateMax",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The balance is how the leafs are distributed on the node\n\t *  @return  {Number}  Negative numbers are balanced to the right\n\t */",
		"meta": {
			"range": [
				13492,
				13828
			],
			"filename": "IntervalTimeline.js",
			"lineno": 529,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019890",
				"name": "IntervalNode.prototype.getBalance",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"balance": "<anonymous>~IntervalNode#getBalance~balance"
			}
		},
		"description": "The balance is how the leafs are distributed on the node",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "Negative numbers are balanced to the right"
			}
		],
		"name": "getBalance",
		"longname": "<anonymous>~IntervalNode#getBalance",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @returns {Boolean} true if this node is the left child\n\t *  of its parent\n\t */",
		"meta": {
			"range": [
				13921,
				14033
			],
			"filename": "IntervalTimeline.js",
			"lineno": 545,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100019967",
				"name": "IntervalNode.prototype.isLeftChild",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			}
		},
		"returns": [
			{
				"type": {
					"names": [
						"Boolean"
					]
				},
				"description": "true if this node is the left child\n of its parent"
			}
		],
		"name": "isLeftChild",
		"longname": "<anonymous>~IntervalNode#isLeftChild",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  null out references.\n\t */",
		"meta": {
			"range": [
				14717,
				14851
			],
			"filename": "IntervalTimeline.js",
			"lineno": 588,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020086",
				"name": "IntervalNode.prototype.dispose",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"this.parent": "<anonymous>~IntervalNode#dispose#parent",
				"this._left": "<anonymous>~IntervalNode#dispose#_left",
				"this._right": "<anonymous>~IntervalNode#dispose#_right",
				"this.event": "<anonymous>~IntervalNode#dispose#event"
			}
		},
		"description": "null out references.",
		"name": "dispose",
		"longname": "<anonymous>~IntervalNode#dispose",
		"kind": "function",
		"memberof": "<anonymous>~IntervalNode",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t *          using a right-handed cartesian coordinate system. \n\t *          The units used in the coordinate system are not defined; \n\t *          these coordinates are independent/invariant of any particular \n\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t *          vector representing the direction the sound is projecting. Additionally, \n\t *          they have a sound cone representing how directional the sound is. \n\t *          For example, the sound could be omnidirectional, in which case it would \n\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t *          (representing a person's ears) have an forward and up vector \n\t *          representing in which direction the person is facing. Because both the \n\t *          source stream and the listener can be moving, they both have a velocity \n\t *          vector representing both the speed and direction of movement. Taken together, \n\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t *          <br><br>\n\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t */",
		"meta": {
			"range": [
				1651,
				2079
			],
			"filename": "Listener.js",
			"lineno": 30,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020141",
				"name": "Tone.Listener",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._orientation": "Tone.Listener#_orientation",
				"this._position": "Tone.Listener#_position",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Both Tone.Panner3D and Tone.Listener have a position in 3D space \n         using a right-handed cartesian coordinate system. \n         The units used in the coordinate system are not defined; \n         these coordinates are independent/invariant of any particular \n         units such as meters or feet. Tone.Panner3D objects have an forward \n         vector representing the direction the sound is projecting. Additionally, \n         they have a sound cone representing how directional the sound is. \n         For example, the sound could be omnidirectional, in which case it would \n         be heard anywhere regardless of its forward, or it can be more directional \n         and heard only if it is facing the listener. Tone.Listener objects \n         (representing a person's ears) have an forward and up vector \n         representing in which direction the person is facing. Because both the \n         source stream and the listener can be moving, they both have a velocity \n         vector representing both the speed and direction of movement. Taken together, \n         these two velocities can be used to generate a doppler shift effect which changes the pitch.\n         <br><br>\n         Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D",
		"augments": [
			"Tone"
		],
		"tags": [
			{
				"originalTitle": "singleton",
				"title": "singleton",
				"text": ""
			}
		],
		"name": "Listener",
		"longname": "Tone.Listener",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Defaults according to the specification\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2213,
				2391
			],
			"filename": "Listener.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020202",
				"name": "Tone.Listener.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "Defaults according to the specification",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Listener.defaults",
		"memberof": "Tone.Listener"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2242,
				2257
			],
			"filename": "Listener.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020209",
				"name": "positionX",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionX",
		"longname": "Tone.Listener.defaults.positionX",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2261,
				2276
			],
			"filename": "Listener.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020211",
				"name": "positionY",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionY",
		"longname": "Tone.Listener.defaults.positionY",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2280,
				2295
			],
			"filename": "Listener.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020213",
				"name": "positionZ",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "positionZ",
		"longname": "Tone.Listener.defaults.positionZ",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2299,
				2313
			],
			"filename": "Listener.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020215",
				"name": "forwardX",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "forwardX",
		"longname": "Tone.Listener.defaults.forwardX",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2317,
				2331
			],
			"filename": "Listener.js",
			"lineno": 68,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020217",
				"name": "forwardY",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "forwardY",
		"longname": "Tone.Listener.defaults.forwardY",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2335,
				2349
			],
			"filename": "Listener.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020219",
				"name": "forwardZ",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "forwardZ",
		"longname": "Tone.Listener.defaults.forwardZ",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2353,
				2362
			],
			"filename": "Listener.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020221",
				"name": "upX",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "upX",
		"longname": "Tone.Listener.defaults.upX",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2366,
				2375
			],
			"filename": "Listener.js",
			"lineno": 71,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020223",
				"name": "upY",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "upY",
		"longname": "Tone.Listener.defaults.upY",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2379,
				2388
			],
			"filename": "Listener.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020225",
				"name": "upZ",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "upZ",
		"longname": "Tone.Listener.defaults.upZ",
		"kind": "member",
		"memberof": "Tone.Listener.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Sets the position of the listener in 3d space.\t\n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @return {Tone.Listener} this\n\t */",
		"meta": {
			"range": [
				2719,
				3230
			],
			"filename": "Listener.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020238",
				"name": "Tone.Listener.prototype.setPosition",
				"type": "FunctionExpression",
				"paramnames": [
					"x",
					"y",
					"z"
				]
			},
			"vars": {
				"now": "Tone.Listener#setPosition~now",
				"this._position": "Tone.Listener#_position"
			}
		},
		"description": "Sets the position of the listener in 3d space.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "x"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "y"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "z"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Listener"
					]
				},
				"description": "this"
			}
		],
		"name": "setPosition",
		"longname": "Tone.Listener#setPosition",
		"kind": "function",
		"memberof": "Tone.Listener",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Sets the orientation of the listener using two vectors, the forward\n\t *  vector (which direction the listener is facing) and the up vector \n\t *  (which the up direction of the listener). An up vector\n\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t *  @param  {Number}  x\n\t *  @param  {Number}  y\n\t *  @param  {Number}  z\n\t *  @param  {Number}  upX\n\t *  @param  {Number}  upY\n\t *  @param  {Number}  upZ\n\t *  @return {Tone.Listener} this\n\t */",
		"meta": {
			"range": [
				3718,
				4504
			],
			"filename": "Listener.js",
			"lineno": 115,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020345",
				"name": "Tone.Listener.prototype.setOrientation",
				"type": "FunctionExpression",
				"paramnames": [
					"x",
					"y",
					"z",
					"upX",
					"upY",
					"upZ"
				]
			},
			"vars": {
				"now": "Tone.Listener#setOrientation~now",
				"this._orientation": "Tone.Listener#_orientation"
			}
		},
		"description": "Sets the orientation of the listener using two vectors, the forward\n vector (which direction the listener is facing) and the up vector \n (which the up direction of the listener). An up vector\n of 0, 0, 1 is equivalent to the listener standing up in the Z direction.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "x"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "y"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "z"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "upX"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "upY"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "upZ"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Listener"
					]
				},
				"description": "this"
			}
		],
		"name": "setOrientation",
		"longname": "Tone.Listener#setOrientation",
		"kind": "function",
		"memberof": "Tone.Listener",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The x position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionX\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 131,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The x position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "positionX",
		"longname": "Tone.Listener#positionX",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The y position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionY\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 147,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The y position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "positionY",
		"longname": "Tone.Listener#positionY",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The z position of the panner object.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name positionZ\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 163,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The z position of the panner object.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "positionZ",
		"longname": "Tone.Listener#positionZ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The x coordinate of the listeners front direction. i.e. \n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardX\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 179,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The x coordinate of the listeners front direction. i.e. \n which way they are facing.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "forwardX",
		"longname": "Tone.Listener#forwardX",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The y coordinate of the listeners front direction. i.e. \n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardY\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 196,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The y coordinate of the listeners front direction. i.e. \n which way they are facing.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "forwardY",
		"longname": "Tone.Listener#forwardY",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The z coordinate of the listeners front direction. i.e. \n\t *  which way they are facing.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name forwardZ\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 213,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The z coordinate of the listeners front direction. i.e. \n which way they are facing.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "forwardZ",
		"longname": "Tone.Listener#forwardZ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The x coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upX\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 230,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The x coordinate of the listener's up direction. i.e.\n the direction the listener is standing in.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "upX",
		"longname": "Tone.Listener#upX",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The y coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upY\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 247,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The y coordinate of the listener's up direction. i.e.\n the direction the listener is standing in.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "upY",
		"longname": "Tone.Listener#upY",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The z coordinate of the listener's up direction. i.e.\n\t *  the direction the listener is standing in.\n\t *  @type {Number}\n\t *  @memberOf Tone.Listener#\n\t *  @name upZ\n\t */",
		"meta": {
			"filename": "Listener.js",
			"lineno": 264,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The z coordinate of the listener's up direction. i.e.\n the direction the listener is standing in.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Listener",
		"name": "upZ",
		"longname": "Tone.Listener#upZ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Listener} this\n\t */",
		"meta": {
			"range": [
				8099,
				8215
			],
			"filename": "Listener.js",
			"lineno": 285,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100020902",
				"name": "Tone.Listener.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._orientation": "Tone.Listener#_orientation",
				"this._position": "Tone.Listener#_position"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Listener"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Listener#dispose",
		"kind": "function",
		"memberof": "Tone.Listener",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  A single master output which is connected to the\n\t *          AudioDestinationNode (aka your speakers). \n\t *          It provides useful conveniences such as the ability \n\t *          to set the volume and mute the entire application. \n\t *          It also gives you the ability to apply master effects to your application. \n\t *          <br><br>\n\t *          Like Tone.Transport, A single Tone.Master is created\n\t *          on initialization and you do not need to explicitly construct one.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @singleton\n\t *  @example\n\t * //the audio will go from the oscillator to the speakers\n\t * oscillator.connect(Tone.Master);\n\t * //a convenience for connecting to the master output is also provided:\n\t * oscillator.toMaster();\n\t * //the above two examples are equivalent.\n\t */",
		"meta": {
			"range": [
				940,
				1446
			],
			"filename": "Master.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021000",
				"name": "Tone.Master",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null
			}
		},
		"kind": "class",
		"classdesc": "A single master output which is connected to the\n         AudioDestinationNode (aka your speakers). \n         It provides useful conveniences such as the ability \n         to set the volume and mute the entire application. \n         It also gives you the ability to apply master effects to your application. \n         <br><br>\n         Like Tone.Transport, A single Tone.Master is created\n         on initialization and you do not need to explicitly construct one.",
		"augments": [
			"Tone"
		],
		"tags": [
			{
				"originalTitle": "singleton",
				"title": "singleton",
				"text": ""
			}
		],
		"examples": [
			"//the audio will go from the oscillator to the speakers\noscillator.connect(Tone.Master);\n//a convenience for connecting to the master output is also provided:\noscillator.toMaster();\n//the above two examples are equivalent."
		],
		"name": "Master",
		"longname": "Tone.Master",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */",
		"meta": {
			"range": [
				1282,
				1315
			],
			"filename": "Master.js",
			"lineno": 43,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021042",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the master output.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "volume",
		"longname": "Tone.Master#volume",
		"kind": "member",
		"memberof": "Tone.Master",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1520,
				1580
			],
			"filename": "Master.js",
			"lineno": 57,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021083",
				"name": "Tone.Master.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Master.defaults",
		"memberof": "Tone.Master",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1547,
				1559
			],
			"filename": "Master.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021090",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.Master.defaults.volume",
		"kind": "member",
		"memberof": "Tone.Master.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1563,
				1577
			],
			"filename": "Master.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021092",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Master.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Master.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Master#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * Tone.Master.mute = true;\n\t */",
		"meta": {
			"filename": "Master.js",
			"lineno": 62,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Master",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nTone.Master.mute = true;"
		],
		"longname": "Tone.Master#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t *  chained in the master effects chain. \n\t *  @param {AudioNode|Tone} args... All arguments will be connected in a row\n\t *                                  and the Master will be routed through it.\n\t *  @return  {Tone.Master}  this\n\t *  @example\n\t * //some overall compression to keep the levels in check\n\t * var masterCompressor = new Tone.Compressor({\n\t * \t\"threshold\" : -6,\n\t * \t\"ratio\" : 3,\n\t * \t\"attack\" : 0.5,\n\t * \t\"release\" : 0.1\n\t * });\n\t * //give a little boost to the lows\n\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t * //route everything through the filter \n\t * //and compressor before going to the speakers\n\t * Tone.Master.chain(lowBump, masterCompressor);\n\t */",
		"meta": {
			"range": [
				2699,
				2875
			],
			"filename": "Master.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021128",
				"name": "Tone.Master.prototype.chain",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n chained in the master effects chain.",
		"params": [
			{
				"type": {
					"names": [
						"AudioNode",
						"Tone"
					]
				},
				"description": "All arguments will be connected in a row\n                                 and the Master will be routed through it.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Master"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//some overall compression to keep the levels in check\nvar masterCompressor = new Tone.Compressor({\n\t\"threshold\" : -6,\n\t\"ratio\" : 3,\n\t\"attack\" : 0.5,\n\t\"release\" : 0.1\n});\n//give a little boost to the lows\nvar lowBump = new Tone.Filter(200, \"lowshelf\");\n//route everything through the filter \n//and compressor before going to the speakers\nTone.Master.chain(lowBump, masterCompressor);"
		],
		"name": "chain",
		"longname": "Tone.Master#chain",
		"kind": "function",
		"memberof": "Tone.Master",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Master}  this\n\t */",
		"meta": {
			"range": [
				2937,
				3119
			],
			"filename": "Master.js",
			"lineno": 110,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021173",
				"name": "Tone.Master.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._volume": "Tone.Master#_volume",
				"this.volume": "Tone.Master#volume"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Master"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Master#dispose",
		"kind": "function",
		"memberof": "Tone.Master",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t *  @returns {Tone} this\n\t *  @example\n\t * //connect an oscillator to the master output\n\t * var osc = new Tone.Oscillator().toMaster();\n\t */",
		"meta": {
			"range": [
				3536,
				3620
			],
			"filename": "Master.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021219",
				"name": "Tone.prototype.toMaster",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)",
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//connect an oscillator to the master output\nvar osc = new Tone.Oscillator().toMaster();"
		],
		"name": "toMaster",
		"longname": "Tone#toMaster",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  initialize the module and listen for new audio contexts\n\t */",
		"meta": {
			"range": [
				3900,
				3931
			],
			"filename": "Master.js",
			"lineno": 145,
			"columnno": 5,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021262",
				"name": "MasterConstructor",
				"type": "MemberExpression",
				"value": "Tone.Master"
			}
		},
		"description": "initialize the module and listen for new audio contexts",
		"name": "MasterConstructor",
		"longname": "<anonymous>~MasterConstructor",
		"kind": "member",
		"memberof": "<anonymous>",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "/**\n\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t *  to schedule events along the Transport. \n\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t *  @param  {Time}  duration     the amount of time to record for.\n\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t *  @example\n\t * //render 2 seconds of the oscillator\n\t * Tone.Offline(function(){\n\t * \t//only nodes created in this callback will be recorded\n\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t * \t//schedule their events\n\t * }, 2).then(function(buffer){\n\t * \t//do something with the output buffer\n\t * })\n\t * @example\n\t * //can also schedule events along the Transport\n\t * //using the passed in Offline Transport\n\t * Tone.Offline(function(Transport){\n\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t * \tTransport.schedule(function(time){\n\t * \t\tosc.start(time).stop(time + 0.1)\n\t * \t}, 1)\n\t * \tTransport.start(0.2)\n\t * }, 4).then(function(buffer){\n\t * \t//do something with the output buffer\n\t * })\n\t */",
		"meta": {
			"range": [
				1504,
				2085
			],
			"filename": "Offline.js",
			"lineno": 34,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021359",
				"name": "Tone.Offline",
				"type": "FunctionExpression",
				"paramnames": [
					"callback",
					"duration"
				]
			},
			"vars": {
				"sampleRate": "Tone.Offline~sampleRate",
				"originalContext": "Tone.Offline~originalContext",
				"context": "Tone.Offline~context",
				"Tone.context": "Tone.context",
				"rendered": "Tone.Offline~rendered",
				"": null
			}
		},
		"description": "Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n The callback function also passes in an offline instance of Tone.Transport which can be used\n to schedule events along the Transport.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the amount of time to record for.",
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				},
				"description": "The promise which is invoked with the Tone.Buffer of the recorded output."
			}
		],
		"examples": [
			"//render 2 seconds of the oscillator\nTone.Offline(function(){\n\t//only nodes created in this callback will be recorded\n\tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t//schedule their events\n}, 2).then(function(buffer){\n\t//do something with the output buffer\n})",
			"//can also schedule events along the Transport\n//using the passed in Offline Transport\nTone.Offline(function(Transport){\n\tvar osc = new Tone.Oscillator().toMaster()\n\tTransport.schedule(function(time){\n\t\tosc.start(time).stop(time + 0.1)\n\t}, 1)\n\tTransport.start(0.2)\n}, 4).then(function(buffer){\n\t//do something with the output buffer\n})"
		],
		"name": "Offline",
		"longname": "Tone.Offline",
		"kind": "function",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @class Wrapper around the OfflineAudioContext\n\t *  @extends {Tone.Context}\n\t *  @param  {Number}  channels  The number of channels to render\n\t *  @param  {Number}  duration  The duration to render in samples\n\t *  @param {Number} sampleRate the sample rate to render at\n\t */",
		"meta": {
			"range": [
				563,
				1226
			],
			"filename": "OfflineContext.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021468",
				"name": "Tone.OfflineContext",
				"type": "FunctionExpression",
				"paramnames": [
					"channels",
					"duration",
					"sampleRate"
				]
			},
			"vars": {
				"offlineContext": "Tone.OfflineContext~offlineContext",
				"this._duration": "Tone.OfflineContext#_duration",
				"this._currentTime": "Tone.OfflineContext#_currentTime"
			}
		},
		"kind": "class",
		"classdesc": "Wrapper around the OfflineAudioContext",
		"augments": [
			"Tone.Context"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The number of channels to render",
				"name": "channels"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The duration to render in samples",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "the sample rate to render at",
				"name": "sampleRate"
			}
		],
		"name": "OfflineContext",
		"longname": "Tone.OfflineContext",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Override the now method to point to the internal clock time\n\t *  @return  {Number}\n\t */",
		"meta": {
			"range": [
				1378,
				1456
			],
			"filename": "OfflineContext.js",
			"lineno": 57,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021530",
				"name": "Tone.OfflineContext.prototype.now",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Override the now method to point to the internal clock time",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				}
			}
		],
		"name": "now",
		"longname": "Tone.OfflineContext#now",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"overrides": "Tone.Context#now"
	},
	{
		"comment": "/**\n\t *  Render the output of the OfflineContext\n\t *  @return  {Promise}\n\t */",
		"meta": {
			"range": [
				1539,
				2003
			],
			"filename": "OfflineContext.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021545",
				"name": "Tone.OfflineContext.prototype.render",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._currentTime": "Tone.OfflineContext#_currentTime",
				"": null
			}
		},
		"description": "Render the output of the OfflineContext",
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				}
			}
		],
		"name": "render",
		"longname": "Tone.OfflineContext#render",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Close the context\n\t *  @return  {Number}\n\t */",
		"meta": {
			"range": [
				2063,
				2139
			],
			"filename": "OfflineContext.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021614",
				"name": "Tone.OfflineContext.prototype.close",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._context": "Tone.OfflineContext#_context"
			}
		},
		"description": "Close the context",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				}
			}
		],
		"name": "close",
		"longname": "Tone.OfflineContext#close",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t *         additional unit conversion functionality. It also\n\t *         serves as a base-class for classes which have a single,\n\t *         automatable parameter. \n\t *  @extends {Tone}\n\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t *  @param  {Tone.Type} units The units of the audio param.\n\t *  @param  {Boolean} convert If the param should be converted.\n\t */",
		"meta": {
			"range": [
				533,
				1459
			],
			"filename": "Param.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021648",
				"name": "Tone.Param",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Param~options",
				"this._param": "Tone.Param#_param",
				"this.input": "Tone.Param#input",
				"this.units": "Tone.Param#units",
				"this.convert": "Tone.Param#convert",
				"this.overridden": "Tone.Param#overridden",
				"this._lfo": "Tone.Param#_lfo",
				"this.value": "Tone.Param#value"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Param wraps the native Web Audio's AudioParam to provide\n        additional unit conversion functionality. It also\n        serves as a base-class for classes which have a single,\n        automatable parameter.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioParam"
					]
				},
				"description": "The parameter to wrap.",
				"name": "param"
			},
			{
				"type": {
					"names": [
						"Tone.Type"
					]
				},
				"description": "The units of the audio param.",
				"name": "units"
			},
			{
				"type": {
					"names": [
						"Boolean"
					]
				},
				"description": "If the param should be converted.",
				"name": "convert"
			}
		],
		"name": "Param",
		"longname": "Tone.Param",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.Param#units",
		"kind": "member",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.Param#convert",
		"kind": "member",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Defaults\n\t *  @type  {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1548,
				1647
			],
			"filename": "Param.js",
			"lineno": 69,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021759",
				"name": "Tone.Param.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "Defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Param.defaults",
		"memberof": "Tone.Param",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1574,
				1601
			],
			"filename": "Param.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021766",
				"name": "units",
				"type": "MemberExpression",
				"value": "Tone.Type.Default"
			}
		},
		"undocumented": true,
		"name": "units",
		"longname": "Tone.Param.defaults.units",
		"kind": "member",
		"memberof": "Tone.Param.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1605,
				1621
			],
			"filename": "Param.js",
			"lineno": 71,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021772",
				"name": "convert",
				"type": "Literal",
				"value": true
			}
		},
		"undocumented": true,
		"name": "convert",
		"longname": "Tone.Param.defaults.convert",
		"kind": "member",
		"memberof": "Tone.Param.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1625,
				1644
			],
			"filename": "Param.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021774",
				"name": "param",
				"type": "Identifier",
				"value": "undefined"
			}
		},
		"undocumented": true,
		"name": "param",
		"longname": "Tone.Param.defaults.param",
		"kind": "member",
		"memberof": "Tone.Param.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.Param",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.Param#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.Param#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.Param#setRampPoint",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.Param#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.Param#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.Param#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.Param#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.Param#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.Param#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.Param#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.Param#rampTo",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.Param",
		"name": "lfo",
		"longname": "Tone.Param#lfo",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				10776,
				10962
			],
			"filename": "Param.js",
			"lineno": 363,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022580",
				"name": "Tone.Param.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._param": "Tone.Param#_param",
				"this._lfo": "Tone.Param#_lfo"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Param#dispose",
		"kind": "function",
		"memberof": "Tone.Param",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class A Timeline class for scheduling and maintaining state\n\t *         along a timeline. All events must have a \"time\" property. \n\t *         Internally, events are stored in time order for fast \n\t *         retrieval.\n\t *  @extends {Tone}\n\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t */",
		"meta": {
			"range": [
				410,
				1044
			],
			"filename": "Timeline.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022643",
				"name": "Tone.Timeline",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Timeline~options",
				"this._timeline": "Tone.Timeline#_timeline",
				"this._toRemove": "Tone.Timeline#_toRemove",
				"this._iterating": "Tone.Timeline#_iterating",
				"this.memory": "Tone.Timeline#memory"
			}
		},
		"kind": "class",
		"classdesc": "A Timeline class for scheduling and maintaining state\n        along a timeline. All events must have a \"time\" property. \n        Internally, events are stored in time order for fast \n        retrieval.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"optional": true,
				"defaultvalue": "Infinity",
				"description": "The number of previous events that are retained.",
				"name": "memory"
			}
		],
		"name": "Timeline",
		"longname": "Tone.Timeline",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The memory of the timeline, i.e.\n\t\t *  how many events in the past it will retain\n\t\t *  @type {Positive}\n\t\t */",
		"meta": {
			"range": [
				1012,
				1040
			],
			"filename": "Timeline.js",
			"lineno": 44,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022687",
				"name": "this.memory",
				"type": "MemberExpression",
				"value": "options.memory",
				"paramnames": []
			}
		},
		"description": "The memory of the timeline, i.e.\n how many events in the past it will retain",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "memory",
		"longname": "Tone.Timeline#memory",
		"kind": "member",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1141,
				1192
			],
			"filename": "Timeline.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022703",
				"name": "Tone.Timeline.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Timeline.defaults",
		"memberof": "Tone.Timeline"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1170,
				1189
			],
			"filename": "Timeline.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022710",
				"name": "memory",
				"type": "Identifier",
				"value": "Infinity"
			}
		},
		"undocumented": true,
		"name": "memory",
		"longname": "Tone.Timeline.defaults.memory",
		"kind": "member",
		"memberof": "Tone.Timeline.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.Timeline#\n\t *  @name length\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Timeline.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of items in the timeline.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.Timeline",
		"name": "length",
		"readonly": true,
		"longname": "Tone.Timeline#length",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param  {Object}  event  The event object to insert into the \n\t *                           timeline. \n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				1691,
				2258
			],
			"filename": "Timeline.js",
			"lineno": 77,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022734",
				"name": "Tone.Timeline.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#add~index",
				"diff": "Tone.Timeline#add~diff"
			}
		},
		"description": "Insert an event object onto the timeline. Events must have a \"time\" attribute.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object to insert into the \n                          timeline.",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "add",
		"longname": "Tone.Timeline#add",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				2419,
				2666
			],
			"filename": "Timeline.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022827",
				"name": "Tone.Timeline.prototype.remove",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#remove~index"
			}
		},
		"description": "Remove an event from the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object to remove from the list.",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "remove",
		"longname": "Tone.Timeline#remove",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object set after that time.\n\t */",
		"meta": {
			"range": [
				2939,
				3182
			],
			"filename": "Timeline.js",
			"lineno": 119,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022880",
				"name": "Tone.Timeline.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#get~comparitor",
				"index": "Tone.Timeline#get~index"
			}
		},
		"description": "Get the nearest event whose time is less than or equal to the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object set after that time."
			}
		],
		"name": "get",
		"longname": "Tone.Timeline#get",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */",
		"meta": {
			"range": [
				3306,
				3379
			],
			"filename": "Timeline.js",
			"lineno": 133,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022926",
				"name": "Tone.Timeline.prototype.peek",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the first event in the timeline without removing it",
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The first event object"
			}
		],
		"name": "peek",
		"longname": "Tone.Timeline#peek",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the first event in the timeline and remove it\n\t *  @returns {Object} The first event object\n\t */",
		"meta": {
			"range": [
				3497,
				3576
			],
			"filename": "Timeline.js",
			"lineno": 141,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022943",
				"name": "Tone.Timeline.prototype.shift",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the first event in the timeline and remove it",
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The first event object"
			}
		],
		"name": "shift",
		"longname": "Tone.Timeline#shift",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object after the given time\n\t */",
		"meta": {
			"range": [
				3830,
				4103
			],
			"filename": "Timeline.js",
			"lineno": 151,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022961",
				"name": "Tone.Timeline.prototype.getAfter",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#getAfter~comparitor",
				"index": "Tone.Timeline#getAfter~index"
			}
		},
		"description": "Get the event which is scheduled after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object after the given time"
			}
		],
		"name": "getAfter",
		"longname": "Tone.Timeline#getAfter",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the event before the event at the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object before the given time\n\t */",
		"meta": {
			"range": [
				4353,
				4798
			],
			"filename": "Timeline.js",
			"lineno": 167,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023014",
				"name": "Tone.Timeline.prototype.getBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#getBefore~comparitor",
				"len": "Tone.Timeline#getBefore~len",
				"index": "Tone.Timeline#getBefore~index"
			}
		},
		"description": "Get the event before the event at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object before the given time"
			}
		],
		"name": "getBefore",
		"longname": "Tone.Timeline#getBefore",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel events after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				4935,
				5644
			],
			"filename": "Timeline.js",
			"lineno": 187,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023096",
				"name": "Tone.Timeline.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"index": "Tone.Timeline#cancel~index",
				"i": "Tone.Timeline#cancel~i",
				"this._timeline": "Tone.Timeline#_timeline"
			}
		},
		"description": "Cancel events after the given time",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Timeline#cancel",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				5803,
				6023
			],
			"filename": "Timeline.js",
			"lineno": 221,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023233",
				"name": "Tone.Timeline.prototype.cancelBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"index": "Tone.Timeline#cancelBefore~index",
				"this._timeline": "Tone.Timeline#_timeline"
			}
		},
		"description": "Cancel events before or equal to the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to cancel before.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelBefore",
		"longname": "Tone.Timeline#cancelBefore",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */",
		"meta": {
			"range": [
				6231,
				6419
			],
			"filename": "Timeline.js",
			"lineno": 236,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023281",
				"name": "Tone.Timeline.prototype.previousEvent",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#previousEvent~index"
			}
		},
		"description": "Returns the previous event if there is one. null otherwise",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event to find the previous one of",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event right before the given event"
			}
		],
		"name": "previousEvent",
		"longname": "Tone.Timeline#previousEvent",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				8951,
				9049
			],
			"filename": "Timeline.js",
			"lineno": 322,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023625",
				"name": "Tone.Timeline.prototype.forEach",
				"type": "FunctionExpression",
				"paramnames": [
					"callback"
				]
			}
		},
		"description": "Iterate over everything in the array",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEach",
		"longname": "Tone.Timeline#forEach",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				9308,
				9587
			],
			"filename": "Timeline.js",
			"lineno": 333,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023645",
				"name": "Tone.Timeline.prototype.forEachBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"upperBound": "Tone.Timeline#forEachBefore~upperBound"
			}
		},
		"description": "Iterate over everything in the array at or before the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachBefore",
		"longname": "Tone.Timeline#forEachBefore",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				9839,
				10087
			],
			"filename": "Timeline.js",
			"lineno": 348,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023682",
				"name": "Tone.Timeline.prototype.forEachAfter",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"lowerBound": "Tone.Timeline#forEachAfter~lowerBound"
			}
		},
		"description": "Iterate over everything in the array after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAfter",
		"longname": "Tone.Timeline#forEachAfter",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at or after the given time. Similar to \n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				10420,
				10816
			],
			"filename": "Timeline.js",
			"lineno": 362,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023714",
				"name": "Tone.Timeline.prototype.forEachFrom",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"lowerBound": "Tone.Timeline#forEachFrom~lowerBound"
			}
		},
		"description": "Iterate over everything in the array at or after the given time. Similar to \n forEachAfter, but includes the item(s) at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachFrom",
		"longname": "Tone.Timeline#forEachFrom",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				11064,
				11426
			],
			"filename": "Timeline.js",
			"lineno": 379,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023764",
				"name": "Tone.Timeline.prototype.forEachAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"upperBound": "Tone.Timeline#forEachAtTime~upperBound",
				"": null
			}
		},
		"description": "Iterate over everything in the array at the given time",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAtTime",
		"longname": "Tone.Timeline#forEachAtTime",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Timeline}  this\n\t */",
		"meta": {
			"range": [
				11491,
				11641
			],
			"filename": "Timeline.js",
			"lineno": 396,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023817",
				"name": "Tone.Timeline.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._timeline": "Tone.Timeline#_timeline",
				"this._toRemove": "Tone.Timeline#_toRemove"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Timeline#dispose",
		"kind": "function",
		"memberof": "Tone.Timeline",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t *          and <code>getValueAtTime(time)</code>.\n\t *\n\t *  @extends {Tone.Timeline}\n\t *  @param {String} initial The initial state of the TimelineState. \n\t *                          Defaults to <code>undefined</code>\n\t */",
		"meta": {
			"range": [
				429,
				600
			],
			"filename": "TimelineState.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023870",
				"name": "Tone.TimelineState",
				"type": "FunctionExpression",
				"paramnames": [
					"initial"
				]
			},
			"vars": {
				"this._initial": "Tone.TimelineState#_initial"
			}
		},
		"kind": "class",
		"classdesc": "A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n         and <code>getValueAtTime(time)</code>.",
		"augments": [
			"Tone.Timeline"
		],
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The initial state of the TimelineState. \n                         Defaults to <code>undefined</code>",
				"name": "initial"
			}
		],
		"name": "TimelineState",
		"longname": "Tone.TimelineState",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Returns the scheduled state scheduled before or at\n\t *  the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t */",
		"meta": {
			"range": [
				860,
				1040
			],
			"filename": "TimelineState.js",
			"lineno": 33,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023903",
				"name": "Tone.TimelineState.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"event": "Tone.TimelineState#getValueAtTime~event"
			}
		},
		"description": "Returns the scheduled state scheduled before or at\n the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the state input in setStateAtTime."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.TimelineState#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add a state to the timeline.\n\t *  @param  {String}  state The name of the state to set.\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.TimelineState} this\n\t */",
		"meta": {
			"range": [
				1235,
				1377
			],
			"filename": "TimelineState.js",
			"lineno": 48,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023937",
				"name": "Tone.TimelineState.prototype.setStateAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"state",
					"time"
				]
			}
		},
		"description": "Add a state to the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the state to set.",
				"name": "state"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineState"
					]
				},
				"description": "this"
			}
		],
		"name": "setStateAtTime",
		"longname": "Tone.TimelineState#setStateAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone is the base class of all other classes.\n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				430,
				449
			],
			"filename": "Tone.js",
			"lineno": 19,
			"columnno": 5,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023975",
				"name": "Tone",
				"type": "FunctionExpression"
			}
		},
		"kind": "class",
		"classdesc": "Tone is the base class of all other classes.",
		"name": "Tone",
		"longname": "<anonymous>~Tone",
		"memberof": "<anonymous>",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "/**\n\t *  @memberOf Tone#\n\t *  @returns {string} returns the name of the class as a string\n\t */",
		"meta": {
			"range": [
				549,
				854
			],
			"filename": "Tone.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023980",
				"name": "Tone.prototype.toString",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"className": "Tone#Tone#toString~className",
				"isLetter": "Tone#Tone#toString~isLetter",
				"sameConstructor": "Tone#Tone#toString~sameConstructor"
			}
		},
		"memberof": "Tone#Tone",
		"returns": [
			{
				"type": {
					"names": [
						"string"
					]
				},
				"description": "returns the name of the class as a string"
			}
		],
		"name": "toString",
		"longname": "Tone#Tone#toString",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @memberOf Tone#\n\t *  disconnect and dispose\n\t *  @returns {Tone} this\n\t */",
		"meta": {
			"range": [
				943,
				1271
			],
			"filename": "Tone.js",
			"lineno": 41,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024032",
				"name": "Tone.prototype.dispose",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"this.input": "Tone#\n disconnect and dispose.Tone#dispose#input",
				"this.output": "Tone#\n disconnect and dispose.Tone#dispose#output"
			}
		},
		"memberof": "Tone#\n disconnect and dispose",
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"name": "Tone#dispose",
		"longname": "Tone#\n disconnect and dispose.Tone#dispose",
		"kind": "function",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Set the parameters at once. Either pass in an\n\t *  object mapping parameters to values, or to set a\n\t *  single parameter, by passing in a string and value.\n\t *  The last argument is an optional ramp time which\n\t *  will ramp any signal values to their destination value\n\t *  over the duration of the rampTime.\n\t *  @param {Object|string} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t *  @example\n\t * //set values using an object\n\t * filter.set({\n\t * \t\"frequency\" : 300,\n\t * \t\"type\" : highpass\n\t * });\n\t *  @example\n\t * filter.set(\"type\", \"highpass\");\n\t *  @example\n\t * //ramp to the value 220 over 3 seconds.\n\t * oscillator.set({\n\t * \t\"frequency\" : 220\n\t * }, 3);\n\t */",
		"meta": {
			"range": [
				2189,
				3480
			],
			"filename": "Tone.js",
			"lineno": 87,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024103",
				"name": "Tone.prototype.set",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"params",
					"value",
					"rampTime"
				]
			},
			"vars": {
				"rampTime": "Tone#Tone#set~rampTime",
				"tmpObj": "Tone#Tone#set~tmpObj",
				"tmpObj[undefined]": "Tone#Tone#set~tmpObj.undefined]",
				"params": "Tone#Tone#set~params",
				"attr": "Tone#Tone#set~attr",
				"value": "Tone#Tone#set~value",
				"parent": "Tone#Tone#set~parent",
				"attrSplit": "Tone#Tone#set~attrSplit",
				"i": "Tone#Tone#set~i",
				"innerParam": "Tone#Tone#set~innerParam",
				"param": "Tone#Tone#set~param",
				"param.value": "Tone#Tone#set~param.value",
				"parent[undefined]": "Tone#Tone#set~parent.undefined]"
			}
		},
		"description": "Set the parameters at once. Either pass in an\n object mapping parameters to values, or to set a\n single parameter, by passing in a string and value.\n The last argument is an optional ramp time which\n will ramp any signal values to their destination value\n over the duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"string"
					]
				},
				"name": "params"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"name": "rampTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone#Tone",
		"examples": [
			"//set values using an object\nfilter.set({\n\t\"frequency\" : 300,\n\t\"type\" : highpass\n});\n ",
			"filter.set(\"type\", \"highpass\");\n ",
			"//ramp to the value 220 over 3 seconds.\noscillator.set({\n\t\"frequency\" : 220\n}, 3);"
		],
		"name": "set",
		"longname": "Tone#Tone#set",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the object's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @memberOf Tone#\n\t *  @example\n\t * osc.get();\n\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t *  @example\n\t * osc.get(\"type\");\n\t * //returns { \"type\" : \"sine\"}\n\t * @example\n\t * //use dot notation to access deep properties\n\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return\n\t *  \t\t\t\t\t                  all available.\n\t *  @returns {Object}\n\t */",
		"meta": {
			"range": [
				4301,
				5472
			],
			"filename": "Tone.js",
			"lineno": 160,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024350",
				"name": "Tone.prototype.get",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"params"
				]
			},
			"vars": {
				"params": "Tone#Tone#get~params",
				"ret": "Tone#Tone#get~ret",
				"i": "Tone#Tone#get~i",
				"attr": "Tone#Tone#get~attr",
				"parent": "Tone#Tone#get~parent",
				"subRet": "Tone#Tone#get~subRet",
				"attrSplit": "Tone#Tone#get~attrSplit",
				"j": "Tone#Tone#get~j",
				"subAttr": "Tone#Tone#get~subAttr",
				"subRet[undefined]": "Tone#Tone#get~subRet.undefined]",
				"param": "Tone#Tone#get~param"
			}
		},
		"description": "Get the object's attributes. Given no arguments get\n will return all available object properties and their corresponding\n values. Pass in a single attribute to retrieve or an array\n of attributes. The attribute strings can also include a \".\"\n to access deeper properties.",
		"memberof": "Tone#Tone",
		"examples": [
			"osc.get();\n//returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n ",
			"osc.get(\"type\");\n//returns { \"type\" : \"sine\"}",
			"//use dot notation to access deep properties\nsynth.get([\"envelope.attack\", \"envelope.release\"]);\n//returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n "
		],
		"params": [
			{
				"type": {
					"names": [
						"Array",
						"string",
						"undefined"
					]
				},
				"description": "the parameters to get, otherwise will return\n \t\t\t\t\t                  all available.",
				"name": "params"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				}
			}
		],
		"name": "get",
		"longname": "Tone#Tone#get",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @memberOf Tone\n\t *  @param  {Array}  values  The arguments array\n\t *  @param  {Array}  keys    The names of the arguments\n\t *  @param {Function|Object} constr The class constructor\n\t *  @return  {Object}  An object composed of the  defaults between the class' defaults\n\t *                        and the passed in arguments.\n\t */",
		"meta": {
			"range": [
				6621,
				7074
			],
			"filename": "Tone.js",
			"lineno": 234,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024692",
				"name": "Tone.defaults",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"values",
					"keys",
					"constr"
				]
			},
			"vars": {
				"options": "Tone.defaults~options",
				"i": "Tone.defaults~i",
				"options[undefined]": "Tone.defaults~options.undefined]"
			}
		},
		"memberof": "Tone",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The arguments array",
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The names of the arguments",
				"name": "keys"
			},
			{
				"type": {
					"names": [
						"function",
						"Object"
					]
				},
				"description": "The class constructor",
				"name": "constr"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "An object composed of the  defaults between the class' defaults\n                       and the passed in arguments."
			}
		],
		"name": "defaults",
		"longname": "Tone.defaults",
		"kind": "function",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				6675,
				6687
			],
			"filename": "Tone.js",
			"lineno": 235,
			"columnno": 6,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024702",
				"name": "options",
				"type": "ObjectExpression",
				"value": "{}"
			}
		},
		"undocumented": true,
		"name": "options",
		"longname": "Tone.defaults~options",
		"kind": "member",
		"memberof": "Tone.defaults",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "",
		"meta": {
			"range": [
				6748,
				6767
			],
			"filename": "Tone.js",
			"lineno": 237,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024721",
				"name": "options",
				"type": "MemberExpression",
				"funcscope": "Tone.defaults",
				"value": "values[0]",
				"paramnames": []
			}
		},
		"undocumented": true,
		"name": "options",
		"longname": "Tone.defaults~options",
		"kind": "member",
		"memberof": "Tone.defaults",
		"scope": "inner"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				6792,
				6797
			],
			"filename": "Tone.js",
			"lineno": 239,
			"columnno": 12,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024729",
				"name": "i",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "i",
		"longname": "Tone.defaults~i",
		"kind": "member",
		"memberof": "Tone.defaults",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "",
		"meta": {
			"range": [
				6826,
				6854
			],
			"filename": "Tone.js",
			"lineno": 240,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024741",
				"name": "options[undefined]",
				"type": "MemberExpression",
				"funcscope": "Tone.defaults",
				"value": "values[undefined]",
				"paramnames": []
			}
		},
		"undocumented": true,
		"name": "undefined]",
		"longname": "Tone.defaults~options.undefined]",
		"kind": "member",
		"memberof": "Tone.defaults~options",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  If the `given` parameter is undefined, use the `fallback`.\n\t *  If both `given` and `fallback` are object literals, it will\n\t *  return a deep copy which includes all of the parameters from both\n\t *  objects. If a parameter is undefined in given, it will return\n\t *  the fallback property.\n\t *  <br><br>\n\t *  WARNING: if object is self referential, it will go into an an\n\t *  infinite recursive loop.\n\t *  @memberOf Tone\n\t *  @param  {*} given\n\t *  @param  {*} fallback\n\t *  @return {*}\n\t */",
		"meta": {
			"range": [
				7580,
				8069
			],
			"filename": "Tone.js",
			"lineno": 266,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024787",
				"name": "Tone.defaultArg",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"given",
					"fallback"
				]
			},
			"vars": {
				"ret": "Tone.defaultArg~ret",
				"givenProp": "Tone.defaultArg~givenProp",
				"ret[undefined]": "Tone.defaultArg~ret.undefined]",
				"fallbackProp": "Tone.defaultArg~fallbackProp"
			}
		},
		"description": "If the `given` parameter is undefined, use the `fallback`.\n If both `given` and `fallback` are object literals, it will\n return a deep copy which includes all of the parameters from both\n objects. If a parameter is undefined in given, it will return\n the fallback property.\n <br><br>\n WARNING: if object is self referential, it will go into an an\n infinite recursive loop.",
		"memberof": "Tone",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"name": "given"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"name": "fallback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"*"
					]
				}
			}
		],
		"name": "defaultArg",
		"longname": "Tone.defaultArg",
		"kind": "function",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t *  @param  {Tone | AudioParam | AudioNode} unit\n\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t */",
		"meta": {
			"range": [
				8576,
				8855
			],
			"filename": "Tone.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024867",
				"name": "Tone.prototype.connect",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"unit",
					"outputNum",
					"inputNum"
				]
			},
			"vars": {
				"outputNum": "Tone#Tone#connect~outputNum"
			}
		},
		"description": "connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode",
		"params": [
			{
				"type": {
					"names": [
						"Tone",
						"AudioParam",
						"AudioNode"
					]
				},
				"name": "unit"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "optionally which output to connect from",
				"name": "outputNum"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "optionally which input to connect to",
				"name": "inputNum"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone#Tone",
		"name": "connect",
		"longname": "Tone#Tone#connect",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  disconnect the output\n\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t *                                   if the output is an array, or the\n\t *                                   node to disconnect from.\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t */",
		"meta": {
			"range": [
				9154,
				9542
			],
			"filename": "Tone.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024922",
				"name": "Tone.prototype.disconnect",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"destination",
					"outputNum",
					"inputNum"
				]
			},
			"vars": {
				"outputNum": "Tone#Tone#disconnect~outputNum"
			}
		},
		"description": "disconnect the output",
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"AudioNode"
					]
				},
				"description": "Either the output index to disconnect\n                                  if the output is an array, or the\n                                  node to disconnect from.",
				"name": "output"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone#Tone",
		"name": "disconnect",
		"longname": "Tone#Tone#disconnect",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Connect the output of this node to the rest of the nodes in series.\n\t *  @example\n\t *  //connect a node to an effect, panVol and then to the master output\n\t *  node.chain(effect, panVol, Tone.Master);\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t */",
		"meta": {
			"range": [
				9858,
				10073
			],
			"filename": "Tone.js",
			"lineno": 334,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100024995",
				"name": "Tone.prototype.chain",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"currentUnit": "Tone#Tone#chain~currentUnit",
				"i": "Tone#Tone#chain~i",
				"toUnit": "Tone#Tone#chain~toUnit"
			}
		},
		"description": "Connect the output of this node to the rest of the nodes in series.",
		"examples": [
			"//connect a node to an effect, panVol and then to the master output\n node.chain(effect, panVol, Tone.Master);\n "
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"Tone",
						"AudioNode"
					]
				},
				"name": "nodes"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone#Tone",
		"name": "chain",
		"longname": "Tone#Tone#chain",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  connect the output of this node to the rest of the nodes in parallel.\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone} this\n\t *  @memberOf Tone#\n\t */",
		"meta": {
			"range": [
				10258,
				10389
			],
			"filename": "Tone.js",
			"lineno": 350,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025039",
				"name": "Tone.prototype.fan",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"i": "Tone#Tone#fan~i"
			}
		},
		"description": "connect the output of this node to the rest of the nodes in parallel.",
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"Tone",
						"AudioNode"
					]
				},
				"name": "nodes"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone#Tone",
		"name": "fan",
		"longname": "Tone#Tone#fan",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  connect together all of the arguments in series\n\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t *  @returns {Tone}\n\t *  @memberOf Tone\n\t *  @static\n\t */",
		"meta": {
			"range": [
				10559,
				10780
			],
			"filename": "Tone.js",
			"lineno": 364,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025071",
				"name": "Tone.connectSeries",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			},
			"vars": {
				"currentUnit": "Tone.connectSeries~currentUnit",
				"i": "Tone.connectSeries~i",
				"toUnit": "Tone.connectSeries~toUnit"
			}
		},
		"description": "connect together all of the arguments in series",
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"Tone",
						"AudioNode"
					]
				},
				"name": "nodes"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				}
			}
		],
		"memberof": "Tone",
		"scope": "static",
		"name": "connectSeries",
		"longname": "Tone.connectSeries",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  test if the arg is undefined\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is undefined\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				11301,
				11370
			],
			"filename": "Tone.js",
			"lineno": 392,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025144",
				"name": "Tone.isUndef",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"val"
				]
			}
		},
		"description": "test if the arg is undefined",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is undefined"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isUndef",
		"longname": "Tone.isUndef",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  test if the arg is a function\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a function\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				11547,
				11618
			],
			"filename": "Tone.js",
			"lineno": 403,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025157",
				"name": "Tone.isFunction",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"val"
				]
			}
		},
		"description": "test if the arg is a function",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is a function"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isFunction",
		"longname": "Tone.isFunction",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the argument is a number.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a number\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				11797,
				11866
			],
			"filename": "Tone.js",
			"lineno": 414,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025170",
				"name": "Tone.isNumber",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the argument is a number.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is a number"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isNumber",
		"longname": "Tone.isNumber",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is an object literal.\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				12082,
				12215
			],
			"filename": "Tone.js",
			"lineno": 425,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025183",
				"name": "Tone.isObject",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the given argument is an object literal (i.e. `{}`);",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is an object literal."
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isObject",
		"longname": "Tone.isObject",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the argument is a boolean.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a boolean\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				12396,
				12467
			],
			"filename": "Tone.js",
			"lineno": 436,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025209",
				"name": "Tone.isBoolean",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the argument is a boolean.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is a boolean"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isBoolean",
		"longname": "Tone.isBoolean",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the argument is an Array\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is an array\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				12645,
				12708
			],
			"filename": "Tone.js",
			"lineno": 447,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025222",
				"name": "Tone.isArray",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the argument is an Array",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is an array"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isArray",
		"longname": "Tone.isArray",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the argument is a string.\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				12887,
				12956
			],
			"filename": "Tone.js",
			"lineno": 458,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025236",
				"name": "Tone.isString",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the argument is a string.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is a string"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isString",
		"longname": "Tone.isString",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Test if the argument is in the form of a note in scientific pitch notation.\n\t *  e.g. \"C4\"\n\t *  @param {*} arg the argument to test\n\t *  @returns {boolean} true if the arg is a string\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				13192,
				13303
			],
			"filename": "Tone.js",
			"lineno": 470,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025249",
				"name": "Tone.isNote",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"arg"
				]
			}
		},
		"description": "Test if the argument is in the form of a note in scientific pitch notation.\n e.g. \"C4\"",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "the argument to test",
				"name": "arg"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"boolean"
					]
				},
				"description": "true if the arg is a string"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "isNote",
		"longname": "Tone.isNote",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  An empty function.\n\t *  @static\n\t */",
		"meta": {
			"range": [
				13355,
				13379
			],
			"filename": "Tone.js",
			"lineno": 478,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025269",
				"name": "Tone.noOp",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			}
		},
		"description": "An empty function.",
		"scope": "static",
		"name": "noOp",
		"longname": "<anonymous>~Tone.noOp",
		"kind": "function",
		"memberof": "<anonymous>~Tone"
	},
	{
		"comment": "/**\n\t * Possible play states.\n\t * @enum {string}\n\t */",
		"meta": {
			"range": [
				14256,
				14341
			],
			"filename": "Tone.js",
			"lineno": 519,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025376",
				"name": "Tone.State",
				"type": "ObjectExpression",
				"funcscope": "<anonymous>",
				"value": "{\"Started\":\"started\",\"Stopped\":\"stopped\",\"Paused\":\"paused\"}",
				"paramnames": []
			}
		},
		"description": "Possible play states.",
		"kind": "member",
		"isEnum": true,
		"type": {
			"names": [
				"string"
			]
		},
		"name": "State",
		"longname": "<anonymous>~Tone.State",
		"memberof": "<anonymous>~Tone",
		"scope": "static",
		"properties": [
			{
				"comment": "",
				"meta": {
					"range": [
						14273,
						14292
					],
					"filename": "Tone.js",
					"lineno": 520,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
					"code": {
						"id": "astnode100025381",
						"name": "Started",
						"type": "Literal",
						"value": "started"
					}
				},
				"name": "Started",
				"longname": "<anonymous>~Tone.State.Started",
				"kind": "member",
				"memberof": "<anonymous>~Tone.State",
				"scope": "static",
				"type": {
					"names": [
						"string"
					]
				},
				"defaultvalue": "started"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						14296,
						14315
					],
					"filename": "Tone.js",
					"lineno": 521,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
					"code": {
						"id": "astnode100025383",
						"name": "Stopped",
						"type": "Literal",
						"value": "stopped"
					}
				},
				"name": "Stopped",
				"longname": "<anonymous>~Tone.State.Stopped",
				"kind": "member",
				"memberof": "<anonymous>~Tone.State",
				"scope": "static",
				"type": {
					"names": [
						"string"
					]
				},
				"defaultvalue": "stopped"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						14319,
						14336
					],
					"filename": "Tone.js",
					"lineno": 522,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
					"code": {
						"id": "astnode100025385",
						"name": "Paused",
						"type": "Literal",
						"value": "paused"
					}
				},
				"name": "Paused",
				"longname": "<anonymous>~Tone.State.Paused",
				"kind": "member",
				"memberof": "<anonymous>~Tone.State",
				"scope": "static",
				"type": {
					"names": [
						"string"
					]
				},
				"defaultvalue": "paused"
			}
		]
	},
	{
		"comment": "",
		"meta": {
			"range": [
				14273,
				14292
			],
			"filename": "Tone.js",
			"lineno": 520,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025381",
				"name": "Started",
				"type": "Literal",
				"value": "started"
			}
		},
		"name": "Started",
		"longname": "<anonymous>~Tone.State.Started",
		"kind": "member",
		"memberof": "<anonymous>~Tone.State",
		"scope": "static",
		"type": {
			"names": [
				"string"
			]
		},
		"defaultvalue": "started"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				14296,
				14315
			],
			"filename": "Tone.js",
			"lineno": 521,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025383",
				"name": "Stopped",
				"type": "Literal",
				"value": "stopped"
			}
		},
		"name": "Stopped",
		"longname": "<anonymous>~Tone.State.Stopped",
		"kind": "member",
		"memberof": "<anonymous>~Tone.State",
		"scope": "static",
		"type": {
			"names": [
				"string"
			]
		},
		"defaultvalue": "stopped"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				14319,
				14336
			],
			"filename": "Tone.js",
			"lineno": 522,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025385",
				"name": "Paused",
				"type": "Literal",
				"value": "paused"
			}
		},
		"name": "Paused",
		"longname": "<anonymous>~Tone.State.Paused",
		"kind": "member",
		"memberof": "<anonymous>~Tone.State",
		"scope": "static",
		"type": {
			"names": [
				"string"
			]
		},
		"defaultvalue": "paused"
	},
	{
		"comment": "/**\n\t *  Equal power gain scale. Good for cross-fading.\n\t *  @param  {NormalRange} percent (0-1)\n\t *  @return {Number}         output gain (0-1)\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				14700,
				14815
			],
			"filename": "Tone.js",
			"lineno": 536,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025388",
				"name": "Tone.equalPowerScale",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"percent"
				]
			},
			"vars": {
				"piFactor": "Tone.equalPowerScale~piFactor"
			}
		},
		"description": "Equal power gain scale. Good for cross-fading.",
		"params": [
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"description": "(0-1)",
				"name": "percent"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "output gain (0-1)"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "equalPowerScale",
		"longname": "Tone.equalPowerScale",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Convert decibels into gain.\n\t *  @param  {Decibels} db\n\t *  @return {Number}\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				14944,
				15007
			],
			"filename": "Tone.js",
			"lineno": 548,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025412",
				"name": "Tone.dbToGain",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"db"
				]
			}
		},
		"description": "Convert decibels into gain.",
		"params": [
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"name": "db"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				}
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "dbToGain",
		"longname": "Tone.dbToGain",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Convert gain to decibels.\n\t *  @param  {Number} gain (0-1)\n\t *  @return {Decibels}\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				15142,
				15222
			],
			"filename": "Tone.js",
			"lineno": 559,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025429",
				"name": "Tone.gainToDb",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"gain"
				]
			}
		},
		"description": "Convert gain to decibels.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "(0-1)",
				"name": "gain"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Decibels"
					]
				}
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "gainToDb",
		"longname": "Tone.gainToDb",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Convert an interval (in semitones) to a frequency ratio.\n\t *  @param  {Interval} interval the number of semitones above the base note\n\t *  @return {number}          the frequency ratio\n\t *  @static\n\t *  @memberOf Tone\n\t *  @example\n\t * tone.intervalToFrequencyRatio(0); // 1\n\t * tone.intervalToFrequencyRatio(12); // 2\n\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t */",
		"meta": {
			"range": [
				15607,
				15697
			],
			"filename": "Tone.js",
			"lineno": 574,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025449",
				"name": "Tone.intervalToFrequencyRatio",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"interval"
				]
			}
		},
		"description": "Convert an interval (in semitones) to a frequency ratio.",
		"params": [
			{
				"type": {
					"names": [
						"Interval"
					]
				},
				"description": "the number of semitones above the base note",
				"name": "interval"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "the frequency ratio"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"examples": [
			"tone.intervalToFrequencyRatio(0); // 1\ntone.intervalToFrequencyRatio(12); // 2\ntone.intervalToFrequencyRatio(-12); // 0.5"
		],
		"name": "intervalToFrequencyRatio",
		"longname": "Tone.intervalToFrequencyRatio",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  Return the current time of the AudioContext clock.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @memberOf Tone#\n\t */",
		"meta": {
			"range": [
				16014,
				16078
			],
			"filename": "Tone.js",
			"lineno": 587,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025466",
				"name": "Tone.prototype.now",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			}
		},
		"description": "Return the current time of the AudioContext clock.",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "the currentTime from the AudioContext"
			}
		],
		"memberof": "Tone#Tone",
		"name": "now",
		"longname": "Tone#Tone#now",
		"kind": "function",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the current time of the AudioContext clock.\n\t *  @return {Number} the currentTime from the AudioContext\n\t *  @static\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"range": [
				16241,
				16295
			],
			"filename": "Tone.js",
			"lineno": 597,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025482",
				"name": "Tone.now",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": []
			}
		},
		"description": "Return the current time of the AudioContext clock.",
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "the currentTime from the AudioContext"
			}
		],
		"scope": "static",
		"memberof": "Tone",
		"name": "now",
		"longname": "Tone.now",
		"kind": "function"
	},
	{
		"comment": "/**\n\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t *  to inherit the parent's properties, make sure to call\n\t *  Parent.call(this) in the child's constructor\n\t *\n\t *  based on closure library's inherit function\n\t *\n\t *  @memberOf Tone\n\t *  @static\n\t *  @param  {function} \tchild\n\t *  @param  {function=} parent (optional) parent to inherit from\n\t *                             if no parent is supplied, the child\n\t *                             will inherit from Tone\n\t */",
		"meta": {
			"range": [
				16965,
				17262
			],
			"filename": "Tone.js",
			"lineno": 619,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025496",
				"name": "Tone.extend",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"child",
					"parent"
				]
			},
			"vars": {
				"parent": "Tone.extend~parent",
				"TempConstructor": "Tone.extend~TempConstructor",
				"TempConstructor.prototype": "Tone.extend~TempConstructor.prototype",
				"child.prototype": null,
				"child.prototype.constructor": "child#constructor",
				"child._super": "child._super"
			}
		},
		"description": "have a child inherit all of Tone's (or a parent's) prototype\n to inherit the parent's properties, make sure to call\n Parent.call(this) in the child's constructor\n\n based on closure library's inherit function",
		"memberof": "Tone",
		"scope": "static",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"name": "child"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "(optional) parent to inherit from\n                            if no parent is supplied, the child\n                            will inherit from Tone",
				"name": "parent"
			}
		],
		"name": "extend",
		"longname": "Tone.extend",
		"kind": "function"
	},
	{
		"comment": "/** @override */",
		"meta": {
			"range": [
				17198,
				17233
			],
			"filename": "Tone.js",
			"lineno": 627,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025534",
				"name": "child.prototype.constructor",
				"type": "Identifier",
				"value": "child",
				"paramnames": []
			}
		},
		"override": true,
		"name": "constructor",
		"longname": "child#constructor",
		"kind": "member",
		"memberof": "child",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  A static pointer to the audio context accessible as Tone.context.\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 642,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "A static pointer to the audio context accessible as Tone.context.",
		"type": {
			"names": [
				"Tone.Context"
			]
		},
		"name": "context",
		"memberof": "Tone",
		"scope": "static",
		"longname": "Tone.context",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The AudioContext\n\t *  @type {Tone.Context}\n\t *  @name context\n\t *  @memberOf Tone#\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 663,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The AudioContext",
		"type": {
			"names": [
				"Tone.Context"
			]
		},
		"name": "context",
		"memberof": "Tone",
		"readonly": true,
		"longname": "Tone#context",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Tone automatically creates a context on init, but if you are working\n\t *  with other libraries which also create an AudioContext, it can be\n\t *  useful to set your own. If you are going to set your own context,\n\t *  be sure to do it at the start of your code, before creating any objects.\n\t *  @static\n\t *  @param {AudioContext} ctx The new audio context to set\n\t */",
		"meta": {
			"range": [
				18667,
				18724
			],
			"filename": "Tone.js",
			"lineno": 684,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025619",
				"name": "Tone.setContext",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"ctx"
				]
			},
			"vars": {
				"Tone.context": "<anonymous>~Tone.context"
			}
		},
		"description": "Tone automatically creates a context on init, but if you are working\n with other libraries which also create an AudioContext, it can be\n useful to set your own. If you are going to set your own context,\n be sure to do it at the start of your code, before creating any objects.",
		"scope": "static",
		"params": [
			{
				"type": {
					"names": [
						"AudioContext"
					]
				},
				"description": "The new audio context to set",
				"name": "ctx"
			}
		],
		"name": "setContext",
		"longname": "<anonymous>~Tone.setContext",
		"kind": "function",
		"memberof": "<anonymous>~Tone"
	},
	{
		"comment": "/**\n\t *  The number of inputs feeding into the AudioNode.\n\t *  For source nodes, this will be 0.\n\t *  @memberOf Tone#\n\t *  @type {Number}\n\t *  @name numberOfInputs\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 692,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of inputs feeding into the AudioNode.\n For source nodes, this will be 0.",
		"memberof": "Tone",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "numberOfInputs",
		"readonly": true,
		"longname": "Tone#numberOfInputs",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The number of outputs coming out of the AudioNode.\n\t *  @memberOf Tone#\n\t *  @type {Number}\n\t *  @name numberOfOutputs\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 714,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of outputs coming out of the AudioNode.",
		"memberof": "Tone",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "numberOfOutputs",
		"readonly": true,
		"longname": "Tone#numberOfOutputs",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The number of seconds of 1 processing block (128 samples)\n\t *  @type {Number}\n\t *  @name blockTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 735,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of seconds of 1 processing block (128 samples)",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "blockTime",
		"memberof": "Tone",
		"scope": "static",
		"readonly": true,
		"longname": "Tone.blockTime",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The duration in seconds of one sample.\n\t *  @type {Number}\n\t *  @name sampleTime\n\t *  @memberOf Tone\n\t *  @static\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 749,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The duration in seconds of one sample.",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "sampleTime",
		"memberof": "Tone",
		"scope": "static",
		"readonly": true,
		"longname": "Tone.sampleTime",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.\n\t *  @type {Boolean}\n\t *  @name supported\n\t *  @memberOf Tone\n\t *  @readOnly\n\t *  @static\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 763,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Whether or not all the technologies that Tone.js relies on are supported by the current browser.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "supported",
		"memberof": "Tone",
		"readonly": true,
		"scope": "static",
		"longname": "Tone.supported",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Boolean value if the audio context has been initialized.\n\t *  @type {Boolean}\n\t *  @memberOf Tone\n\t *  @static\n\t *  @name initialized\n\t */",
		"meta": {
			"filename": "Tone.js",
			"lineno": 780,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Boolean value if the audio context has been initialized.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"memberof": "Tone",
		"scope": "static",
		"name": "initialized",
		"longname": "Tone.initialized",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Get the context when it becomes available\n\t *  @param  {Function}  resolve  Callback when the context is initialized\n\t *  @return  {Tone}\n\t */",
		"meta": {
			"range": [
				21233,
				21503
			],
			"filename": "Tone.js",
			"lineno": 798,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025815",
				"name": "Tone.getContext",
				"type": "FunctionExpression",
				"funcscope": "<anonymous>",
				"paramnames": [
					"resolve"
				]
			},
			"vars": {
				"resCallback": "<anonymous>~Tone.getContext~resCallback",
				"": null
			}
		},
		"description": "Get the context when it becomes available",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "Callback when the context is initialized",
				"name": "resolve"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone"
					]
				}
			}
		],
		"name": "getContext",
		"longname": "<anonymous>~Tone.getContext",
		"kind": "function",
		"memberof": "<anonymous>~Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The version number\n\t * @type {String}\n\t * @static\n\t */",
		"meta": {
			"range": [
				21571,
				21595
			],
			"filename": "Tone.js",
			"lineno": 816,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025866",
				"name": "Tone.version",
				"type": "Literal",
				"funcscope": "<anonymous>",
				"value": "r11-dev",
				"paramnames": []
			}
		},
		"description": "The version number",
		"type": {
			"names": [
				"String"
			]
		},
		"scope": "static",
		"name": "version",
		"longname": "<anonymous>~Tone.version",
		"kind": "member",
		"memberof": "<anonymous>~Tone"
	},
	{
		"comment": "/**\n\t *  @class  Transport for timing musical events.\n\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t *          in the argument of the callback function. Pass that time value to the object\n\t *          you're scheduling. <br><br>\n\t *          A single transport is created for you when the library is initialized. \n\t *          <br><br>\n\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t *          called with the time of that event as the argument. \n\t *\n\t *  @extends {Tone.Emitter}\n\t *  @singleton\n\t *  @example\n\t * //repeated event every 8th note\n\t * Tone.Transport.scheduleRepeat(function(time){\n\t * \t//do something with the time\n\t * }, \"8n\");\n\t *  @example\n\t * //schedule an event on the 16th measure\n\t * Tone.Transport.schedule(function(time){\n\t * \t//do something with the time\n\t * }, \"16:0:0\");\n\t */",
		"meta": {
			"range": [
				1205,
				4496
			],
			"filename": "Transport.js",
			"lineno": 31,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025911",
				"name": "Tone.Transport",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Transport for timing musical events.\n         Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n         Tone.Transport timing events pass in the exact time of the scheduled event\n         in the argument of the callback function. Pass that time value to the object\n         you're scheduling. <br><br>\n         A single transport is created for you when the library is initialized. \n         <br><br>\n         The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n         called with the time of that event as the argument.",
		"augments": [
			"Tone.Emitter"
		],
		"tags": [
			{
				"originalTitle": "singleton",
				"title": "singleton",
				"text": ""
			}
		],
		"examples": [
			"//repeated event every 8th note\nTone.Transport.scheduleRepeat(function(time){\n\t//do something with the time\n}, \"8n\");\n ",
			"//schedule an event on the 16th measure\nTone.Transport.schedule(function(time){\n\t//do something with the time\n}, \"16:0:0\");"
		],
		"name": "Transport",
		"longname": "Tone.Transport",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */",
		"meta": {
			"range": [
				1537,
				1554
			],
			"filename": "Transport.js",
			"lineno": 45,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025935",
				"name": "this.loop",
				"type": "Literal",
				"value": false,
				"paramnames": []
			}
		},
		"description": "If the transport loops or not.",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "loop",
		"longname": "Tone.Transport#loop",
		"kind": "member",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */",
		"meta": {
			"range": [
				2645,
				2677
			],
			"filename": "Transport.js",
			"lineno": 94,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100025988",
				"name": "this.bpm",
				"type": "MemberExpression",
				"value": "this._clock.frequency",
				"paramnames": []
			}
		},
		"description": "The Beats Per Minute of the Transport.",
		"type": {
			"names": [
				"BPM"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"Tone.Transport.bpm.value = 80;\n//ramp the bpm to 120 over 10 seconds\nTone.Transport.bpm.rampTo(120, 10);"
		],
		"name": "bpm",
		"longname": "Tone.Transport#bpm",
		"kind": "member",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the defaults\n\t *  @type {Object}\n\t *  @const\n\t *  @static\n\t */",
		"meta": {
			"range": [
				4618,
				4783
			],
			"filename": "Transport.js",
			"lineno": 185,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026142",
				"name": "Tone.Transport.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":192}",
				"paramnames": []
			}
		},
		"description": "the defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"scope": "static",
		"name": "defaults",
		"longname": "Tone.Transport.defaults",
		"memberof": "Tone.Transport"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4648,
				4659
			],
			"filename": "Transport.js",
			"lineno": 186,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026149",
				"name": "bpm",
				"type": "Literal",
				"value": 120
			}
		},
		"undocumented": true,
		"name": "bpm",
		"longname": "Tone.Transport.defaults.bpm",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4663,
				4674
			],
			"filename": "Transport.js",
			"lineno": 187,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026151",
				"name": "swing",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "swing",
		"longname": "Tone.Transport.defaults.swing",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4678,
				4703
			],
			"filename": "Transport.js",
			"lineno": 188,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026153",
				"name": "swingSubdivision",
				"type": "Literal",
				"value": "8n"
			}
		},
		"undocumented": true,
		"name": "swingSubdivision",
		"longname": "Tone.Transport.defaults.swingSubdivision",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4707,
				4726
			],
			"filename": "Transport.js",
			"lineno": 189,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026155",
				"name": "timeSignature",
				"type": "Literal",
				"value": 4
			}
		},
		"undocumented": true,
		"name": "timeSignature",
		"longname": "Tone.Transport.defaults.timeSignature",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4730,
				4745
			],
			"filename": "Transport.js",
			"lineno": 190,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026157",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.Transport.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4749,
				4765
			],
			"filename": "Transport.js",
			"lineno": 191,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026159",
				"name": "loopEnd",
				"type": "Literal",
				"value": "4m"
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.Transport.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4769,
				4780
			],
			"filename": "Transport.js",
			"lineno": 192,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026161",
				"name": "PPQ",
				"type": "Literal",
				"value": 192
			}
		},
		"undocumented": true,
		"name": "PPQ",
		"longname": "Tone.Transport.defaults.PPQ",
		"kind": "member",
		"memberof": "Tone.Transport.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Schedule an event along the timeline.\n\t *  @param {Function} callback The callback to be invoked at the time.\n\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t *  @example\n\t * //trigger the callback when the Transport reaches the desired time\n\t * Tone.Transport.schedule(function(time){\n\t * \tenvelope.triggerAttack(time);\n\t * }, \"128i\");\n\t */",
		"meta": {
			"range": [
				7094,
				7405
			],
			"filename": "Transport.js",
			"lineno": 260,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026398",
				"name": "Tone.Transport.prototype.schedule",
				"type": "FunctionExpression",
				"paramnames": [
					"callback",
					"time"
				]
			},
			"vars": {
				"event": "Tone.Transport#schedule~event",
				"id": "Tone.Transport#schedule~id",
				"this._scheduledEvents[undefined]": "Tone.Transport#_scheduledEvents[undefined]"
			}
		},
		"description": "Schedule an event along the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to be invoked at the time.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"description": "The time to invoke the callback at.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The id of the event which can be used for canceling the event."
			}
		],
		"examples": [
			"//trigger the callback when the Transport reaches the desired time\nTone.Transport.schedule(function(time){\n\tenvelope.triggerAttack(time);\n}, \"128i\");"
		],
		"name": "schedule",
		"longname": "Tone.Transport#schedule",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedule a repeated event along the timeline. The event will fire\n\t *  at the `interval` starting at the `startTime` and for the specified\n\t *  `duration`. \n\t *  @param  {Function}  callback   The callback to invoke.\n\t *  @param  {Time}    interval   The duration between successive\n\t *                               callbacks.\n\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t *                               start being invoked.\n\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t *                           the event. \n\t *  @example\n\t * //a callback invoked every eighth note after the first measure\n\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t */",
		"meta": {
			"range": [
				8226,
				8807
			],
			"filename": "Transport.js",
			"lineno": 290,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026457",
				"name": "Tone.Transport.prototype.scheduleRepeat",
				"type": "FunctionExpression",
				"paramnames": [
					"callback",
					"interval",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"event": "Tone.Transport#scheduleRepeat~event",
				"id": "Tone.Transport#scheduleRepeat~id",
				"this._scheduledEvents[undefined]": "Tone.Transport#_scheduledEvents[undefined]"
			}
		},
		"description": "Schedule a repeated event along the timeline. The event will fire\n at the `interval` starting at the `startTime` and for the specified\n `duration`.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration between successive\n                              callbacks.",
				"name": "interval"
			},
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"description": "When along the timeline the events should\n                              start being invoked.",
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "Infinity",
				"description": "How long the event should repeat.",
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The ID of the scheduled event. Use this to cancel\n                          the event."
			}
		],
		"examples": [
			"//a callback invoked every eighth note after the first measure\nTone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");"
		],
		"name": "scheduleRepeat",
		"longname": "Tone.Transport#scheduleRepeat",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Schedule an event that will be removed after it is invoked. \n\t *  Note that if the given time is less than the current transport time, \n\t *  the event will be invoked immediately. \n\t *  @param {Function} callback The callback to invoke once.\n\t *  @param {TransportTime} time The time the callback should be invoked.\n\t *  @returns {Number} The ID of the scheduled event. \n\t */",
		"meta": {
			"range": [
				9197,
				9530
			],
			"filename": "Transport.js",
			"lineno": 317,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026544",
				"name": "Tone.Transport.prototype.scheduleOnce",
				"type": "FunctionExpression",
				"paramnames": [
					"callback",
					"time"
				]
			},
			"vars": {
				"id": "Tone.Transport#scheduleOnce~id",
				"event": "Tone.Transport#scheduleOnce~event",
				"this._scheduledEvents[undefined]": "Tone.Transport#_scheduledEvents[undefined]"
			}
		},
		"description": "Schedule an event that will be removed after it is invoked. \n Note that if the given time is less than the current transport time, \n the event will be invoked immediately.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke once.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"description": "The time the callback should be invoked.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The ID of the scheduled event."
			}
		],
		"name": "scheduleOnce",
		"longname": "Tone.Transport#scheduleOnce",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clear the passed in event id from the timeline\n\t *  @param {Number} eventId The id of the event.\n\t *  @returns {Tone.Transport} this\n\t */",
		"meta": {
			"range": [
				9682,
				9956
			],
			"filename": "Transport.js",
			"lineno": 337,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026605",
				"name": "Tone.Transport.prototype.clear",
				"type": "FunctionExpression",
				"paramnames": [
					"eventId"
				]
			},
			"vars": {
				"item": "Tone.Transport#clear~item"
			}
		},
		"description": "Clear the passed in event id from the timeline",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The id of the event.",
				"name": "eventId"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "clear",
		"longname": "Tone.Transport#clear",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove scheduled events from the timeline after\n\t *  the given time. Repeated events will be removed\n\t *  if their startTime is after the given time\n\t *  @param {TransportTime} [after=0] Clear all events after\n\t *                          this time. \n\t *  @returns {Tone.Transport} this\n\t */",
		"meta": {
			"range": [
				10262,
				10502
			],
			"filename": "Transport.js",
			"lineno": 354,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026659",
				"name": "Tone.Transport.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"after": "Tone.Transport#cancel~after"
			}
		},
		"description": "Remove scheduled events from the timeline after\n the given time. Repeated events will be removed\n if their startTime is after the given time",
		"params": [
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "Clear all events after\n                         this time.",
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Transport#cancel",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Transport#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 386,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Transport",
		"name": "state",
		"longname": "Tone.Transport#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Start the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should start.\n\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //start the transport in one second starting at beginning of the 5th measure. \n\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t */",
		"meta": {
			"range": [
				11908,
				12105
			],
			"filename": "Transport.js",
			"lineno": 408,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026835",
				"name": "Tone.Transport.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset"
				]
			},
			"vars": {
				"offset": "Tone.Transport#start~offset"
			}
		},
		"description": "Start the transport and all sources synced to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the transport should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"optional": true,
				"description": "The timeline offset to start the transport.",
				"name": "offset"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//start the transport in one second starting at beginning of the 5th measure. \nTone.Transport.start(\"+1\", \"4:0:0\");"
		],
		"name": "start",
		"longname": "Tone.Transport#start",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * Tone.Transport.stop();\n\t */",
		"meta": {
			"range": [
				12334,
				12425
			],
			"filename": "Transport.js",
			"lineno": 424,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026875",
				"name": "Tone.Transport.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the transport and all sources synced to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the transport should stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Transport.stop();"
		],
		"name": "stop",
		"longname": "Tone.Transport#stop",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Pause the transport and all sources synced to the transport.\n\t *  @param  {Time} [time=now]\n\t *  @returns {Tone.Transport} this\n\t */",
		"meta": {
			"range": [
				12572,
				12665
			],
			"filename": "Transport.js",
			"lineno": 434,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026897",
				"name": "Tone.Transport.prototype.pause",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Pause the transport and all sources synced to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "pause",
		"longname": "Tone.Transport#pause",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Toggle the current state of the transport. If it is\n\t * started, it will stop it, otherwise it will start the Transport.\n\t * @param  {Time=} time The time of the event\n\t * @return {Tone.Transport}      this\n\t */",
		"meta": {
			"range": [
				12890,
				13108
			],
			"filename": "Transport.js",
			"lineno": 445,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100026919",
				"name": "Tone.Transport.prototype.toggle",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Transport#toggle~time"
			}
		},
		"description": "Toggle the current state of the transport. If it is\nstarted, it will stop it, otherwise it will start the Transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The time of the event",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "toggle",
		"longname": "Tone.Transport#toggle",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The time signature as just the numerator over 4. \n\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t *  @memberOf Tone.Transport#\n\t *  @type {Number|Array}\n\t *  @name timeSignature\n\t *  @example\n\t * //common time\n\t * Tone.Transport.timeSignature = 4;\n\t * // 7/8\n\t * Tone.Transport.timeSignature = [7, 8];\n\t * //this will be reduced to a single number\n\t * Tone.Transport.timeSignature; //returns 3.5\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 459,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The time signature as just the numerator over 4. \n For example 4/4 would be just 4 and 6/8 would be 3.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"Number",
				"Array"
			]
		},
		"name": "timeSignature",
		"examples": [
			"//common time\nTone.Transport.timeSignature = 4;\n// 7/8\nTone.Transport.timeSignature = [7, 8];\n//this will be reduced to a single number\nTone.Transport.timeSignature; //returns 3.5"
		],
		"longname": "Tone.Transport#timeSignature",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {TransportTime}\n\t * @name loopStart\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 486,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "When the Tone.Transport.loop = true, this is the starting position of the loop.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopStart",
		"longname": "Tone.Transport#loopStart",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t * @memberOf Tone.Transport#\n\t * @type {TransportTime}\n\t * @name loopEnd\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 501,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "When the Tone.Transport.loop = true, this is the ending position of the loop.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.Transport#loopEnd",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Set the loop start and stop at the same time. \n\t *  @param {TransportTime} startPosition \n\t *  @param {TransportTime} endPosition   \n\t *  @returns {Tone.Transport} this\n\t *  @example\n\t * //loop over the first measure\n\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t * Tone.Transport.loop = true;\n\t */",
		"meta": {
			"range": [
				15119,
				15279
			],
			"filename": "Transport.js",
			"lineno": 526,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100027099",
				"name": "Tone.Transport.prototype.setLoopPoints",
				"type": "FunctionExpression",
				"paramnames": [
					"startPosition",
					"endPosition"
				]
			},
			"vars": {
				"this.loopStart": "Tone.Transport#loopStart",
				"this.loopEnd": "Tone.Transport#loopEnd"
			}
		},
		"description": "Set the loop start and stop at the same time.",
		"params": [
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"name": "startPosition"
			},
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"name": "endPosition"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//loop over the first measure\nTone.Transport.setLoopPoints(0, \"1m\");\nTone.Transport.loop = true;"
		],
		"name": "setLoopPoints",
		"longname": "Tone.Transport#setLoopPoints",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The swing value. Between 0-1 where 1 equal to \n\t *  the note + half the subdivision.\n\t *  @memberOf Tone.Transport#\n\t *  @type {NormalRange}\n\t *  @name swing\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 532,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The swing value. Between 0-1 where 1 equal to \n the note + half the subdivision.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "swing",
		"longname": "Tone.Transport#swing",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Set the subdivision which the swing will be applied to. \n\t *  The default value is an 8th note. Value must be less \n\t *  than a quarter note.\n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Time}\n\t *  @name swingSubdivision\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 549,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Set the subdivision which the swing will be applied to. \n The default value is an 8th note. Value must be less \n than a quarter note.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "swingSubdivision",
		"longname": "Tone.Transport#swingSubdivision",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t *  Setting the value will jump to that position right away. \n\t *  @memberOf Tone.Transport#\n\t *  @type {BarsBeatsSixteenths}\n\t *  @name position\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 567,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The Transport's position in Bars:Beats:Sixteenths.\n Setting the value will jump to that position right away.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"BarsBeatsSixteenths"
			]
		},
		"name": "position",
		"longname": "Tone.Transport#position",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The Transport's position in seconds\n\t *  Setting the value will jump to that position right away. \n\t *  @memberOf Tone.Transport#\n\t *  @type {Seconds}\n\t *  @name seconds\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 584,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The Transport's position in seconds\n Setting the value will jump to that position right away.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"Seconds"
			]
		},
		"name": "seconds",
		"longname": "Tone.Transport#seconds",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The Transport's loop position as a normalized value. Always\n\t *  returns 0 if the transport if loop is not true. \n\t *  @memberOf Tone.Transport#\n\t *  @name progress\n\t *  @type {NormalRange}\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 601,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The Transport's loop position as a normalized value. Always\n returns 0 if the transport if loop is not true.",
		"memberof": "Tone.Transport",
		"name": "progress",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"longname": "Tone.Transport#progress",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The transports current tick position.\n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Ticks}\n\t *  @name ticks\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 618,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The transports current tick position.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"Ticks"
			]
		},
		"name": "ticks",
		"longname": "Tone.Transport#ticks",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Pulses Per Quarter note. This is the smallest resolution\n\t *  the Transport timing supports. This should be set once\n\t *  on initialization and not set again. Changing this value \n\t *  after other objects have been created can cause problems. \n\t *  \n\t *  @memberOf Tone.Transport#\n\t *  @type {Number}\n\t *  @name PPQ\n\t */",
		"meta": {
			"filename": "Transport.js",
			"lineno": 645,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "Pulses Per Quarter note. This is the smallest resolution\n the Transport timing supports. This should be set once\n on initialization and not set again. Changing this value \n after other objects have been created can cause problems.",
		"memberof": "Tone.Transport",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "PPQ",
		"longname": "Tone.Transport#PPQ",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Returns the time aligned to the next subdivision\n\t *  of the Transport. If the Transport is not started,\n\t *  it will return 0.\n\t *  Note: this will not work precisely during tempo ramps.\n\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t *  @return  {Number}  The context time of the next subdivision.\n\t *  @example\n\t * Tone.Transport.start(); //the transport must be started\n\t * Tone.Transport.nextSubdivision(\"4n\");\n\t */",
		"meta": {
			"range": [
				19855,
				20335
			],
			"filename": "Transport.js",
			"lineno": 701,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100027498",
				"name": "Tone.Transport.prototype.nextSubdivision",
				"type": "FunctionExpression",
				"paramnames": [
					"subdivision"
				]
			},
			"vars": {
				"subdivision": "Tone.Transport#nextSubdivision~subdivision",
				"now": "Tone.Transport#nextSubdivision~now",
				"transportPos": "Tone.Transport#nextSubdivision~transportPos",
				"remainingTime": "Tone.Transport#nextSubdivision~remainingTime"
			}
		},
		"description": "Returns the time aligned to the next subdivision\n of the Transport. If the Transport is not started,\n it will return 0.\n Note: this will not work precisely during tempo ramps.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The subdivision to quantize to",
				"name": "subdivision"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The context time of the next subdivision."
			}
		],
		"examples": [
			"Tone.Transport.start(); //the transport must be started\nTone.Transport.nextSubdivision(\"4n\");"
		],
		"name": "nextSubdivision",
		"longname": "Tone.Transport#nextSubdivision",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Attaches the signal to the tempo control signal so that \n\t *  any changes in the tempo will change the signal in the same\n\t *  ratio. \n\t *  \n\t *  @param  {Tone.Signal} signal \n\t *  @param {number=} ratio Optionally pass in the ratio between\n\t *                         the two signals. Otherwise it will be computed\n\t *                         based on their current values. \n\t *  @returns {Tone.Transport} this\n\t */",
		"meta": {
			"range": [
				20766,
				21246
			],
			"filename": "Transport.js",
			"lineno": 729,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100027575",
				"name": "Tone.Transport.prototype.syncSignal",
				"type": "FunctionExpression",
				"paramnames": [
					"signal",
					"ratio"
				]
			},
			"vars": {
				"ratio": "Tone.Transport#syncSignal~ratio",
				"ratioSignal": "Tone.Transport#syncSignal~ratioSignal",
				"signal._param.value": "signal._param.value"
			}
		},
		"description": "Attaches the signal to the tempo control signal so that \n any changes in the tempo will change the signal in the same\n ratio.",
		"params": [
			{
				"type": {
					"names": [
						"Tone.Signal"
					]
				},
				"name": "signal"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "Optionally pass in the ratio between\n                        the two signals. Otherwise it will be computed\n                        based on their current values.",
				"name": "ratio"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "syncSignal",
		"longname": "Tone.Transport#syncSignal",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Unsyncs a previously synced signal from the transport's control. \n\t *  See Tone.Transport.syncSignal.\n\t *  @param  {Tone.Signal} signal \n\t *  @returns {Tone.Transport} this\n\t */",
		"meta": {
			"range": [
				21438,
				21802
			],
			"filename": "Transport.js",
			"lineno": 755,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100027669",
				"name": "Tone.Transport.prototype.unsyncSignal",
				"type": "FunctionExpression",
				"paramnames": [
					"signal"
				]
			},
			"vars": {
				"i": "Tone.Transport#unsyncSignal~i",
				"syncedSignal": "Tone.Transport#unsyncSignal~syncedSignal",
				"syncedSignal.signal._param.value": "Tone.Transport#unsyncSignal~syncedSignal.signal._param.value"
			}
		},
		"description": "Unsyncs a previously synced signal from the transport's control. \n See Tone.Transport.syncSignal.",
		"params": [
			{
				"type": {
					"names": [
						"Tone.Signal"
					]
				},
				"name": "signal"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Transport"
					]
				},
				"description": "this"
			}
		],
		"name": "unsyncSignal",
		"longname": "Tone.Transport#unsyncSignal",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t *         and depth.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t *  @example\n\t * //create an autofilter and start it's LFO\n\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t * //route an oscillator through the filter and start it\n\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t */",
		"meta": {
			"range": [
				886,
				2067
			],
			"filename": "AutoFilter.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100027931",
				"name": "Tone.AutoFilter",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.AutoFilter~options",
				"this._lfo": "Tone.AutoFilter#_lfo",
				"this.depth": "Tone.AutoFilter#depth",
				"this.frequency": "Tone.AutoFilter#frequency",
				"this.filter": "Tone.AutoFilter#filter",
				"this._octaves": "Tone.AutoFilter#_octaves",
				"this.type": "Tone.AutoFilter#type",
				"this.octaves": "Tone.AutoFilter#octaves",
				"this.baseFrequency": "Tone.AutoFilter#baseFrequency"
			}
		},
		"kind": "class",
		"classdesc": "Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n        Setting the LFO rate and depth allows for control over the filter modulation rate \n        and depth.",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The rate of the LFO.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The lower value of the LFOs oscillation",
				"name": "baseFrequency"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The number of octaves above the baseFrequency",
				"name": "octaves"
			}
		],
		"examples": [
			"//create an autofilter and start it's LFO\nvar autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n//route an oscillator through the filter and start it\nvar oscillator = new Tone.Oscillator().connect(autoFilter).start();"
		],
		"name": "AutoFilter",
		"longname": "Tone.AutoFilter",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The range of the filter modulating between the min and max frequency. \n\t\t * 0 = no modulation. 1 = full modulation.\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1427,
				1459
			],
			"filename": "AutoFilter.js",
			"lineno": 42,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100027980",
				"name": "this.depth",
				"type": "MemberExpression",
				"value": "this._lfo.amplitude",
				"paramnames": []
			}
		},
		"description": "The range of the filter modulating between the min and max frequency. \n0 = no modulation. 1 = full modulation.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "depth",
		"longname": "Tone.AutoFilter#depth",
		"kind": "member",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * How fast the filter modulates between min and max. \n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1569,
				1605
			],
			"filename": "AutoFilter.js",
			"lineno": 49,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100027990",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._lfo.frequency",
				"paramnames": []
			}
		},
		"description": "How fast the filter modulates between min and max.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.AutoFilter#frequency",
		"kind": "member",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The filter node\n\t\t *  @type {Tone.Filter}\n\t\t */",
		"meta": {
			"range": [
				1670,
				1715
			],
			"filename": "AutoFilter.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028000",
				"name": "this.filter",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The filter node",
		"type": {
			"names": [
				"Tone.Filter"
			]
		},
		"name": "filter",
		"longname": "Tone.AutoFilter#filter",
		"kind": "member",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  defaults\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2190,
				2392
			],
			"filename": "AutoFilter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028081",
				"name": "Tone.AutoFilter.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "defaults",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.AutoFilter.defaults",
		"kind": "member",
		"memberof": "Tone.AutoFilter"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2221,
				2236
			],
			"filename": "AutoFilter.js",
			"lineno": 82,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028088",
				"name": "frequency",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.AutoFilter.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2240,
				2255
			],
			"filename": "AutoFilter.js",
			"lineno": 83,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028090",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.AutoFilter.defaults.type",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2259,
				2270
			],
			"filename": "AutoFilter.js",
			"lineno": 84,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028092",
				"name": "depth",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "depth",
		"longname": "Tone.AutoFilter.defaults.depth",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2274,
				2295
			],
			"filename": "AutoFilter.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028094",
				"name": "baseFrequency",
				"type": "Literal",
				"value": 200
			}
		},
		"undocumented": true,
		"name": "baseFrequency",
		"longname": "Tone.AutoFilter.defaults.baseFrequency",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2299,
				2314
			],
			"filename": "AutoFilter.js",
			"lineno": 86,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028096",
				"name": "octaves",
				"type": "Literal",
				"value": 2.6
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.AutoFilter.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2318,
				2389
			],
			"filename": "AutoFilter.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028098",
				"name": "filter",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}"
			}
		},
		"undocumented": true,
		"name": "filter",
		"longname": "Tone.AutoFilter.defaults.filter",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2334,
				2352
			],
			"filename": "AutoFilter.js",
			"lineno": 88,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028100",
				"name": "type",
				"type": "Literal",
				"value": "lowpass"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.AutoFilter.defaults.filter.type",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2357,
				2372
			],
			"filename": "AutoFilter.js",
			"lineno": 89,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028102",
				"name": "rolloff",
				"type": "UnaryExpression",
				"value": -12
			}
		},
		"undocumented": true,
		"name": "rolloff",
		"longname": "Tone.AutoFilter.defaults.filter.rolloff",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2377,
				2384
			],
			"filename": "AutoFilter.js",
			"lineno": 90,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028105",
				"name": "Q",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.AutoFilter.defaults.filter.Q",
		"kind": "member",
		"memberof": "Tone.AutoFilter.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Start the effect.\n\t * @param {Time} [time=now] When the LFO will start. \n\t * @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				2520,
				2612
			],
			"filename": "AutoFilter.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028108",
				"name": "Tone.AutoFilter.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the effect.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the LFO will start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.AutoFilter#start",
		"kind": "function",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Stop the effect.\n\t * @param {Time} [time=now] When the LFO will stop. \n\t * @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				2737,
				2827
			],
			"filename": "AutoFilter.js",
			"lineno": 109,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028130",
				"name": "Tone.AutoFilter.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the effect.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the LFO will stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.AutoFilter#stop",
		"kind": "function",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Sync the filter to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                               Transport has started. \n\t * @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				3049,
				3141
			],
			"filename": "AutoFilter.js",
			"lineno": 120,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028152",
				"name": "Tone.AutoFilter.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": [
					"delay"
				]
			}
		},
		"description": "Sync the filter to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "Delay time before starting the effect after the\n                              Transport has started.",
				"name": "delay"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "sync",
		"longname": "Tone.AutoFilter#sync",
		"kind": "function",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Unsync the filter from the transport.\n\t * @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				3233,
				3319
			],
			"filename": "AutoFilter.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028174",
				"name": "Tone.AutoFilter.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Unsync the filter from the transport.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.AutoFilter#unsync",
		"kind": "function",
		"memberof": "Tone.AutoFilter",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Type of oscillator attached to the AutoFilter. \n\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t * @memberOf Tone.AutoFilter#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "AutoFilter.js",
			"lineno": 134,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Type of oscillator attached to the AutoFilter. \nPossible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".",
		"memberof": "Tone.AutoFilter",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.AutoFilter#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The minimum value of the filter's cutoff frequency.\n\t * @memberOf Tone.AutoFilter#\n\t * @type {Frequency}\n\t * @name min\n\t */",
		"meta": {
			"filename": "AutoFilter.js",
			"lineno": 150,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The minimum value of the filter's cutoff frequency.",
		"memberof": "Tone.AutoFilter",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"name": "min",
		"longname": "Tone.AutoFilter#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The maximum value of the filter's cutoff frequency. \n\t * @memberOf Tone.AutoFilter#\n\t * @type {Positive}\n\t * @name octaves\n\t */",
		"meta": {
			"filename": "AutoFilter.js",
			"lineno": 167,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The maximum value of the filter's cutoff frequency.",
		"memberof": "Tone.AutoFilter",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "octaves",
		"longname": "Tone.AutoFilter#octaves",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				4495,
				4782
			],
			"filename": "AutoFilter.js",
			"lineno": 187,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028318",
				"name": "Tone.AutoFilter.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._lfo": "Tone.AutoFilter#_lfo",
				"this.filter": "Tone.AutoFilter#filter",
				"this.frequency": "Tone.AutoFilter#frequency",
				"this.depth": "Tone.AutoFilter#depth"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AutoFilter#dispose",
		"kind": "function",
		"memberof": "Tone.AutoFilter",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t *  @example\n\t * //create an autopanner and start it's LFO\n\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t * //route an oscillator through the panner and start it\n\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t */",
		"meta": {
			"range": [
				733,
				1746
			],
			"filename": "AutoPanner.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028408",
				"name": "Tone.AutoPanner",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.AutoPanner~options",
				"this._lfo": "Tone.AutoPanner#_lfo",
				"this.depth": "Tone.AutoPanner#depth",
				"this._panner": "Tone.AutoPanner#_panner",
				"this.frequency": "Tone.AutoPanner#frequency",
				"this.type": "Tone.AutoPanner#type"
			}
		},
		"kind": "class",
		"classdesc": "Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n        More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "Rate of left-right oscillation.",
				"name": "frequency"
			}
		],
		"examples": [
			"//create an autopanner and start it's LFO\nvar autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n//route an oscillator through the panner and start it\nvar oscillator = new Tone.Oscillator().connect(autoPanner).start();"
		],
		"name": "AutoPanner",
		"longname": "Tone.AutoPanner",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The amount of panning between left and right. \n\t\t * 0 = always center. 1 = full range between left and right. \n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1264,
				1296
			],
			"filename": "AutoPanner.js",
			"lineno": 41,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028460",
				"name": "this.depth",
				"type": "MemberExpression",
				"value": "this._lfo.amplitude",
				"paramnames": []
			}
		},
		"description": "The amount of panning between left and right. \n0 = always center. 1 = full range between left and right.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "depth",
		"longname": "Tone.AutoPanner#depth",
		"kind": "member",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * How fast the panner modulates between left and right. \n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1544,
				1580
			],
			"filename": "AutoPanner.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028479",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._lfo.frequency",
				"paramnames": []
			}
		},
		"description": "How fast the panner modulates between left and right.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.AutoPanner#frequency",
		"kind": "member",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  defaults\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1869,
				1952
			],
			"filename": "AutoPanner.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028536",
				"name": "Tone.AutoPanner.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "defaults",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.AutoPanner.defaults",
		"kind": "member",
		"memberof": "Tone.AutoPanner"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1900,
				1915
			],
			"filename": "AutoPanner.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028543",
				"name": "frequency",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.AutoPanner.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.AutoPanner.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1919,
				1934
			],
			"filename": "AutoPanner.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028545",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.AutoPanner.defaults.type",
		"kind": "member",
		"memberof": "Tone.AutoPanner.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1938,
				1949
			],
			"filename": "AutoPanner.js",
			"lineno": 75,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028547",
				"name": "depth",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "depth",
		"longname": "Tone.AutoPanner.defaults.depth",
		"kind": "member",
		"memberof": "Tone.AutoPanner.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Start the effect.\n\t * @param {Time} [time=now] When the LFO will start. \n\t * @returns {Tone.AutoPanner} this\n\t */",
		"meta": {
			"range": [
				2080,
				2172
			],
			"filename": "AutoPanner.js",
			"lineno": 83,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028550",
				"name": "Tone.AutoPanner.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the effect.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the LFO will start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoPanner"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.AutoPanner#start",
		"kind": "function",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Stop the effect.\n\t * @param {Time} [time=now] When the LFO will stop. \n\t * @returns {Tone.AutoPanner} this\n\t */",
		"meta": {
			"range": [
				2296,
				2386
			],
			"filename": "AutoPanner.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028572",
				"name": "Tone.AutoPanner.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the effect.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the LFO will stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoPanner"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.AutoPanner#stop",
		"kind": "function",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Sync the panner to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                               Transport has started. \n\t * @returns {Tone.AutoPanner} this\n\t */",
		"meta": {
			"range": [
				2608,
				2700
			],
			"filename": "AutoPanner.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028594",
				"name": "Tone.AutoPanner.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": [
					"delay"
				]
			}
		},
		"description": "Sync the panner to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "Delay time before starting the effect after the\n                              Transport has started.",
				"name": "delay"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoPanner"
					]
				},
				"description": "this"
			}
		],
		"name": "sync",
		"longname": "Tone.AutoPanner#sync",
		"kind": "function",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Unsync the panner from the transport\n\t * @returns {Tone.AutoPanner} this\n\t */",
		"meta": {
			"range": [
				2791,
				2877
			],
			"filename": "AutoPanner.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028616",
				"name": "Tone.AutoPanner.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Unsync the panner from the transport",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoPanner"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.AutoPanner#unsync",
		"kind": "function",
		"memberof": "Tone.AutoPanner",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Type of oscillator attached to the AutoFilter. \n\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t * @memberOf Tone.AutoFilter#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "AutoPanner.js",
			"lineno": 118,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Type of oscillator attached to the AutoFilter. \nPossible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".",
		"memberof": "Tone.AutoFilter",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.AutoFilter#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.AutoPanner} this\n\t */",
		"meta": {
			"range": [
				3303,
				3592
			],
			"filename": "AutoPanner.js",
			"lineno": 138,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028669",
				"name": "Tone.AutoPanner.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._lfo": "Tone.AutoPanner#_lfo",
				"this._panner": "Tone.AutoPanner#_panner",
				"this.frequency": "Tone.AutoPanner#frequency",
				"this.depth": "Tone.AutoPanner#depth"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoPanner"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AutoPanner#dispose",
		"kind": "function",
		"memberof": "Tone.AutoPanner",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t *          The frequency of the filter is adjusted proportionally to the \n\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t *                                            to at the low point of the wah\n\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t *                                the filter will sweep to when fully open\n\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t *                                   the incoming signal. Normal range of -40 to 0. \n\t *  @example\n\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t * //initialize the synth and connect to autowah\n\t * var synth = new Synth.connect(autoWah);\n\t * //Q value influences the effect of the wah - default is 2\n\t * autoWah.Q.value = 6;\n\t * //more audible on higher notes\n\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t */",
		"meta": {
			"range": [
				1295,
				3112
			],
			"filename": "AutoWah.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028760",
				"name": "Tone.AutoWah",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.AutoWah~options",
				"this.follower": "Tone.AutoWah#follower",
				"this._sweepRange": "Tone.AutoWah#_sweepRange",
				"this._baseFrequency": "Tone.AutoWah#_baseFrequency",
				"this._octaves": "Tone.AutoWah#_octaves",
				"this._inputBoost": "Tone.AutoWah#_inputBoost",
				"this._bandpass": "Tone.AutoWah#_bandpass",
				"this._peaking": "Tone.AutoWah#_peaking",
				"this._peaking.gain.value": "Tone.AutoWah#_peaking.gain.value",
				"this.gain": "Tone.AutoWah#gain",
				"this.Q": "Tone.AutoWah#Q",
				"this.sensitivity": "Tone.AutoWah#sensitivity"
			}
		},
		"kind": "class",
		"classdesc": "Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n         The frequency of the filter is adjusted proportionally to the \n         incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "The frequency the filter is set \n                                           to at the low point of the wah",
				"name": "baseFrequency"
			},
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"optional": true,
				"description": "The number of octaves above the baseFrequency\n                               the filter will sweep to when fully open",
				"name": "octaves"
			},
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"optional": true,
				"description": "The decibel threshold sensitivity for \n                                  the incoming signal. Normal range of -40 to 0.",
				"name": "sensitivity"
			}
		],
		"examples": [
			"var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n//initialize the synth and connect to autowah\nvar synth = new Synth.connect(autoWah);\n//Q value influences the effect of the wah - default is 2\nautoWah.Q.value = 6;\n//more audible on higher notes\nsynth.triggerAttackRelease(\"C4\", \"8n\")"
		],
		"name": "AutoWah",
		"longname": "Tone.AutoWah",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The gain of the filter.\n\t\t * @type {Number}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				2533,
				2563
			],
			"filename": "AutoWah.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028882",
				"name": "this.gain",
				"type": "MemberExpression",
				"value": "this._peaking.gain",
				"paramnames": []
			}
		},
		"description": "The gain of the filter.",
		"type": {
			"names": [
				"Number"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "gain",
		"longname": "Tone.AutoWah#gain",
		"kind": "member",
		"memberof": "Tone.AutoWah",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The quality of the filter.\n\t\t * @type {Positive}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				2647,
				2672
			],
			"filename": "AutoWah.js",
			"lineno": 97,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028892",
				"name": "this.Q",
				"type": "MemberExpression",
				"value": "this._bandpass.Q",
				"paramnames": []
			}
		},
		"description": "The quality of the filter.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "Q",
		"longname": "Tone.AutoWah#Q",
		"kind": "member",
		"memberof": "Tone.AutoWah",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3201,
				3376
			],
			"filename": "AutoWah.js",
			"lineno": 118,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028990",
				"name": "Tone.AutoWah.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.AutoWah.defaults",
		"kind": "member",
		"memberof": "Tone.AutoWah"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3229,
				3250
			],
			"filename": "AutoWah.js",
			"lineno": 119,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028997",
				"name": "baseFrequency",
				"type": "Literal",
				"value": 100
			}
		},
		"undocumented": true,
		"name": "baseFrequency",
		"longname": "Tone.AutoWah.defaults.baseFrequency",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3254,
				3267
			],
			"filename": "AutoWah.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100028999",
				"name": "octaves",
				"type": "Literal",
				"value": 6
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.AutoWah.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3271,
				3288
			],
			"filename": "AutoWah.js",
			"lineno": 121,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029001",
				"name": "sensitivity",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "sensitivity",
		"longname": "Tone.AutoWah.defaults.sensitivity",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3292,
				3299
			],
			"filename": "AutoWah.js",
			"lineno": 122,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029003",
				"name": "Q",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.AutoWah.defaults.Q",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3303,
				3313
			],
			"filename": "AutoWah.js",
			"lineno": 123,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029005",
				"name": "gain",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "gain",
		"longname": "Tone.AutoWah.defaults.gain",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3317,
				3373
			],
			"filename": "AutoWah.js",
			"lineno": 124,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029007",
				"name": "follower",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "follower",
		"longname": "Tone.AutoWah.defaults.follower",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3335,
				3349
			],
			"filename": "AutoWah.js",
			"lineno": 125,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029009",
				"name": "attack",
				"type": "Literal",
				"value": 0.3
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.AutoWah.defaults.follower.attack",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults.follower",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3354,
				3369
			],
			"filename": "AutoWah.js",
			"lineno": 126,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029011",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.AutoWah.defaults.follower.release",
		"kind": "member",
		"memberof": "Tone.AutoWah.defaults.follower",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The number of octaves that the filter will sweep above the \n\t * baseFrequency. \n\t * @memberOf Tone.AutoWah#\n\t * @type {Number}\n\t * @name octaves\n\t */",
		"meta": {
			"filename": "AutoWah.js",
			"lineno": 130,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The number of octaves that the filter will sweep above the \nbaseFrequency.",
		"memberof": "Tone.AutoWah",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "octaves",
		"longname": "Tone.AutoWah#octaves",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The base frequency from which the sweep will start from.\n\t * @memberOf Tone.AutoWah#\n\t * @type {Frequency}\n\t * @name baseFrequency\n\t */",
		"meta": {
			"filename": "AutoWah.js",
			"lineno": 147,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The base frequency from which the sweep will start from.",
		"memberof": "Tone.AutoWah",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"name": "baseFrequency",
		"longname": "Tone.AutoWah#baseFrequency",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The sensitivity to control how responsive to the input signal the filter is. \n\t * @memberOf Tone.AutoWah#\n\t * @type {Decibels}\n\t * @name sensitivity\n\t */",
		"meta": {
			"filename": "AutoWah.js",
			"lineno": 163,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The sensitivity to control how responsive to the input signal the filter is.",
		"memberof": "Tone.AutoWah",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"name": "sensitivity",
		"longname": "Tone.AutoWah#sensitivity",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.AutoWah} this\n\t */",
		"meta": {
			"range": [
				4862,
				5307
			],
			"filename": "AutoWah.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029182",
				"name": "Tone.AutoWah.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.follower": "Tone.AutoWah#follower",
				"this._sweepRange": "Tone.AutoWah#_sweepRange",
				"this._bandpass": "Tone.AutoWah#_bandpass",
				"this._peaking": "Tone.AutoWah#_peaking",
				"this._inputBoost": "Tone.AutoWah#_inputBoost",
				"this.gain": "Tone.AutoWah#gain",
				"this.Q": "Tone.AutoWah#Q"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoWah"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AutoWah#dispose",
		"kind": "function",
		"memberof": "Tone.AutoWah",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t *                       of 1 to 8. \n\t *  @example\n\t * //initialize crusher and route a synth through it\n\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t */",
		"meta": {
			"range": [
				740,
				1493
			],
			"filename": "BitCrusher.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029311",
				"name": "Tone.BitCrusher",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.BitCrusher~options",
				"invStepSize": "Tone.BitCrusher~invStepSize",
				"this._subtract": "Tone.BitCrusher#_subtract",
				"this._modulo": "Tone.BitCrusher#_modulo",
				"this._bits": "Tone.BitCrusher#_bits"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n        Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n        on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The number of bits to downsample the signal. Nominal range\n                      of 1 to 8.",
				"name": "bits"
			}
		],
		"examples": [
			"//initialize crusher and route a synth through it\nvar crusher = new Tone.BitCrusher(4).toMaster();\nvar synth = new Tone.MonoSynth().connect(crusher);"
		],
		"name": "BitCrusher",
		"longname": "Tone.BitCrusher",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  the default values\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1609,
				1653
			],
			"filename": "BitCrusher.js",
			"lineno": 61,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029428",
				"name": "Tone.BitCrusher.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":4}",
				"paramnames": []
			}
		},
		"description": "the default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.BitCrusher.defaults",
		"kind": "member",
		"memberof": "Tone.BitCrusher"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1640,
				1650
			],
			"filename": "BitCrusher.js",
			"lineno": 62,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029435",
				"name": "bits",
				"type": "Literal",
				"value": 4
			}
		},
		"undocumented": true,
		"name": "bits",
		"longname": "Tone.BitCrusher.defaults.bits",
		"kind": "member",
		"memberof": "Tone.BitCrusher.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The bit depth of the effect. Nominal range of 1-8. \n\t * @memberOf Tone.BitCrusher#\n\t * @type {number}\n\t * @name bits\n\t */",
		"meta": {
			"filename": "BitCrusher.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The bit depth of the effect. Nominal range of 1-8.",
		"memberof": "Tone.BitCrusher",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "bits",
		"longname": "Tone.BitCrusher#bits",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.BitCrusher} this\n\t */",
		"meta": {
			"range": [
				2099,
				2310
			],
			"filename": "BitCrusher.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029488",
				"name": "Tone.BitCrusher.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._subtract": "Tone.BitCrusher#_subtract",
				"this._modulo": "Tone.BitCrusher#_modulo"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.BitCrusher"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.BitCrusher#dispose",
		"kind": "function",
		"memberof": "Tone.BitCrusher",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t *         for making different types of distortion sounds.\n\t *         Note that odd orders sound very different from even ones, \n\t *         and order = 1 is no change. \n\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t *  @example\n\t * //create a new cheby\n\t * var cheby = new Tone.Chebyshev(50);\n\t * //create a monosynth connected to our cheby\n\t * synth = new Tone.MonoSynth().connect(cheby);\n\t */",
		"meta": {
			"range": [
				818,
				1280
			],
			"filename": "Chebyshev.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029557",
				"name": "Tone.Chebyshev",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Chebyshev~options",
				"this._shaper": "Tone.Chebyshev#_shaper",
				"this._order": "Tone.Chebyshev#_order",
				"this.order": "Tone.Chebyshev#order",
				"this.oversample": "Tone.Chebyshev#oversample"
			}
		},
		"kind": "class",
		"classdesc": "Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n        for making different types of distortion sounds.\n        Note that odd orders sound very different from even ones, \n        and order = 1 is no change. \n        Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Positive",
						"Object"
					]
				},
				"optional": true,
				"description": "The order of the chebyshev polynomial. Normal range between 1-100.",
				"name": "order"
			}
		],
		"examples": [
			"//create a new cheby\nvar cheby = new Tone.Chebyshev(50);\n//create a monosynth connected to our cheby\nsynth = new Tone.MonoSynth().connect(cheby);"
		],
		"name": "Chebyshev",
		"longname": "Tone.Chebyshev",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1383,
				1452
			],
			"filename": "Chebyshev.js",
			"lineno": 51,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029639",
				"name": "Tone.Chebyshev.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"none\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Chebyshev.defaults",
		"memberof": "Tone.Chebyshev"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1413,
				1424
			],
			"filename": "Chebyshev.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029646",
				"name": "order",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "order",
		"longname": "Tone.Chebyshev.defaults.order",
		"kind": "member",
		"memberof": "Tone.Chebyshev.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1428,
				1449
			],
			"filename": "Chebyshev.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029648",
				"name": "oversample",
				"type": "Literal",
				"value": "none"
			}
		},
		"undocumented": true,
		"name": "oversample",
		"longname": "Tone.Chebyshev.defaults.oversample",
		"kind": "member",
		"memberof": "Tone.Chebyshev.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The order of the Chebyshev polynomial which creates\n\t * the equation which is applied to the incoming \n\t * signal through a Tone.WaveShaper. The equations\n\t * are in the form:<br>\n\t * order 2: 2x^2 + 1<br>\n\t * order 3: 4x^3 + 3x <br>\n\t * @memberOf Tone.Chebyshev#\n\t * @type {Positive}\n\t * @name order\n\t */",
		"meta": {
			"filename": "Chebyshev.js",
			"lineno": 78,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The order of the Chebyshev polynomial which creates\nthe equation which is applied to the incoming \nsignal through a Tone.WaveShaper. The equations\nare in the form:<br>\norder 2: 2x^2 + 1<br>\norder 3: 4x^3 + 3x <br>",
		"memberof": "Tone.Chebyshev",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "order",
		"longname": "Tone.Chebyshev#order",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.Chebyshev#\n\t * @type {string}\n\t * @name oversample\n\t */",
		"meta": {
			"filename": "Chebyshev.js",
			"lineno": 110,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".",
		"memberof": "Tone.Chebyshev",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "oversample",
		"longname": "Tone.Chebyshev#oversample",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Chebyshev} this\n\t */",
		"meta": {
			"range": [
				3350,
				3507
			],
			"filename": "Chebyshev.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029858",
				"name": "Tone.Chebyshev.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._shaper": "Tone.Chebyshev#_shaper"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Chebyshev"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Chebyshev#dispose",
		"kind": "function",
		"memberof": "Tone.Chebyshev",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t *\t@example\n\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t */",
		"meta": {
			"range": [
				994,
				2956
			],
			"filename": "Chorus.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100029915",
				"name": "Tone.Chorus",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Chorus~options",
				"this._depth": "Tone.Chorus#_depth",
				"this._delayTime": "Tone.Chorus#_delayTime",
				"this._lfoL": "Tone.Chorus#_lfoL",
				"this._lfoR": "Tone.Chorus#_lfoR",
				"this._delayNodeL": "Tone.Chorus#_delayNodeL",
				"this._delayNodeR": "Tone.Chorus#_delayNodeR",
				"this.frequency": "Tone.Chorus#frequency",
				"this.depth": "Tone.Chorus#depth",
				"this.frequency.value": "Tone.Chorus#frequency.value",
				"this.type": "Tone.Chorus#type",
				"this.spread": "Tone.Chorus#spread"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Chorus is a stereo chorus effect with feedback composed of \n        a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n        Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n        Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).",
		"augments": [
			"Tone.StereoXFeedbackEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "The frequency of the LFO.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"Milliseconds"
					]
				},
				"optional": true,
				"description": "The delay of the chorus effect in ms.",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The depth of the chorus.",
				"name": "depth"
			}
		],
		"examples": [
			"var chorus = new Tone.Chorus(4, 2.5, 0.5);\nvar synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\nsynth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");"
		],
		"name": "Chorus",
		"longname": "Tone.Chorus",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				2158,
				2195
			],
			"filename": "Chorus.js",
			"lineno": 83,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030020",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._lfoL.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency of the LFO which modulates the delayTime.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Chorus#frequency",
		"kind": "member",
		"memberof": "Tone.Chorus",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3059,
				3201
			],
			"filename": "Chorus.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030180",
				"name": "Tone.Chorus.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":180}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Chorus.defaults",
		"kind": "member",
		"memberof": "Tone.Chorus"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3086,
				3103
			],
			"filename": "Chorus.js",
			"lineno": 114,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030187",
				"name": "frequency",
				"type": "Literal",
				"value": 1.5
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Chorus.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3107,
				3124
			],
			"filename": "Chorus.js",
			"lineno": 115,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030189",
				"name": "delayTime",
				"type": "Literal",
				"value": 3.5
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.Chorus.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3128,
				3141
			],
			"filename": "Chorus.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030191",
				"name": "depth",
				"type": "Literal",
				"value": 0.7
			}
		},
		"undocumented": true,
		"name": "depth",
		"longname": "Tone.Chorus.defaults.depth",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3145,
				3161
			],
			"filename": "Chorus.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030193",
				"name": "feedback",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "feedback",
		"longname": "Tone.Chorus.defaults.feedback",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3165,
				3180
			],
			"filename": "Chorus.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030195",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Chorus.defaults.type",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3184,
				3198
			],
			"filename": "Chorus.js",
			"lineno": 119,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030197",
				"name": "spread",
				"type": "Literal",
				"value": 180
			}
		},
		"undocumented": true,
		"name": "spread",
		"longname": "Tone.Chorus.defaults.spread",
		"kind": "member",
		"memberof": "Tone.Chorus.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The depth of the effect. A depth of 1 makes the delayTime\n\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t * @memberOf Tone.Chorus#\n\t * @type {NormalRange}\n\t * @name depth\n\t */",
		"meta": {
			"filename": "Chorus.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The depth of the effect. A depth of 1 makes the delayTime\nmodulate between 0 and 2*delayTime (centered around the delayTime).",
		"memberof": "Tone.Chorus",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "depth",
		"longname": "Tone.Chorus#depth",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t * will give a more pronounced effect. Nominal range a delayTime\n\t * is between 2 and 20ms. \n\t * @memberOf Tone.Chorus#\n\t * @type {Milliseconds}\n\t * @name delayTime\n\t */",
		"meta": {
			"filename": "Chorus.js",
			"lineno": 143,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The delayTime in milliseconds of the chorus. A larger delayTime\nwill give a more pronounced effect. Nominal range a delayTime\nis between 2 and 20ms.",
		"memberof": "Tone.Chorus",
		"type": {
			"names": [
				"Milliseconds"
			]
		},
		"name": "delayTime",
		"longname": "Tone.Chorus#delayTime",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The oscillator type of the LFO. \n\t * @memberOf Tone.Chorus#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "Chorus.js",
			"lineno": 161,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The oscillator type of the LFO.",
		"memberof": "Tone.Chorus",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.Chorus#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/** \n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t * @memberOf Tone.Chorus#\n\t * @type {Degrees}\n\t * @name spread\n\t */",
		"meta": {
			"filename": "Chorus.js",
			"lineno": 177,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\nWhen set to 180, LFO's will be panned hard left and right respectively.",
		"memberof": "Tone.Chorus",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "spread",
		"longname": "Tone.Chorus#spread",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Chorus} this\n\t */",
		"meta": {
			"range": [
				5157,
				5537
			],
			"filename": "Chorus.js",
			"lineno": 198,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030432",
				"name": "Tone.Chorus.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._lfoL": "Tone.Chorus#_lfoL",
				"this._lfoR": "Tone.Chorus#_lfoR",
				"this._delayNodeL": "Tone.Chorus#_delayNodeL",
				"this._delayNodeR": "Tone.Chorus#_delayNodeR",
				"this.frequency": "Tone.Chorus#frequency"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Chorus"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Chorus#dispose",
		"kind": "function",
		"memberof": "Tone.Chorus",
		"scope": "instance",
		"overrides": "Tone.StereoXFeedbackEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t *                                           contianing the impulse response. \n\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t *  @example\n\t * //initializing the convolver with an impulse response\n\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t */",
		"meta": {
			"range": [
				914,
				1584
			],
			"filename": "Convolver.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030539",
				"name": "Tone.Convolver",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Convolver~options",
				"this._convolver": "Tone.Convolver#_convolver",
				"this._buffer": "Tone.Convolver#_buffer",
				"": null,
				"this.buffer": "Tone.Convolver#buffer"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Convolver is a wrapper around the Native Web Audio \n         [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n         Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n         [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"string",
						"Tone.Buffer",
						"Object"
					]
				},
				"optional": true,
				"description": "The URL of the impulse response or the Tone.Buffer\n                                          contianing the impulse response.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the url is loaded.",
				"name": "onload"
			}
		],
		"examples": [
			"//initializing the convolver with an impulse response\nvar convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();"
		],
		"name": "Convolver",
		"longname": "Tone.Convolver",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1688,
				1741
			],
			"filename": "Convolver.js",
			"lineno": 59,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030663",
				"name": "Tone.Convolver.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Convolver.defaults",
		"memberof": "Tone.Convolver"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1718,
				1738
			],
			"filename": "Convolver.js",
			"lineno": 60,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030670",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.Convolver.defaults.onload",
		"kind": "member",
		"memberof": "Tone.Convolver.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The convolver's buffer\n\t *  @memberOf Tone.Convolver#\n\t *  @type {AudioBuffer}\n\t *  @name buffer\n\t */",
		"meta": {
			"filename": "Convolver.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The convolver's buffer",
		"memberof": "Tone.Convolver",
		"type": {
			"names": [
				"AudioBuffer"
			]
		},
		"name": "buffer",
		"longname": "Tone.Convolver#buffer",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Load an impulse response url as an audio buffer.\n\t *  Decodes the audio asynchronously and invokes\n\t *  the callback once the audio buffer loads.\n\t *  @param {string} url The url of the buffer to load.\n\t *                      filetype support depends on the\n\t *                      browser.\n\t *  @param  {function=} callback\n\t *  @returns {Promise}\n\t */",
		"meta": {
			"range": [
				2452,
				2638
			],
			"filename": "Convolver.js",
			"lineno": 89,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030722",
				"name": "Tone.Convolver.prototype.load",
				"type": "FunctionExpression",
				"paramnames": [
					"url",
					"callback"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Load an impulse response url as an audio buffer.\n Decodes the audio asynchronously and invokes\n the callback once the audio buffer loads.",
		"params": [
			{
				"type": {
					"names": [
						"string"
					]
				},
				"description": "The url of the buffer to load.\n                     filetype support depends on the\n                     browser.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				}
			}
		],
		"name": "load",
		"longname": "Tone.Convolver#load",
		"kind": "function",
		"memberof": "Tone.Convolver",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Convolver} this\n\t */",
		"meta": {
			"range": [
				2704,
				2919
			],
			"filename": "Convolver.js",
			"lineno": 102,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030762",
				"name": "Tone.Convolver.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._convolver": "Tone.Convolver#_convolver",
				"this._buffer": "Tone.Convolver#_buffer"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Convolver"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Convolver#dispose",
		"kind": "function",
		"memberof": "Tone.Convolver",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t *  @example\n\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t * var fm = new Tone.SimpleFM().connect(dist);\n\t * //this sounds good on bass notes\n\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t */",
		"meta": {
			"range": [
				621,
				1104
			],
			"filename": "Distortion.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030831",
				"name": "Tone.Distortion",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Distortion~options",
				"this._shaper": "Tone.Distortion#_shaper",
				"this._distortion": "Tone.Distortion#_distortion",
				"this.distortion": "Tone.Distortion#distortion",
				"this.oversample": "Tone.Distortion#oversample"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n        Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"Object"
					]
				},
				"optional": true,
				"description": "The amount of distortion (nominal range of 0-1)",
				"name": "distortion"
			}
		],
		"examples": [
			"var dist = new Tone.Distortion(0.8).toMaster();\nvar fm = new Tone.SimpleFM().connect(dist);\n//this sounds good on bass notes\nfm.triggerAttackRelease(\"A1\", \"8n\");"
		],
		"name": "Distortion",
		"longname": "Tone.Distortion",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1208,
				1285
			],
			"filename": "Distortion.js",
			"lineno": 48,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030913",
				"name": "Tone.Distortion.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"none\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Distortion.defaults",
		"memberof": "Tone.Distortion"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1239,
				1257
			],
			"filename": "Distortion.js",
			"lineno": 49,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030920",
				"name": "distortion",
				"type": "Literal",
				"value": 0.4
			}
		},
		"undocumented": true,
		"name": "distortion",
		"longname": "Tone.Distortion.defaults.distortion",
		"kind": "member",
		"memberof": "Tone.Distortion.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1261,
				1282
			],
			"filename": "Distortion.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100030922",
				"name": "oversample",
				"type": "Literal",
				"value": "none"
			}
		},
		"undocumented": true,
		"name": "oversample",
		"longname": "Tone.Distortion.defaults.oversample",
		"kind": "member",
		"memberof": "Tone.Distortion.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The amount of distortion.\n\t * @memberOf Tone.Distortion#\n\t * @type {NormalRange}\n\t * @name distortion\n\t */",
		"meta": {
			"filename": "Distortion.js",
			"lineno": 53,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The amount of distortion.",
		"memberof": "Tone.Distortion",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "distortion",
		"longname": "Tone.Distortion#distortion",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t * @memberOf Tone.Distortion#\n\t * @type {string}\n\t * @name oversample\n\t */",
		"meta": {
			"filename": "Distortion.js",
			"lineno": 78,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".",
		"memberof": "Tone.Distortion",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "oversample",
		"longname": "Tone.Distortion#oversample",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Distortion} this\n\t */",
		"meta": {
			"range": [
				2288,
				2446
			],
			"filename": "Distortion.js",
			"lineno": 97,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031045",
				"name": "Tone.Distortion.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._shaper": "Tone.Distortion#_shaper"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Distortion"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Distortion#dispose",
		"kind": "function",
		"memberof": "Tone.Distortion",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t * \t        effect which goes to the output using the wet control.\n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t */",
		"meta": {
			"range": [
				441,
				1468
			],
			"filename": "Effect.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031100",
				"name": "Tone.Effect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Effect~options",
				"this._dryWet": "Tone.Effect#_dryWet",
				"this.wet": "Tone.Effect#wet",
				"this.effectSend": "Tone.Effect#effectSend",
				"this.effectReturn": "Tone.Effect#effectReturn"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Effect is the base class for effects. Connect the effect between\n\t        the effectSend and effectReturn GainNodes, then control the amount of\n\t        effect which goes to the output using the wet control.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange",
						"Object"
					]
				},
				"optional": true,
				"description": "The starting wet value.",
				"name": "wet"
			}
		],
		"name": "Effect",
		"longname": "Tone.Effect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Effect#wet",
		"kind": "member",
		"memberof": "Tone.Effect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1543,
				1582
			],
			"filename": "Effect.js",
			"lineno": 64,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031232",
				"name": "Tone.Effect.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Effect.defaults",
		"kind": "member",
		"memberof": "Tone.Effect"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1570,
				1579
			],
			"filename": "Effect.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031239",
				"name": "wet",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "wet",
		"longname": "Tone.Effect.defaults.wet",
		"kind": "member",
		"memberof": "Tone.Effect.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.Effect} this\n\t */",
		"meta": {
			"range": [
				1924,
				2231
			],
			"filename": "Effect.js",
			"lineno": 83,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031267",
				"name": "Tone.Effect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._dryWet": "Tone.Effect#_dryWet",
				"this.effectSend": "Tone.Effect#effectSend",
				"this.effectReturn": "Tone.Effect#effectReturn",
				"this.wet": "Tone.Effect#wet"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Effect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Effect#dispose",
		"kind": "function",
		"memberof": "Tone.Effect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t *          signal is fed back into the delay. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.FeedbackEffect}\n\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t *                            is fed back through the delay.\n\t *  @example\n\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t * var tom = new Tone.DrumSynth({\n\t * \t\"octaves\" : 4,\n\t * \t\"pitchDecay\" : 0.1\n\t * }).connect(feedbackDelay);\n\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t */",
		"meta": {
			"range": [
				777,
				1300
			],
			"filename": "FeedbackDelay.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031361",
				"name": "Tone.FeedbackDelay",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FeedbackDelay~options",
				"this._delayNode": "Tone.FeedbackDelay#_delayNode",
				"this.delayTime": "Tone.FeedbackDelay#delayTime"
			}
		},
		"kind": "class",
		"classdesc": "Tone.FeedbackDelay is a DelayNode in which part of output\n         signal is fed back into the delay.",
		"augments": [
			"Tone.FeedbackEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The delay applied to the incoming signal.",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The amount of the effected signal which \n                           is fed back through the delay.",
				"name": "feedback"
			}
		],
		"examples": [
			"var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\nvar tom = new Tone.DrumSynth({\n\t\"octaves\" : 4,\n\t\"pitchDecay\" : 0.1\n}).connect(feedbackDelay);\ntom.triggerAttackRelease(\"A2\",\"32n\");"
		],
		"name": "FeedbackDelay",
		"longname": "Tone.FeedbackDelay",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The delayTime of the DelayNode. \n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1161,
				1203
			],
			"filename": "FeedbackDelay.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031403",
				"name": "this.delayTime",
				"type": "MemberExpression",
				"value": "this._delayNode.delayTime",
				"paramnames": []
			}
		},
		"description": "The delayTime of the DelayNode.",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.FeedbackDelay#delayTime",
		"kind": "member",
		"memberof": "Tone.FeedbackDelay",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The default values. \n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1441,
				1497
			],
			"filename": "FeedbackDelay.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031439",
				"name": "Tone.FeedbackDelay.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.25}",
				"paramnames": []
			}
		},
		"description": "The default values.",
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.FeedbackDelay.defaults",
		"memberof": "Tone.FeedbackDelay"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1475,
				1493
			],
			"filename": "FeedbackDelay.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031446",
				"name": "delayTime",
				"type": "Literal",
				"value": 0.25
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.FeedbackDelay.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.FeedbackDelay.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.FeedbackDelay} this\n\t */",
		"meta": {
			"range": [
				1565,
				1798
			],
			"filename": "FeedbackDelay.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031449",
				"name": "Tone.FeedbackDelay.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._delayNode": "Tone.FeedbackDelay#_delayNode",
				"this.delayTime": "Tone.FeedbackDelay#delayTime"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FeedbackDelay"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FeedbackDelay#dispose",
		"kind": "function",
		"memberof": "Tone.FeedbackDelay",
		"scope": "instance",
		"overrides": "Tone.FeedbackEffect#dispose"
	},
	{
		"comment": "/**\n\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t * \t        audio source and its own output. This is a base-class\n\t * \t        for feedback effects. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.Effect}\n\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t */",
		"meta": {
			"range": [
				446,
				1055
			],
			"filename": "FeedbackEffect.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031520",
				"name": "Tone.FeedbackEffect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FeedbackEffect~options",
				"this._feedbackGain": "Tone.FeedbackEffect#_feedbackGain",
				"this.feedback": "Tone.FeedbackEffect#feedback"
			}
		},
		"kind": "class",
		"classdesc": "Tone.FeedbackEffect provides a loop between an \n\t        audio source and its own output. This is a base-class\n\t        for feedback effects.",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange",
						"Object"
					]
				},
				"optional": true,
				"description": "The initial feedback value.",
				"name": "feedback"
			}
		],
		"name": "FeedbackEffect",
		"longname": "Tone.FeedbackEffect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of signal which is fed back into the effect input. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				893,
				932
			],
			"filename": "FeedbackEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031566",
				"name": "this.feedback",
				"type": "MemberExpression",
				"value": "this._feedbackGain.gain",
				"paramnames": []
			}
		},
		"description": "The amount of signal which is fed back into the effect input.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.FeedbackEffect#feedback",
		"kind": "member",
		"memberof": "Tone.FeedbackEffect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1151,
				1207
			],
			"filename": "FeedbackEffect.js",
			"lineno": 45,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031607",
				"name": "Tone.FeedbackEffect.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.125}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.FeedbackEffect.defaults",
		"kind": "member",
		"memberof": "Tone.FeedbackEffect"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1186,
				1204
			],
			"filename": "FeedbackEffect.js",
			"lineno": 46,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031614",
				"name": "feedback",
				"type": "Literal",
				"value": 0.125
			}
		},
		"undocumented": true,
		"name": "feedback",
		"longname": "Tone.FeedbackEffect.defaults.feedback",
		"kind": "member",
		"memberof": "Tone.FeedbackEffect.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.FeedbackEffect} this\n\t */",
		"meta": {
			"range": [
				1278,
				1508
			],
			"filename": "FeedbackEffect.js",
			"lineno": 53,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031617",
				"name": "Tone.FeedbackEffect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._feedbackGain": "Tone.FeedbackEffect#_feedbackGain",
				"this.feedback": "Tone.FeedbackEffect#feedback"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FeedbackEffect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FeedbackEffect#dispose",
		"kind": "function",
		"memberof": "Tone.FeedbackEffect",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).\n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.\n\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part\n\t *                                 of the reverb.\n\t *  @example\n\t * var freeverb = new Tone.Freeverb().toMaster();\n\t * freeverb.dampening.value = 1000;\n\t * //routing synth through the reverb\n\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t */",
		"meta": {
			"range": [
				1416,
				3704
			],
			"filename": "Freeverb.js",
			"lineno": 38,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031726",
				"name": "Tone.Freeverb",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Freeverb~options",
				"this.roomSize": "Tone.Freeverb#roomSize",
				"this.dampening": "Tone.Freeverb#dampening",
				"this._combFilters": "Tone.Freeverb#_combFilters",
				"this._allpassFiltersL": "Tone.Freeverb#_allpassFiltersL",
				"this._allpassFiltersR": "Tone.Freeverb#_allpassFiltersR",
				"l": "Tone.Freeverb~l",
				"allpassL": "Tone.Freeverb~allpassL",
				"allpassL.type": "Tone.Freeverb~allpassL.type",
				"allpassL.frequency.value": "Tone.Freeverb~allpassL.frequency.value",
				"r": "Tone.Freeverb~r",
				"allpassR": "Tone.Freeverb~allpassR",
				"allpassR.type": "Tone.Freeverb~allpassR.type",
				"allpassR.frequency.value": "Tone.Freeverb~allpassR.frequency.value",
				"c": "Tone.Freeverb~c",
				"lfpf": "Tone.Freeverb~lfpf"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n        Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange",
						"Object"
					]
				},
				"optional": true,
				"description": "Correlated to the decay time.",
				"name": "roomSize"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The cutoff frequency of a lowpass filter as part\n                                of the reverb.",
				"name": "dampening"
			}
		],
		"examples": [
			"var freeverb = new Tone.Freeverb().toMaster();\nfreeverb.dampening.value = 1000;\n//routing synth through the reverb\nvar synth = new Tone.AMSynth().connect(freeverb);"
		],
		"name": "Freeverb",
		"longname": "Tone.Freeverb",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The roomSize value between. A larger roomSize\n\t\t *  will result in a longer decay.\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1714,
				1786
			],
			"filename": "Freeverb.js",
			"lineno": 49,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031756",
				"name": "this.roomSize",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The roomSize value between. A larger roomSize\n will result in a longer decay.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "roomSize",
		"longname": "Tone.Freeverb#roomSize",
		"kind": "member",
		"memberof": "Tone.Freeverb",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of dampening of the reverberant signal.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1898,
				1970
			],
			"filename": "Freeverb.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031773",
				"name": "this.dampening",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amount of dampening of the reverberant signal.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "dampening",
		"longname": "Tone.Freeverb#dampening",
		"kind": "member",
		"memberof": "Tone.Freeverb",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3800,
				3870
			],
			"filename": "Freeverb.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032064",
				"name": "Tone.Freeverb.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":3000}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Freeverb.defaults",
		"kind": "member",
		"memberof": "Tone.Freeverb"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3829,
				3845
			],
			"filename": "Freeverb.js",
			"lineno": 123,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032071",
				"name": "roomSize",
				"type": "Literal",
				"value": 0.7
			}
		},
		"undocumented": true,
		"name": "roomSize",
		"longname": "Tone.Freeverb.defaults.roomSize",
		"kind": "member",
		"memberof": "Tone.Freeverb.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3849,
				3867
			],
			"filename": "Freeverb.js",
			"lineno": 124,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032073",
				"name": "dampening",
				"type": "Literal",
				"value": 3000
			}
		},
		"undocumented": true,
		"name": "dampening",
		"longname": "Tone.Freeverb.defaults.dampening",
		"kind": "member",
		"memberof": "Tone.Freeverb.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Freeverb} this\n\t */",
		"meta": {
			"range": [
				3934,
				4711
			],
			"filename": "Freeverb.js",
			"lineno": 131,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032076",
				"name": "Tone.Freeverb.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"al": "Tone.Freeverb#dispose~al",
				"this._allpassFiltersL[undefined]": "Tone.Freeverb#_allpassFiltersL[undefined]",
				"this._allpassFiltersL": "Tone.Freeverb#_allpassFiltersL",
				"ar": "Tone.Freeverb#dispose~ar",
				"this._allpassFiltersR[undefined]": "Tone.Freeverb#_allpassFiltersR[undefined]",
				"this._allpassFiltersR": "Tone.Freeverb#_allpassFiltersR",
				"cf": "Tone.Freeverb#dispose~cf",
				"this._combFilters[undefined]": "Tone.Freeverb#_combFilters[undefined]",
				"this._combFilters": "Tone.Freeverb#_combFilters",
				"this.roomSize": "Tone.Freeverb#roomSize",
				"this.dampening": "Tone.Freeverb#dampening"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Freeverb"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Freeverb#dispose",
		"kind": "function",
		"memberof": "Tone.Freeverb",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t *         tuned by John Chowning in 1970.\n\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t *         \n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t *  @example\n\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t * var delay = new Tone.FeedbackDelay(0.5); \n\t * //connecting the synth to reverb through delay\n\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t */",
		"meta": {
			"range": [
				1321,
				3065
			],
			"filename": "JCReverb.js",
			"lineno": 46,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032299",
				"name": "Tone.JCReverb",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.JCReverb~options",
				"this.roomSize": "Tone.JCReverb#roomSize",
				"this._scaleRoomSize": "Tone.JCReverb#_scaleRoomSize",
				"this._allpassFilters": "Tone.JCReverb#_allpassFilters",
				"this._feedbackCombFilters": "Tone.JCReverb#_feedbackCombFilters",
				"af": "Tone.JCReverb~af",
				"allpass": "Tone.JCReverb~allpass",
				"allpass.type": "Tone.JCReverb~allpass.type",
				"allpass.frequency.value": "Tone.JCReverb~allpass.frequency.value",
				"cf": "Tone.JCReverb~cf",
				"fbcf": "Tone.JCReverb~fbcf",
				"fbcf.resonance.value": "Tone.JCReverb~fbcf.resonance.value"
			}
		},
		"kind": "class",
		"classdesc": "Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n        tuned by John Chowning in 1970.\n        It is made up of three allpass filters and four Tone.FeedbackCombFilter.",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange",
						"Object"
					]
				},
				"optional": true,
				"description": "Coorelates to the decay time.",
				"name": "roomSize"
			}
		],
		"examples": [
			"var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\nvar delay = new Tone.FeedbackDelay(0.5); \n//connecting the synth to reverb through delay\nvar synth = new Tone.DuoSynth().chain(delay, reverb);\nsynth.triggerAttackRelease(\"A4\",\"8n\");"
		],
		"name": "JCReverb",
		"longname": "Tone.JCReverb",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  room size control values between [0,1]\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1562,
				1634
			],
			"filename": "JCReverb.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032328",
				"name": "this.roomSize",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "room size control values between [0,1]",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "roomSize",
		"longname": "Tone.JCReverb#roomSize",
		"kind": "member",
		"memberof": "Tone.JCReverb",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default values\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3197,
				3245
			],
			"filename": "JCReverb.js",
			"lineno": 117,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032572",
				"name": "Tone.JCReverb.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}",
				"paramnames": []
			}
		},
		"description": "the default values",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.JCReverb.defaults",
		"memberof": "Tone.JCReverb"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3226,
				3242
			],
			"filename": "JCReverb.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032579",
				"name": "roomSize",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "roomSize",
		"longname": "Tone.JCReverb.defaults.roomSize",
		"kind": "member",
		"memberof": "Tone.JCReverb.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.JCReverb} this\n\t */",
		"meta": {
			"range": [
				3310,
				3949
			],
			"filename": "JCReverb.js",
			"lineno": 125,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032582",
				"name": "Tone.JCReverb.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"apf": "Tone.JCReverb#dispose~apf",
				"this._allpassFilters[undefined]": "Tone.JCReverb#_allpassFilters[undefined]",
				"this._allpassFilters": "Tone.JCReverb#_allpassFilters",
				"fbcf": "Tone.JCReverb#dispose~fbcf",
				"this._feedbackCombFilters[undefined]": "Tone.JCReverb#_feedbackCombFilters[undefined]",
				"this._feedbackCombFilters": "Tone.JCReverb#_feedbackCombFilters",
				"this.roomSize": "Tone.JCReverb#roomSize",
				"this._scaleRoomSize": "Tone.JCReverb#_scaleRoomSize"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.JCReverb"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.JCReverb#dispose",
		"kind": "function",
		"memberof": "Tone.JCReverb",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Mid/Side processing separates the the 'mid' signal \n\t *         (which comes out of both the left and the right channel) \n\t *         and the 'side' (which only comes out of the the side channels) \n\t *         and effects them separately before being recombined.\n\t *         Applies a Mid/Side seperation and recombination.\n\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t *         <br><br>\n\t *         This is a base-class for Mid/Side Effects. \n\t *\n\t *  @extends {Tone.Effect}\n\t *  @constructor\n\t */",
		"meta": {
			"range": [
				724,
				1722
			],
			"filename": "MidSideEffect.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032735",
				"name": "Tone.MidSideEffect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._midSideSplit": "Tone.MidSideEffect#_midSideSplit",
				"this._midSideMerge": "Tone.MidSideEffect#_midSideMerge",
				"this.midSend": "Tone.MidSideEffect#midSend",
				"this.sideSend": "Tone.MidSideEffect#sideSend",
				"this.midReturn": "Tone.MidSideEffect#midReturn",
				"this.sideReturn": "Tone.MidSideEffect#sideReturn"
			}
		},
		"kind": "class",
		"classdesc": "Mid/Side processing separates the the 'mid' signal \n        (which comes out of both the left and the right channel) \n        and the 'side' (which only comes out of the the side channels) \n        and effects them separately before being recombined.\n        Applies a Mid/Side seperation and recombination.\n        Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n        <br><br>\n        This is a base-class for Mid/Side Effects.",
		"augments": [
			"Tone.Effect"
		],
		"name": "MidSideEffect",
		"longname": "Tone.MidSideEffect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.MidSideEffect} this\n\t */",
		"meta": {
			"range": [
				1840,
				2172
			],
			"filename": "MidSideEffect.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032840",
				"name": "Tone.MidSideEffect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._midSideSplit": "Tone.MidSideEffect#_midSideSplit",
				"this._midSideMerge": "Tone.MidSideEffect#_midSideMerge",
				"this.midSend": "Tone.MidSideEffect#midSend",
				"this.sideSend": "Tone.MidSideEffect#sideSend",
				"this.midReturn": "Tone.MidSideEffect#midReturn",
				"this.sideReturn": "Tone.MidSideEffect#sideReturn"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MidSideEffect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MidSideEffect#dispose",
		"kind": "function",
		"memberof": "Tone.MidSideEffect",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t *         of different frequency components of an incoming signal. Read more on \n\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t *\n\t *\t@extends {Tone.StereoEffect}\n\t *\t@constructor\n\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t *\t@param {number} [octaves] The octaves of the effect. \n\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t *\t@example\n\t * var phaser = new Tone.Phaser({\n\t * \t\"frequency\" : 15, \n\t * \t\"octaves\" : 5, \n\t * \t\"baseFrequency\" : 1000\n\t * }).toMaster();\n\t * var synth = new Tone.FMSynth().connect(phaser);\n\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t */",
		"meta": {
			"range": [
				971,
				2949
			],
			"filename": "Phaser.js",
			"lineno": 26,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100032934",
				"name": "Tone.Phaser",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Phaser~options",
				"this._lfoL": "Tone.Phaser#_lfoL",
				"this._lfoR": "Tone.Phaser#_lfoR",
				"this._lfoR.phase": "Tone.Phaser#_lfoR.phase",
				"this._baseFrequency": "Tone.Phaser#_baseFrequency",
				"this._octaves": "Tone.Phaser#_octaves",
				"this.Q": "Tone.Phaser#Q",
				"this._filtersL": "Tone.Phaser#_filtersL",
				"this._filtersR": "Tone.Phaser#_filtersR",
				"this.frequency": "Tone.Phaser#frequency",
				"this.frequency.value": "Tone.Phaser#frequency.value",
				"this.baseFrequency": "Tone.Phaser#baseFrequency",
				"this.octaves": "Tone.Phaser#octaves"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Phaser is a phaser effect. Phasers work by changing the phase\n        of different frequency components of an incoming signal. Read more on \n        [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n        Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).",
		"augments": [
			"Tone.StereoEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Object"
					]
				},
				"optional": true,
				"description": "The speed of the phasing.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "The octaves of the effect.",
				"name": "octaves"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The base frequency of the filters.",
				"name": "baseFrequency"
			}
		],
		"examples": [
			"var phaser = new Tone.Phaser({\n\t\"frequency\" : 15, \n\t\"octaves\" : 5, \n\t\"baseFrequency\" : 1000\n}).toMaster();\nvar synth = new Tone.FMSynth().connect(phaser);\nsynth.triggerAttackRelease(\"E3\", \"2n\");"
		],
		"name": "Phaser",
		"longname": "Tone.Phaser",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The quality factor of the filters\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1856,
				1911
			],
			"filename": "Phaser.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033017",
				"name": "this.Q",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The quality factor of the filters",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "Q",
		"longname": "Tone.Phaser#Q",
		"kind": "member",
		"memberof": "Tone.Phaser",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * the frequency of the effect\n\t\t * @type {Tone.Signal}\n\t\t */",
		"meta": {
			"range": [
				2322,
				2359
			],
			"filename": "Phaser.js",
			"lineno": 86,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033070",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._lfoL.frequency",
				"paramnames": []
			}
		},
		"description": "the frequency of the effect",
		"type": {
			"names": [
				"Tone.Signal"
			]
		},
		"name": "frequency",
		"longname": "Tone.Phaser#frequency",
		"kind": "member",
		"memberof": "Tone.Phaser",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  defaults\n\t *  @static\n\t *  @type {object}\n\t */",
		"meta": {
			"range": [
				3057,
				3176
			],
			"filename": "Phaser.js",
			"lineno": 112,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033209",
				"name": "Tone.Phaser.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":350}",
				"paramnames": []
			}
		},
		"description": "defaults",
		"scope": "static",
		"type": {
			"names": [
				"object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Phaser.defaults",
		"kind": "member",
		"memberof": "Tone.Phaser"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3084,
				3101
			],
			"filename": "Phaser.js",
			"lineno": 113,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033216",
				"name": "frequency",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Phaser.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Phaser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3105,
				3118
			],
			"filename": "Phaser.js",
			"lineno": 114,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033218",
				"name": "octaves",
				"type": "Literal",
				"value": 3
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.Phaser.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.Phaser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3122,
				3135
			],
			"filename": "Phaser.js",
			"lineno": 115,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033220",
				"name": "stages",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "stages",
		"longname": "Tone.Phaser.defaults.stages",
		"kind": "member",
		"memberof": "Tone.Phaser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3139,
				3147
			],
			"filename": "Phaser.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033222",
				"name": "Q",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.Phaser.defaults.Q",
		"kind": "member",
		"memberof": "Tone.Phaser.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3151,
				3172
			],
			"filename": "Phaser.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033224",
				"name": "baseFrequency",
				"type": "Literal",
				"value": 350
			}
		},
		"undocumented": true,
		"name": "baseFrequency",
		"longname": "Tone.Phaser.defaults.baseFrequency",
		"kind": "member",
		"memberof": "Tone.Phaser.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The number of octaves the phase goes above\n\t * the baseFrequency\n\t * @memberOf Tone.Phaser#\n\t * @type {Positive}\n\t * @name octaves\n\t */",
		"meta": {
			"filename": "Phaser.js",
			"lineno": 139,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The number of octaves the phase goes above\nthe baseFrequency",
		"memberof": "Tone.Phaser",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "octaves",
		"longname": "Tone.Phaser#octaves",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The the base frequency of the filters. \n\t * @memberOf Tone.Phaser#\n\t * @type {number}\n\t * @name baseFrequency\n\t */",
		"meta": {
			"filename": "Phaser.js",
			"lineno": 158,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The the base frequency of the filters.",
		"memberof": "Tone.Phaser",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "baseFrequency",
		"longname": "Tone.Phaser#baseFrequency",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Phaser} this\n\t */",
		"meta": {
			"range": [
				4589,
				5178
			],
			"filename": "Phaser.js",
			"lineno": 180,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033417",
				"name": "Tone.Phaser.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.Q": "Tone.Phaser#Q",
				"this._lfoL": "Tone.Phaser#_lfoL",
				"this._lfoR": "Tone.Phaser#_lfoR",
				"i": "Tone.Phaser#dispose~i",
				"this._filtersL[undefined]": "Tone.Phaser#_filtersL[undefined]",
				"this._filtersL": "Tone.Phaser#_filtersL",
				"j": "Tone.Phaser#dispose~j",
				"this._filtersR[undefined]": "Tone.Phaser#_filtersR[undefined]",
				"this._filtersR": "Tone.Phaser#_filtersR",
				"this.frequency": "Tone.Phaser#frequency"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Phaser"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Phaser#dispose",
		"kind": "function",
		"memberof": "Tone.Phaser",
		"scope": "instance",
		"overrides": "Tone.StereoEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t *          first in one channel and next in the opposite channel. In a stereo\n\t *          system these are the right and left channels.\n\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t *          with independent delay values. Each delay is routed to one channel\n\t *          (left or right), and the channel triggered second will always \n\t *          trigger at the same interval after the first.\n\t *\n\t * \t@constructor\n\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t *                                 is fed back through the delay.\n\t *  @example\n\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t */",
		"meta": {
			"range": [
				1133,
				2361
			],
			"filename": "PingPongDelay.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033590",
				"name": "Tone.PingPongDelay",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PingPongDelay~options",
				"this._leftDelay": "Tone.PingPongDelay#_leftDelay",
				"this._rightDelay": "Tone.PingPongDelay#_rightDelay",
				"this._rightPreDelay": "Tone.PingPongDelay#_rightPreDelay",
				"this.delayTime": "Tone.PingPongDelay#delayTime"
			}
		},
		"kind": "class",
		"classdesc": "Tone.PingPongDelay is a feedback delay effect where the echo is heard\n         first in one channel and next in the opposite channel. In a stereo\n         system these are the right and left channels.\n         PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n         with independent delay values. Each delay is routed to one channel\n         (left or right), and the channel triggered second will always \n         trigger at the same interval after the first.",
		"augments": [
			"Tone.StereoXFeedbackEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time",
						"Object"
					]
				},
				"optional": true,
				"description": "The delayTime between consecutive echos.",
				"name": "delayTime"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The amount of the effected signal which \n                                is fed back through the delay.",
				"name": "feedback"
			}
		],
		"examples": [
			"var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\nvar drum = new Tone.DrumSynth().connect(pingPong);\ndrum.triggerAttackRelease(\"C4\", \"32n\");"
		],
		"name": "PingPongDelay",
		"longname": "Tone.PingPongDelay",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  the delay time signal\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1845,
				1912
			],
			"filename": "PingPongDelay.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033659",
				"name": "this.delayTime",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the delay time signal",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.PingPongDelay#delayTime",
		"kind": "member",
		"memberof": "Tone.PingPongDelay",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2471,
				2548
			],
			"filename": "PingPongDelay.js",
			"lineno": 74,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033762",
				"name": "Tone.PingPongDelay.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.PingPongDelay.defaults",
		"kind": "member",
		"memberof": "Tone.PingPongDelay"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2505,
				2523
			],
			"filename": "PingPongDelay.js",
			"lineno": 75,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033769",
				"name": "delayTime",
				"type": "Literal",
				"value": 0.25
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.PingPongDelay.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.PingPongDelay.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2527,
				2545
			],
			"filename": "PingPongDelay.js",
			"lineno": 76,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033771",
				"name": "maxDelayTime",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "maxDelayTime",
		"longname": "Tone.PingPongDelay.defaults.maxDelayTime",
		"kind": "member",
		"memberof": "Tone.PingPongDelay.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.PingPongDelay} this\n\t */",
		"meta": {
			"range": [
				2618,
				3006
			],
			"filename": "PingPongDelay.js",
			"lineno": 83,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033774",
				"name": "Tone.PingPongDelay.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._leftDelay": "Tone.PingPongDelay#_leftDelay",
				"this._rightDelay": "Tone.PingPongDelay#_rightDelay",
				"this._rightPreDelay": "Tone.PingPongDelay#_rightPreDelay",
				"this.delayTime": "Tone.PingPongDelay#delayTime"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PingPongDelay"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PingPongDelay#dispose",
		"kind": "function",
		"memberof": "Tone.PingPongDelay",
		"scope": "instance",
		"overrides": "Tone.StereoXFeedbackEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t *         of a DelayNode using a sawtooth wave. \n\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t *         \n\t *  @extends {Tone.FeedbackEffect}\n\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t */",
		"meta": {
			"range": [
				742,
				3337
			],
			"filename": "PitchShift.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100033879",
				"name": "Tone.PitchShift",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PitchShift~options",
				"this._frequency": "Tone.PitchShift#_frequency",
				"this._delayA": "Tone.PitchShift#_delayA",
				"this._lfoA": "Tone.PitchShift#_lfoA",
				"this._delayB": "Tone.PitchShift#_delayB",
				"this._lfoB": "Tone.PitchShift#_lfoB",
				"this._crossFade": "Tone.PitchShift#_crossFade",
				"this._crossFadeLFO": "Tone.PitchShift#_crossFadeLFO",
				"this._feedbackDelay": "Tone.PitchShift#_feedbackDelay",
				"this.delayTime": "Tone.PitchShift#delayTime",
				"this._pitch": "Tone.PitchShift#_pitch",
				"this._windowSize": "Tone.PitchShift#_windowSize",
				"now": "Tone.PitchShift~now",
				"this.windowSize": "Tone.PitchShift#windowSize"
			}
		},
		"kind": "class",
		"classdesc": "Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n        The effect is achieved by speeding up or slowing down the delayTime\n        of a DelayNode using a sawtooth wave. \n        Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n        Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).",
		"augments": [
			"Tone.FeedbackEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Interval"
					]
				},
				"optional": true,
				"description": "The interval to transpose the incoming signal by.",
				"name": "pitch"
			}
		],
		"name": "PitchShift",
		"longname": "Tone.PitchShift",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of delay on the input signal\n\t\t *  @type {Time}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2435,
				2481
			],
			"filename": "PitchShift.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034037",
				"name": "this.delayTime",
				"type": "MemberExpression",
				"value": "this._feedbackDelay.delayTime",
				"paramnames": []
			}
		},
		"description": "The amount of delay on the input signal",
		"type": {
			"names": [
				"Time"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "delayTime",
		"longname": "Tone.PitchShift#delayTime",
		"kind": "member",
		"memberof": "Tone.PitchShift",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				3469,
				3573
			],
			"filename": "PitchShift.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034191",
				"name": "Tone.PitchShift.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.PitchShift.defaults",
		"memberof": "Tone.PitchShift"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3500,
				3511
			],
			"filename": "PitchShift.js",
			"lineno": 145,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034198",
				"name": "pitch",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "pitch",
		"longname": "Tone.PitchShift.defaults.pitch",
		"kind": "member",
		"memberof": "Tone.PitchShift.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3515,
				3533
			],
			"filename": "PitchShift.js",
			"lineno": 146,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034200",
				"name": "windowSize",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "windowSize",
		"longname": "Tone.PitchShift.defaults.windowSize",
		"kind": "member",
		"memberof": "Tone.PitchShift.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3537,
				3552
			],
			"filename": "PitchShift.js",
			"lineno": 147,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034202",
				"name": "delayTime",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "delayTime",
		"longname": "Tone.PitchShift.defaults.delayTime",
		"kind": "member",
		"memberof": "Tone.PitchShift.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3556,
				3570
			],
			"filename": "PitchShift.js",
			"lineno": 148,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034204",
				"name": "feedback",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "feedback",
		"longname": "Tone.PitchShift.defaults.feedback",
		"kind": "member",
		"memberof": "Tone.PitchShift.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Repitch the incoming signal by some interval (measured\n\t * in semi-tones). \n\t * @memberOf Tone.PitchShift#\n\t * @type {Interval}\n\t * @name pitch\n\t * @example\n\t * pitchShift.pitch = -12; //down one octave\n\t * pitchShift.pitch = 7; //up a fifth\n\t */",
		"meta": {
			"filename": "PitchShift.js",
			"lineno": 151,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Repitch the incoming signal by some interval (measured\nin semi-tones).",
		"memberof": "Tone.PitchShift",
		"type": {
			"names": [
				"Interval"
			]
		},
		"name": "pitch",
		"examples": [
			"pitchShift.pitch = -12; //down one octave\npitchShift.pitch = 7; //up a fifth"
		],
		"longname": "Tone.PitchShift#pitch",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t * A nominal range of 0.03 to 0.1 is recommended. \n\t * @memberOf Tone.PitchShift#\n\t * @type {Time}\n\t * @name windowSize\n\t * @example\n\t * pitchShift.windowSize = 0.1;\n\t */",
		"meta": {
			"filename": "PitchShift.js",
			"lineno": 185,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The window size corresponds roughly to the sample length in a looping sampler. \nSmaller values are desirable for a less noticeable delay time of the pitch shifted\nsignal, but larger values will result in smoother pitch shifting for larger intervals. \nA nominal range of 0.03 to 0.1 is recommended.",
		"memberof": "Tone.PitchShift",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "windowSize",
		"examples": [
			"pitchShift.windowSize = 0.1;"
		],
		"longname": "Tone.PitchShift#windowSize",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.PitchShift}  this\n\t */",
		"meta": {
			"range": [
				5228,
				5829
			],
			"filename": "PitchShift.js",
			"lineno": 210,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034395",
				"name": "Tone.PitchShift.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._frequency": "Tone.PitchShift#_frequency",
				"this._delayA": "Tone.PitchShift#_delayA",
				"this._delayB": "Tone.PitchShift#_delayB",
				"this._lfoA": "Tone.PitchShift#_lfoA",
				"this._lfoB": "Tone.PitchShift#_lfoB",
				"this._crossFade": "Tone.PitchShift#_crossFade",
				"this._crossFadeLFO": "Tone.PitchShift#_crossFadeLFO",
				"this._feedbackDelay": "Tone.PitchShift#_feedbackDelay",
				"this.delayTime": "Tone.PitchShift#delayTime"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PitchShift"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PitchShift#dispose",
		"kind": "function",
		"memberof": "Tone.PitchShift",
		"scope": "instance",
		"overrides": "Tone.FeedbackEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t *\n\t *\t@constructor\n\t *\t@extends {Tone}\n\t */",
		"meta": {
			"range": [
				301,
				1720
			],
			"filename": "StereoEffect.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034556",
				"name": "Tone.StereoEffect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.StereoEffect~options",
				"this._dryWet": "Tone.StereoEffect#_dryWet",
				"this.wet": "Tone.StereoEffect#wet",
				"this._split": "Tone.StereoEffect#_split",
				"this.effectSendL": "Tone.StereoEffect#effectSendL",
				"this.effectSendR": "Tone.StereoEffect#effectSendR",
				"this._merge": "Tone.StereoEffect#_merge",
				"this.effectReturnL": "Tone.StereoEffect#effectReturnL",
				"this.effectReturnR": "Tone.StereoEffect#effectReturnR"
			}
		},
		"kind": "class",
		"classdesc": "Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.",
		"augments": [
			"Tone"
		],
		"name": "StereoEffect",
		"longname": "Tone.StereoEffect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.StereoEffect#wet",
		"kind": "member",
		"memberof": "Tone.StereoEffect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.StereoEffect} this\n\t */",
		"meta": {
			"range": [
				1836,
				2241
			],
			"filename": "StereoEffect.js",
			"lineno": 91,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034725",
				"name": "Tone.StereoEffect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._dryWet": "Tone.StereoEffect#_dryWet",
				"this._split": "Tone.StereoEffect#_split",
				"this._merge": "Tone.StereoEffect#_merge",
				"this.effectSendL": "Tone.StereoEffect#effectSendL",
				"this.effectSendR": "Tone.StereoEffect#effectSendR",
				"this.effectReturnL": "Tone.StereoEffect#effectReturnL",
				"this.effectReturnR": "Tone.StereoEffect#effectReturnR",
				"this.wet": "Tone.StereoEffect#wet"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.StereoEffect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.StereoEffect#dispose",
		"kind": "function",
		"memberof": "Tone.StereoEffect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Base class for stereo feedback effects where the effectReturn\n\t *         is fed back into the same channel. \n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoEffect}\n\t */",
		"meta": {
			"range": [
				324,
				1129
			],
			"filename": "StereoFeedbackEffect.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034843",
				"name": "Tone.StereoFeedbackEffect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.StereoFeedbackEffect~options",
				"this.feedback": "Tone.StereoFeedbackEffect#feedback",
				"this._feedbackL": "Tone.StereoFeedbackEffect#_feedbackL",
				"this._feedbackR": "Tone.StereoFeedbackEffect#_feedbackR"
			}
		},
		"kind": "class",
		"classdesc": "Base class for stereo feedback effects where the effectReturn\n        is fed back into the same channel.",
		"augments": [
			"Tone.StereoEffect"
		],
		"name": "StereoFeedbackEffect",
		"longname": "Tone.StereoFeedbackEffect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  controls the amount of feedback\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				576,
				648
			],
			"filename": "StereoFeedbackEffect.js",
			"lineno": 23,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034872",
				"name": "this.feedback",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "controls the amount of feedback",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.StereoFeedbackEffect#feedback",
		"kind": "member",
		"memberof": "Tone.StereoFeedbackEffect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.StereoFeedbackEffect} this\n\t */",
		"meta": {
			"range": [
				1265,
				1583
			],
			"filename": "StereoFeedbackEffect.js",
			"lineno": 52,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034968",
				"name": "Tone.StereoFeedbackEffect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.feedback": "Tone.StereoFeedbackEffect#feedback",
				"this._feedbackL": "Tone.StereoFeedbackEffect#_feedbackL",
				"this._feedbackR": "Tone.StereoFeedbackEffect#_feedbackR"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.StereoFeedbackEffect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.StereoFeedbackEffect#dispose",
		"kind": "function",
		"memberof": "Tone.StereoFeedbackEffect",
		"scope": "instance",
		"overrides": "Tone.StereoEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Applies a width factor to the mid/side seperation. \n\t *         0 is all mid and 1 is all side.\n\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t *         <br><br>\n\t *         <code>\n\t *         Mid *= 2*(1-width)<br>\n\t *         Side *= 2*width\n\t *         </code>\n\t *\n\t *  @extends {Tone.MidSideEffect}\n\t *  @constructor\n\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t */",
		"meta": {
			"range": [
				677,
				1776
			],
			"filename": "StereoWidener.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035059",
				"name": "Tone.StereoWidener",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.StereoWidener~options",
				"this.width": "Tone.StereoWidener#width",
				"this._midMult": "Tone.StereoWidener#_midMult",
				"this._sideMult": "Tone.StereoWidener#_sideMult",
				"this._two": "Tone.StereoWidener#_two"
			}
		},
		"kind": "class",
		"classdesc": "Applies a width factor to the mid/side seperation. \n        0 is all mid and 1 is all side.\n        Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n        <br><br>\n        <code>\n        Mid *= 2*(1-width)<br>\n        Side *= 2*width\n        </code>",
		"augments": [
			"Tone.MidSideEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange",
						"Object"
					]
				},
				"optional": true,
				"description": "The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.",
				"name": "width"
			}
		],
		"name": "StereoWidener",
		"longname": "Tone.StereoWidener",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				953,
				1019
			],
			"filename": "StereoWidener.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035088",
				"name": "this.width",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "width",
		"longname": "Tone.StereoWidener#width",
		"kind": "member",
		"memberof": "Tone.StereoWidener",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default values\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1902,
				1952
			],
			"filename": "StereoWidener.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035227",
				"name": "Tone.StereoWidener.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}",
				"paramnames": []
			}
		},
		"description": "the default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.StereoWidener.defaults",
		"kind": "member",
		"memberof": "Tone.StereoWidener"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1936,
				1949
			],
			"filename": "StereoWidener.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035234",
				"name": "width",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "width",
		"longname": "Tone.StereoWidener.defaults.width",
		"kind": "member",
		"memberof": "Tone.StereoWidener.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.StereoWidener} this\n\t */",
		"meta": {
			"range": [
				2022,
				2362
			],
			"filename": "StereoWidener.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035237",
				"name": "Tone.StereoWidener.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.width": "Tone.StereoWidener#width",
				"this._midMult": "Tone.StereoWidener#_midMult",
				"this._sideMult": "Tone.StereoWidener#_sideMult",
				"this._two": "Tone.StereoWidener#_two"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.StereoWidener"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.StereoWidener#dispose",
		"kind": "function",
		"memberof": "Tone.StereoWidener",
		"scope": "instance",
		"overrides": "Tone.MidSideEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t *         and right to left instead of on the same channel.\n\t *\n\t *\t@constructor\n\t *\t@extends {Tone.StereoEffect}\n\t */",
		"meta": {
			"range": [
				340,
				1246
			],
			"filename": "StereoXFeedbackEffect.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035339",
				"name": "Tone.StereoXFeedbackEffect",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.StereoXFeedbackEffect~options",
				"this.feedback": "Tone.StereoXFeedbackEffect#feedback",
				"this._feedbackLR": "Tone.StereoXFeedbackEffect#_feedbackLR",
				"this._feedbackRL": "Tone.StereoXFeedbackEffect#_feedbackRL"
			}
		},
		"kind": "class",
		"classdesc": "Just like a stereo feedback effect, but the feedback is routed from left to right\n        and right to left instead of on the same channel.",
		"augments": [
			"Tone.StereoEffect"
		],
		"name": "StereoXFeedbackEffect",
		"longname": "Tone.StereoXFeedbackEffect",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of feedback from the output\n\t\t *  back into the input of the effect (routed\n\t\t *  across left and right channels).\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				687,
				759
			],
			"filename": "StereoXFeedbackEffect.js",
			"lineno": 25,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035368",
				"name": "this.feedback",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.StereoXFeedbackEffect#feedback",
		"kind": "member",
		"memberof": "Tone.StereoXFeedbackEffect",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t */",
		"meta": {
			"range": [
				1384,
				1707
			],
			"filename": "StereoXFeedbackEffect.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035464",
				"name": "Tone.StereoXFeedbackEffect.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.feedback": "Tone.StereoXFeedbackEffect#feedback",
				"this._feedbackLR": "Tone.StereoXFeedbackEffect#_feedbackLR",
				"this._feedbackRL": "Tone.StereoXFeedbackEffect#_feedbackRL"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.StereoXFeedbackEffect"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.StereoXFeedbackEffect#dispose",
		"kind": "function",
		"memberof": "Tone.StereoXFeedbackEffect",
		"scope": "instance",
		"overrides": "Tone.StereoEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t *         The type, frequency, and depth of the LFO is controllable.\n\t *\n\t *  @extends {Tone.StereoEffect}\n\t *  @constructor\n\t *  @param {Frequency} [frequency] The rate of the effect.\n\t *  @param {NormalRange} [depth] The depth of the effect.\n\t *  @example\n\t * //create a tremolo and start it's LFO\n\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t * //route an oscillator through the tremolo and start it\n\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t */",
		"meta": {
			"range": [
				704,
				2376
			],
			"filename": "Tremolo.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035553",
				"name": "Tone.Tremolo",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Tremolo~options",
				"this._lfoL": "Tone.Tremolo#_lfoL",
				"this._lfoR": "Tone.Tremolo#_lfoR",
				"this._amplitudeL": "Tone.Tremolo#_amplitudeL",
				"this._amplitudeR": "Tone.Tremolo#_amplitudeR",
				"this.frequency": "Tone.Tremolo#frequency",
				"this.depth": "Tone.Tremolo#depth",
				"this.type": "Tone.Tremolo#type",
				"this.spread": "Tone.Tremolo#spread"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n        The type, frequency, and depth of the LFO is controllable.",
		"augments": [
			"Tone.StereoEffect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The rate of the effect.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The depth of the effect.",
				"name": "depth"
			}
		],
		"examples": [
			"//create a tremolo and start it's LFO\nvar tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n//route an oscillator through the tremolo and start it\nvar oscillator = new Tone.Oscillator().connect(tremolo).start();"
		],
		"name": "Tremolo",
		"longname": "Tone.Tremolo",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency of the tremolo.\n\t\t *  @type  {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1569,
				1641
			],
			"filename": "Tremolo.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035637",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency of the tremolo.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Tremolo#frequency",
		"kind": "member",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t *  modulate fully between 0 and 1.\n\t\t *  @type  {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1857,
				1923
			],
			"filename": "Tremolo.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035654",
				"name": "this.depth",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The depth of the effect. A depth of 0, has no effect\n on the amplitude, and a depth of 1 makes the amplitude\n modulate fully between 0 and 1.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "depth",
		"longname": "Tone.Tremolo#depth",
		"kind": "member",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2483,
				2585
			],
			"filename": "Tremolo.js",
			"lineno": 94,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035790",
				"name": "Tone.Tremolo.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":180}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Tremolo.defaults",
		"memberof": "Tone.Tremolo"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2511,
				2527
			],
			"filename": "Tremolo.js",
			"lineno": 95,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035797",
				"name": "frequency",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Tremolo.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Tremolo.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2531,
				2546
			],
			"filename": "Tremolo.js",
			"lineno": 96,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035799",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Tremolo.defaults.type",
		"kind": "member",
		"memberof": "Tone.Tremolo.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2550,
				2563
			],
			"filename": "Tremolo.js",
			"lineno": 97,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035801",
				"name": "depth",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "depth",
		"longname": "Tone.Tremolo.defaults.depth",
		"kind": "member",
		"memberof": "Tone.Tremolo.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2567,
				2581
			],
			"filename": "Tremolo.js",
			"lineno": 98,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035803",
				"name": "spread",
				"type": "Literal",
				"value": 180
			}
		},
		"undocumented": true,
		"name": "spread",
		"longname": "Tone.Tremolo.defaults.spread",
		"kind": "member",
		"memberof": "Tone.Tremolo.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Start the tremolo.\n\t * @param {Time} [time=now] When the tremolo begins.\n\t * @returns {Tone.Tremolo} this\n\t */",
		"meta": {
			"range": [
				2709,
				2825
			],
			"filename": "Tremolo.js",
			"lineno": 106,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035806",
				"name": "Tone.Tremolo.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the tremolo.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the tremolo begins.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Tremolo"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Tremolo#start",
		"kind": "function",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Stop the tremolo.\n\t * @param {Time} [time=now] When the tremolo stops.\n\t * @returns {Tone.Tremolo} this\n\t */",
		"meta": {
			"range": [
				2947,
				3060
			],
			"filename": "Tremolo.js",
			"lineno": 117,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035836",
				"name": "Tone.Tremolo.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the tremolo.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the tremolo stops.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Tremolo"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Tremolo#stop",
		"kind": "function",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Sync the effect to the transport.\n\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t *                              Transport has started.\n\t * @returns {Tone.AutoFilter} this\n\t */",
		"meta": {
			"range": [
				3280,
				3396
			],
			"filename": "Tremolo.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035866",
				"name": "Tone.Tremolo.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": [
					"delay"
				]
			}
		},
		"description": "Sync the effect to the transport.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "Delay time before starting the effect after the\n                             Transport has started.",
				"name": "delay"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AutoFilter"
					]
				},
				"description": "this"
			}
		],
		"name": "sync",
		"longname": "Tone.Tremolo#sync",
		"kind": "function",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Unsync the filter from the transport\n\t * @returns {Tone.Tremolo} this\n\t */",
		"meta": {
			"range": [
				3484,
				3591
			],
			"filename": "Tremolo.js",
			"lineno": 139,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035896",
				"name": "Tone.Tremolo.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Unsync the filter from the transport",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Tremolo"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.Tremolo#unsync",
		"kind": "function",
		"memberof": "Tone.Tremolo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The Tremolo's oscillator type.\n\t * @memberOf Tone.Tremolo#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "Tremolo.js",
			"lineno": 145,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "The Tremolo's oscillator type.",
		"memberof": "Tone.Tremolo",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.Tremolo#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/** \n\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t * @memberOf Tone.Tremolo#\n\t * @type {Degrees}\n\t * @name spread\n\t */",
		"meta": {
			"filename": "Tremolo.js",
			"lineno": 161,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\nWhen set to 180, LFO's will be panned hard left and right respectively.",
		"memberof": "Tone.Tremolo",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "spread",
		"longname": "Tone.Tremolo#spread",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Tremolo} this\n\t */",
		"meta": {
			"range": [
				4441,
				4845
			],
			"filename": "Tremolo.js",
			"lineno": 182,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036019",
				"name": "Tone.Tremolo.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._lfoL": "Tone.Tremolo#_lfoL",
				"this._lfoR": "Tone.Tremolo#_lfoR",
				"this._amplitudeL": "Tone.Tremolo#_amplitudeL",
				"this._amplitudeR": "Tone.Tremolo#_amplitudeR",
				"this.frequency": "Tone.Tremolo#frequency",
				"this.depth": "Tone.Tremolo#depth"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Tremolo"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Tremolo#dispose",
		"kind": "function",
		"memberof": "Tone.Tremolo",
		"scope": "instance",
		"overrides": "Tone.StereoEffect#dispose"
	},
	{
		"comment": "/**\n\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t *         and fall. \n\t *  @extends {Tone.Effect}\n\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t */",
		"meta": {
			"range": [
				472,
				1518
			],
			"filename": "Vibrato.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036135",
				"name": "Tone.Vibrato",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Vibrato~options",
				"this._delayNode": "Tone.Vibrato#_delayNode",
				"this._lfo": "Tone.Vibrato#_lfo",
				"this.frequency": "Tone.Vibrato#frequency",
				"this.depth": "Tone.Vibrato#depth",
				"this.depth.value": "Tone.Vibrato#depth.value"
			}
		},
		"kind": "class",
		"classdesc": "A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n        modulates the delayTime of the delay, causing the pitch to rise\n        and fall.",
		"augments": [
			"Tone.Effect"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The frequency of the vibrato.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"description": "The amount the pitch is modulated.",
				"name": "depth"
			}
		],
		"name": "Vibrato",
		"longname": "Tone.Vibrato",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency of the vibrato\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1216,
				1252
			],
			"filename": "Vibrato.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036216",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._lfo.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency of the vibrato",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Vibrato#frequency",
		"kind": "member",
		"memberof": "Tone.Vibrato",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The depth of the vibrato. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1342,
				1374
			],
			"filename": "Vibrato.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036226",
				"name": "this.depth",
				"type": "MemberExpression",
				"value": "this._lfo.amplitude",
				"paramnames": []
			}
		},
		"description": "The depth of the vibrato.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "depth",
		"longname": "Tone.Vibrato#depth",
		"kind": "member",
		"memberof": "Tone.Vibrato",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @type  {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1625,
				1729
			],
			"filename": "Vibrato.js",
			"lineno": 64,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036278",
				"name": "Tone.Vibrato.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Vibrato.defaults",
		"memberof": "Tone.Vibrato",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1653,
				1671
			],
			"filename": "Vibrato.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036285",
				"name": "maxDelay",
				"type": "Literal",
				"value": 0.005
			}
		},
		"undocumented": true,
		"name": "maxDelay",
		"longname": "Tone.Vibrato.defaults.maxDelay",
		"kind": "member",
		"memberof": "Tone.Vibrato.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1675,
				1690
			],
			"filename": "Vibrato.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036287",
				"name": "frequency",
				"type": "Literal",
				"value": 5
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Vibrato.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Vibrato.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1694,
				1707
			],
			"filename": "Vibrato.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036289",
				"name": "depth",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "depth",
		"longname": "Tone.Vibrato.defaults.depth",
		"kind": "member",
		"memberof": "Tone.Vibrato.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1711,
				1726
			],
			"filename": "Vibrato.js",
			"lineno": 68,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036291",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Vibrato.defaults.type",
		"kind": "member",
		"memberof": "Tone.Vibrato.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Type of oscillator attached to the Vibrato.\n\t * @memberOf Tone.Vibrato#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "Vibrato.js",
			"lineno": 71,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {}
		},
		"description": "Type of oscillator attached to the Vibrato.",
		"memberof": "Tone.Vibrato",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.Vibrato#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Vibrato} this\n\t */",
		"meta": {
			"range": [
				2080,
				2357
			],
			"filename": "Vibrato.js",
			"lineno": 90,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100036327",
				"name": "Tone.Vibrato.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._delayNode": "Tone.Vibrato#_delayNode",
				"this._lfo": "Tone.Vibrato#_lfo",
				"this.frequency": "Tone.Vibrato#frequency",
				"this.depth": "Tone.Vibrato#depth"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Vibrato"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Vibrato#dispose",
		"kind": "function",
		"memberof": "Tone.Vibrato",
		"scope": "instance",
		"overrides": "Tone.Effect#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t *          callback for a single or repeatable events along the timeline. \n\t *\n\t *  @extends {Tone}\n\t *  @param {function} callback The callback to invoke at the time. \n\t *  @param {*} value The value or values which should be passed to\n\t *                      the callback function on invocation.  \n\t *  @example\n\t * var chord = new Tone.Event(function(time, chord){\n\t * \t//the chord as well as the exact time of the event\n\t * \t//are passed in as arguments to the callback function\n\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t * //start the chord at the beginning of the transport timeline\n\t * chord.start();\n\t * //loop it every measure for 8 measures\n\t * chord.loop = 8;\n\t * chord.loopEnd = \"1m\";\n\t */",
		"meta": {
			"range": [
				918,
				2601
			],
			"filename": "Event.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036415",
				"name": "Tone.Event",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Event~options",
				"this._loop": "Tone.Event#_loop",
				"this.callback": "Tone.Event#callback",
				"this.value": "Tone.Event#value",
				"this._loopStart": "Tone.Event#_loopStart",
				"this._loopEnd": "Tone.Event#_loopEnd",
				"this._state": "Tone.Event#_state",
				"this._playbackRate": "Tone.Event#_playbackRate",
				"this._startOffset": "Tone.Event#_startOffset",
				"this._probability": "Tone.Event#_probability",
				"this._humanize": "Tone.Event#_humanize",
				"this.mute": "Tone.Event#mute",
				"this.playbackRate": "Tone.Event#playbackRate"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n         callback for a single or repeatable events along the timeline.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke at the time.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value or values which should be passed to\n                     the callback function on invocation.",
				"name": "value"
			}
		],
		"examples": [
			"var chord = new Tone.Event(function(time, chord){\n\t//the chord as well as the exact time of the event\n\t//are passed in as arguments to the callback function\n}, [\"D4\", \"E4\", \"F4\"]);\n//start the chord at the beginning of the transport timeline\nchord.start();\n//loop it every measure for 8 measures\nchord.loop = 8;\nchord.loopEnd = \"1m\";"
		],
		"name": "Event",
		"longname": "Tone.Event",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke. \n\t\t *  @type  {Function}\n\t\t */",
		"meta": {
			"range": [
				1216,
				1248
			],
			"filename": "Event.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036450",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback to invoke.",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Event#callback",
		"kind": "member",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				2501,
				2525
			],
			"filename": "Event.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036532",
				"name": "this.mute",
				"type": "MemberExpression",
				"value": "options.mute",
				"paramnames": []
			}
		},
		"description": "If mute is true, the callback won't be\n invoked.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.Event#mute",
		"kind": "member",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				2699,
				2909
			],
			"filename": "Event.js",
			"lineno": 119,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036556",
				"name": "Tone.Event.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "The default values",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Event.defaults",
		"memberof": "Tone.Event",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2725,
				2747
			],
			"filename": "Event.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036563",
				"name": "callback",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "callback",
		"longname": "Tone.Event.defaults.callback",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2751,
				2765
			],
			"filename": "Event.js",
			"lineno": 121,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036567",
				"name": "loop",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "loop",
		"longname": "Tone.Event.defaults.loop",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2769,
				2785
			],
			"filename": "Event.js",
			"lineno": 122,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036569",
				"name": "loopEnd",
				"type": "Literal",
				"value": "1m"
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.Event.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2789,
				2804
			],
			"filename": "Event.js",
			"lineno": 123,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036571",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.Event.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2808,
				2826
			],
			"filename": "Event.js",
			"lineno": 124,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036573",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.Event.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2830,
				2844
			],
			"filename": "Event.js",
			"lineno": 125,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036575",
				"name": "value",
				"type": "Literal",
				"value": null
			}
		},
		"undocumented": true,
		"name": "value",
		"longname": "Tone.Event.defaults.value",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2848,
				2865
			],
			"filename": "Event.js",
			"lineno": 126,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036577",
				"name": "probability",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "probability",
		"longname": "Tone.Event.defaults.probability",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2869,
				2883
			],
			"filename": "Event.js",
			"lineno": 127,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036579",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Event.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2887,
				2905
			],
			"filename": "Event.js",
			"lineno": 128,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036581",
				"name": "humanize",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "humanize",
		"longname": "Tone.Event.defaults.humanize",
		"kind": "member",
		"memberof": "Tone.Event.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.Event#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 172,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.Event",
		"name": "state",
		"longname": "Tone.Event#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 201,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The probability of the notes being triggered.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "probability",
		"longname": "Tone.Event#probability",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t *  @example\n\t * event.humanize = true;\n\t *  @type {Boolean|Time}\n\t *  @name humanize\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 216,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "If set to true, will apply small random variation\n to the callback time. If the value is given as a time, it will randomize\n by that amount.",
		"examples": [
			"event.humanize = true;\n "
		],
		"type": {
			"names": [
				"Boolean",
				"Time"
			]
		},
		"name": "humanize",
		"longname": "humanize",
		"kind": "member",
		"scope": "global"
	},
	{
		"comment": "/**\n\t *  Start the note at the given time. \n\t *  @param  {TimelinePosition}  time  When the note should start.\n\t *  @return  {Tone.Event}  this\n\t */",
		"meta": {
			"range": [
				5927,
				6222
			],
			"filename": "Event.js",
			"lineno": 239,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036937",
				"name": "Tone.Event.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Event#start~time"
			}
		},
		"description": "Start the note at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "When the note should start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Event"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Event#start",
		"kind": "function",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the Event at the given time.\n\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t *  @return  {Tone.Event}  this\n\t */",
		"meta": {
			"range": [
				6374,
				6810
			],
			"filename": "Event.js",
			"lineno": 257,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036998",
				"name": "Tone.Event.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Event#stop~time",
				"previousEvent": "Tone.Event#stop~previousEvent",
				"reschedulTime": "Tone.Event#stop~reschedulTime"
			}
		},
		"description": "Stop the Event at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "When the note should stop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Event"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Event#stop",
		"kind": "function",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Event}  this\n\t */",
		"meta": {
			"range": [
				7017,
				7270
			],
			"filename": "Event.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037085",
				"name": "Tone.Event.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Event#cancel~time",
				"": null
			}
		},
		"description": "Cancel all scheduled events greater than or equal to the given time",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The time after which events will be cancel.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Event"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Event#cancel",
		"kind": "function",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  If the note should loop or not\n\t *  between Tone.Event.loopStart and \n\t *  Tone.Event.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Event does after it starts.\n\t *  @memberOf Tone.Event#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 318,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "If the note should loop or not\n between Tone.Event.loopStart and \n Tone.Event.loopEnd. An integer\n value corresponds to the number of\n loops the Event does after it starts.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"Boolean",
				"Positive"
			]
		},
		"name": "loop",
		"longname": "Tone.Event#loop",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * \tThe playback rate of the note. Defaults to 1.\n\t *  @memberOf Tone.Event#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t *  @example\n\t * note.loop = true;\n\t * //repeat the note twice as fast\n\t * note.playbackRate = 2;\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 338,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The playback rate of the note. Defaults to 1.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "playbackRate",
		"examples": [
			"note.loop = true;\n//repeat the note twice as fast\nnote.playbackRate = 2;"
		],
		"longname": "Tone.Event#playbackRate",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The loopEnd point is the time the event will loop\n\t *  if Tone.Event.loop is true.\n\t *  @memberOf Tone.Event#\n\t *  @type {TransportTime}\n\t *  @name loopEnd\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 358,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The loopEnd point is the time the event will loop\n if Tone.Event.loop is true.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.Event#loopEnd",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The time when the loop should start. \n\t *  @memberOf Tone.Event#\n\t *  @type {TransportTime}\n\t *  @name loopStart\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 377,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The time when the loop should start.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopStart",
		"longname": "Tone.Event#loopStart",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 395,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
		"memberof": "Tone.Event",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "progress",
		"readonly": true,
		"longname": "Tone.Event#progress",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Event}  this\n\t */",
		"meta": {
			"range": [
				10657,
				10811
			],
			"filename": "Event.js",
			"lineno": 426,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037527",
				"name": "Tone.Event.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._state": "Tone.Event#_state",
				"this.callback": "Tone.Event#callback",
				"this.value": "Tone.Event#value"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Event"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Event#dispose",
		"kind": "function",
		"memberof": "Tone.Event",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Loop creates a looped callback at the \n\t *         specified interval. The callback can be \n\t *         started, stopped and scheduled along\n\t *         the Transport's timeline. \n\t *  @example\n\t * var loop = new Tone.Loop(function(time){\n\t * \t//triggered every eighth note. \n\t * \tconsole.log(time);\n\t * }, \"8n\").start(0);\n\t * Tone.Transport.start();\n\t *  @extends {Tone}\n\t *  @param {Function} callback The callback to invoke with the event.\n\t *  @param {Time} interval The time between successive callback calls. \n\t */",
		"meta": {
			"range": [
				610,
				1203
			],
			"filename": "Loop.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037583",
				"name": "Tone.Loop",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Loop~options",
				"this._event": "Tone.Loop#_event",
				"this.callback": "Tone.Loop#callback",
				"this.iterations": "Tone.Loop#iterations"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Loop creates a looped callback at the \n        specified interval. The callback can be \n        started, stopped and scheduled along\n        the Transport's timeline.",
		"examples": [
			"var loop = new Tone.Loop(function(time){\n\t//triggered every eighth note. \n\tconsole.log(time);\n}, \"8n\").start(0);\nTone.Transport.start();\n "
		],
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with the event.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time between successive callback calls.",
				"name": "interval"
			}
		],
		"name": "Loop",
		"longname": "Tone.Loop",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The event which produces the callbacks\n\t\t */",
		"meta": {
			"range": [
				793,
				999
			],
			"filename": "Loop.js",
			"lineno": 26,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037610",
				"name": "this._event",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The event which produces the callbacks",
		"name": "_event",
		"longname": "Tone.Loop#_event",
		"kind": "member",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke with the next event in the pattern\n\t\t *  @type {Function}\n\t\t */",
		"meta": {
			"range": [
				1103,
				1135
			],
			"filename": "Loop.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037642",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback to invoke with the next event in the pattern",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Loop#callback",
		"kind": "member",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1294,
				1456
			],
			"filename": "Loop.js",
			"lineno": 51,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037666",
				"name": "Tone.Loop.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Loop.defaults",
		"memberof": "Tone.Loop",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1319,
				1336
			],
			"filename": "Loop.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037673",
				"name": "interval",
				"type": "Literal",
				"value": "4n"
			}
		},
		"undocumented": true,
		"name": "interval",
		"longname": "Tone.Loop.defaults.interval",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1340,
				1362
			],
			"filename": "Loop.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037675",
				"name": "callback",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "callback",
		"longname": "Tone.Loop.defaults.callback",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1366,
				1384
			],
			"filename": "Loop.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037679",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.Loop.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1388,
				1411
			],
			"filename": "Loop.js",
			"lineno": 55,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037681",
				"name": "iterations",
				"type": "Identifier",
				"value": "Infinity"
			}
		},
		"undocumented": true,
		"name": "iterations",
		"longname": "Tone.Loop.defaults.iterations",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1415,
				1435
			],
			"filename": "Loop.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037683",
				"name": "probability",
				"type": "Literal",
				"value": true
			}
		},
		"undocumented": true,
		"name": "probability",
		"longname": "Tone.Loop.defaults.probability",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1439,
				1453
			],
			"filename": "Loop.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037685",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Loop.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Loop.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start the loop at the specified time along the Transport's\n\t *  timeline.\n\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				1645,
				1733
			],
			"filename": "Loop.js",
			"lineno": 66,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037688",
				"name": "Tone.Loop.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the loop at the specified time along the Transport's\n timeline.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"description": "When to start the Loop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Loop#start",
		"kind": "function",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the loop at the given time.\n\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				1883,
				1969
			],
			"filename": "Loop.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037710",
				"name": "Tone.Loop.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the loop at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"description": "When to stop the Arpeggio",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Loop#stop",
		"kind": "function",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				2175,
				2265
			],
			"filename": "Loop.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037732",
				"name": "Tone.Loop.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Cancel all scheduled events greater than or equal to the given time",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The time after which events will be cancel.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Loop#cancel",
		"kind": "function",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The state of the Loop, either started or stopped.\n\t *  @memberOf Tone.Loop#\n\t *  @type {String}\n\t *  @name state\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The state of the Loop, either started or stopped.",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "state",
		"readonly": true,
		"longname": "Tone.Loop#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The progress of the loop as a value between 0-1. 0, when\n\t *  the loop is stopped or done iterating. \n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The progress of the loop as a value between 0-1. 0, when\n the loop is stopped or done iterating.",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "progress",
		"readonly": true,
		"longname": "Tone.Loop#progress",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The time between successive callbacks. \n\t *  @example\n\t * loop.interval = \"8n\"; //loop every 8n\n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name interval\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 127,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The time between successive callbacks.",
		"examples": [
			"loop.interval = \"8n\"; //loop every 8n\n "
		],
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "interval",
		"longname": "Tone.Loop#interval",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t *  A `playbackRate` of 2 would be twice as fast. \n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name playbackRate\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The playback rate of the loop. The normal playback rate is 1 (no change). \n A `playbackRate` of 2 would be twice as fast.",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.Loop#playbackRate",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Random variation +/-0.01s to the scheduled time. \n\t *  Or give it a time value which it will randomize by.\n\t *  @type {Boolean|Time}\n\t *  @memberOf Tone.Loop#\n\t *  @name humanize\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 160,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Random variation +/-0.01s to the scheduled time. \n Or give it a time value which it will randomize by.",
		"type": {
			"names": [
				"Boolean",
				"Time"
			]
		},
		"memberof": "Tone.Loop",
		"name": "humanize",
		"longname": "Tone.Loop#humanize",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The probably of the callback being invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 176,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The probably of the callback being invoked.",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "probability",
		"longname": "Tone.Loop#probability",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Muting the Loop means that no callbacks are invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {Boolean}\n\t *  @name mute\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Muting the Loop means that no callbacks are invoked.",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.Loop#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The number of iterations of the loop. The default\n\t *  value is Infinity (loop forever).\n\t *  @memberOf Tone.Loop#\n\t *  @type {Positive}\n\t *  @name iterations\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 206,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The number of iterations of the loop. The default\n value is Infinity (loop forever).",
		"memberof": "Tone.Loop",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "iterations",
		"longname": "Tone.Loop#iterations",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				5392,
				5507
			],
			"filename": "Loop.js",
			"lineno": 234,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038038",
				"name": "Tone.Loop.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._event": "Tone.Loop#_event",
				"this.callback": "Tone.Loop#callback"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Loop#dispose",
		"kind": "function",
		"memberof": "Tone.Loop",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Part is a collection Tone.Events which can be\n\t *         started/stopped and looped as a single unit.\n\t *\n\t *  @extends {Tone.Event}\n\t *  @param {Function} callback The callback to invoke on each event\n\t *  @param {Array} events the array of events\n\t *  @example\n\t * var part = new Tone.Part(function(time, note){\n\t * \t//the notes given as the second element in the array\n\t * \t//will be passed in as the second argument\n\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t *  @example\n\t * //use an array of objects as long as the object has a \"time\" attribute\n\t * var part = new Tone.Part(function(time, value){\n\t * \t//the value is an object which contains both the note and the velocity\n\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t * ]).start(0);\n\t */",
		"meta": {
			"range": [
				1096,
				1557
			],
			"filename": "Part.js",
			"lineno": 27,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038087",
				"name": "Tone.Part",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Part~options",
				"this._events": "Tone.Part#_events",
				"i": "Tone.Part~i"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Part is a collection Tone.Events which can be\n        started/stopped and looped as a single unit.",
		"augments": [
			"Tone.Event"
		],
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke on each event",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "the array of events",
				"name": "events"
			}
		],
		"examples": [
			"var part = new Tone.Part(function(time, note){\n\t//the notes given as the second element in the array\n\t//will be passed in as the second argument\n\tsynth.triggerAttackRelease(note, \"8n\", time);\n}, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n ",
			"//use an array of objects as long as the object has a \"time\" attribute\nvar part = new Tone.Part(function(time, value){\n\t//the value is an object which contains both the note and the velocity\n\tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n}, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n]).start(0);"
		],
		"name": "Part",
		"longname": "Tone.Part",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1666,
				1873
			],
			"filename": "Part.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038190",
				"name": "Tone.Part.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The default values",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Part.defaults",
		"memberof": "Tone.Part",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1691,
				1713
			],
			"filename": "Part.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038197",
				"name": "callback",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "callback",
		"longname": "Tone.Part.defaults.callback",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1717,
				1731
			],
			"filename": "Part.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038201",
				"name": "loop",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "loop",
		"longname": "Tone.Part.defaults.loop",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1735,
				1751
			],
			"filename": "Part.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038203",
				"name": "loopEnd",
				"type": "Literal",
				"value": "1m"
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.Part.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1755,
				1770
			],
			"filename": "Part.js",
			"lineno": 60,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038205",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.Part.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1774,
				1792
			],
			"filename": "Part.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038207",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.Part.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1796,
				1813
			],
			"filename": "Part.js",
			"lineno": 62,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038209",
				"name": "probability",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "probability",
		"longname": "Tone.Part.defaults.probability",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1817,
				1835
			],
			"filename": "Part.js",
			"lineno": 63,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038211",
				"name": "humanize",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "humanize",
		"longname": "Tone.Part.defaults.humanize",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1839,
				1853
			],
			"filename": "Part.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038213",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Part.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1857,
				1870
			],
			"filename": "Part.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038215",
				"name": "events",
				"type": "ArrayExpression",
				"value": "[]"
			}
		},
		"undocumented": true,
		"name": "events",
		"longname": "Tone.Part.defaults.events",
		"kind": "member",
		"memberof": "Tone.Part.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start the part at the given time. \n\t *  @param  {TransportTime}  time    When to start the part.\n\t *  @param  {Time=}  offset  The offset from the start of the part\n\t *                           to begin playing at.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				2140,
				2669
			],
			"filename": "Part.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038218",
				"name": "Tone.Part.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset"
				]
			},
			"vars": {
				"ticks": "Tone.Part#start~ticks",
				"offset": "Tone.Part#start~offset",
				"": null
			}
		},
		"description": "Start the part at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"description": "When to start the part.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The offset from the start of the part\n                          to begin playing at.",
				"name": "offset"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Part#start",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance",
		"overrides": "Tone.Event#start"
	},
	{
		"comment": "/**\n\t *  Stop the part at the given time.\n\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				4060,
				4300
			],
			"filename": "Part.js",
			"lineno": 148,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038485",
				"name": "Tone.Part.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"ticks": "Tone.Part#stop~ticks",
				"": null
			}
		},
		"description": "Stop the part at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "When to stop the part.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Part#stop",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance",
		"overrides": "Tone.Event#stop"
	},
	{
		"comment": "/**\n\t *  Get/Set an Event's value at the given time. \n\t *  If a value is passed in and no event exists at\n\t *  the given time, one will be created with that value. \n\t *  If two events are at the same time, the first one will\n\t *  be returned.\n\t *  @example\n\t * part.at(\"1m\"); //returns the part at the first measure\n\t *\n\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t * //if an event didn't exist at that time, it will be created.\n\t *  @param {TransportTime} time The time of the event to get or set.\n\t *  @param {*=} value If a value is passed in, the value of the\n\t *                    event at the given time will be set to it.\n\t *  @return {Tone.Event} the event at the time\n\t */",
		"meta": {
			"range": [
				5001,
				5582
			],
			"filename": "Part.js",
			"lineno": 174,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038542",
				"name": "Tone.Part.prototype.at",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"value"
				]
			},
			"vars": {
				"time": "Tone.Part#at~time",
				"tickTime": "Tone.Part#at~tickTime",
				"i": "Tone.Part#at~i",
				"event": "Tone.Part#at~event",
				"event.value": "Tone.Part#at~event.value"
			}
		},
		"description": "Get/Set an Event's value at the given time. \n If a value is passed in and no event exists at\n the given time, one will be created with that value. \n If two events are at the same time, the first one will\n be returned.",
		"examples": [
			"part.at(\"1m\"); //returns the part at the first measure\n\npart.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n//if an event didn't exist at that time, it will be created.\n "
		],
		"params": [
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"description": "The time of the event to get or set.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"optional": true,
				"description": "If a value is passed in, the value of the\n                   event at the given time will be set to it.",
				"name": "value"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Event"
					]
				},
				"description": "the event at the time"
			}
		],
		"name": "at",
		"longname": "Tone.Part#at",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add a an event to the part. \n\t *  @param {Time} time The time the note should start.\n\t *                            If an object is passed in, it should\n\t *                            have a 'time' attribute and the rest\n\t *                            of the object will be used as the 'value'.\n\t *  @param  {Tone.Event|*}  value \n\t *  @returns {Tone.Part} this\n\t *  @example\n\t * part.add(\"1m\", \"C#+11\");\n\t */",
		"meta": {
			"range": [
				6006,
				6827
			],
			"filename": "Part.js",
			"lineno": 207,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038660",
				"name": "Tone.Part.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"value"
				]
			},
			"vars": {
				"value": "Tone.Part#add~value",
				"time": "Tone.Part#add~time",
				"event": "Tone.Part#add~event",
				"event.callback": "Tone.Part#add~event.callback",
				"event.startOffset": "Tone.Part#add~event.startOffset"
			}
		},
		"description": "Add a an event to the part.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time the note should start.\n                           If an object is passed in, it should\n                           have a 'time' attribute and the rest\n                           of the object will be used as the 'value'.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Tone.Event",
						"*"
					]
				},
				"name": "value"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"part.add(\"1m\", \"C#+11\");"
		],
		"name": "add",
		"longname": "Tone.Part#add",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove an event from the part. Will recursively iterate\n\t *  into nested parts to find the event.\n\t *  @param {Time} time The time of the event\n\t *  @param {*} value Optionally select only a specific event value\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				7505,
				8071
			],
			"filename": "Part.js",
			"lineno": 267,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038858",
				"name": "Tone.Part.prototype.remove",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"value"
				]
			},
			"vars": {
				"value": "Tone.Part#remove~value",
				"time": "Tone.Part#remove~time",
				"i": "Tone.Part#remove~i",
				"event": "Tone.Part#remove~event"
			}
		},
		"description": "Remove an event from the part. Will recursively iterate\n into nested parts to find the event.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time of the event",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "Optionally select only a specific event value",
				"name": "value"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "remove",
		"longname": "Tone.Part#remove",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Remove all of the notes from the group. \n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				8163,
				8304
			],
			"filename": "Part.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038979",
				"name": "Tone.Part.prototype.removeAll",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null,
				"this._events": "Tone.Part#_events"
			}
		},
		"description": "Remove all of the notes from the group.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "removeAll",
		"longname": "Tone.Part#removeAll",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				8508,
				8677
			],
			"filename": "Part.js",
			"lineno": 307,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039011",
				"name": "Tone.Part.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Cancel scheduled state change events: i.e. \"start\" and \"stop\".",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "The time after which to cancel the scheduled events.",
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Part#cancel",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance",
		"overrides": "Tone.Event#cancel"
	},
	{
		"comment": "/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Part#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 376,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The probability of the notes being triggered.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "probability",
		"longname": "Tone.Part#probability",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Event#probability"
	},
	{
		"comment": "/**\n\t *  If set to true, will apply small random variation\n\t *  to the callback time. If the value is given as a time, it will randomize\n\t *  by that amount.\n\t *  @example\n\t * event.humanize = true;\n\t *  @type {Boolean|Time}\n\t *  @name humanize\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 392,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "If set to true, will apply small random variation\n to the callback time. If the value is given as a time, it will randomize\n by that amount.",
		"examples": [
			"event.humanize = true;\n "
		],
		"type": {
			"names": [
				"Boolean",
				"Time"
			]
		},
		"name": "humanize",
		"longname": "humanize",
		"kind": "member",
		"scope": "global"
	},
	{
		"comment": "/**\n\t *  If the part should loop or not\n\t *  between Tone.Part.loopStart and \n\t *  Tone.Part.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Part does after it starts.\n\t *  @memberOf Tone.Part#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t *  @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 411,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "If the part should loop or not\n between Tone.Part.loopStart and \n Tone.Part.loopEnd. An integer\n value corresponds to the number of\n loops the Part does after it starts.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"Boolean",
				"Positive"
			]
		},
		"name": "loop",
		"examples": [
			"//loop the part 8 times\npart.loop = 8;"
		],
		"longname": "Tone.Part#loop",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Event#loop"
	},
	{
		"comment": "/**\n\t *  The loopEnd point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopEnd\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 439,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The loopEnd point determines when it will \n loop if Tone.Part.loop is true.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.Part#loopEnd",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Event#loopEnd"
	},
	{
		"comment": "/**\n\t *  The loopStart point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopStart\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 461,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The loopStart point determines when it will \n loop if Tone.Part.loop is true.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopStart",
		"longname": "Tone.Part#loopStart",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Event#loopStart"
	},
	{
		"comment": "/**\n\t * \tThe playback rate of the part\n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 483,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The playback rate of the part",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.Part#playbackRate",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Event#playbackRate"
	},
	{
		"comment": "/**\n\t * \tThe number of scheduled notes in the part. \n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name length\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 499,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The number of scheduled notes in the part.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "length",
		"readonly": true,
		"longname": "Tone.Part#length",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				13350,
				13523
			],
			"filename": "Part.js",
			"lineno": 516,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039561",
				"name": "Tone.Part.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._state": "Tone.Part#_state",
				"this.callback": "Tone.Part#callback",
				"this._events": "Tone.Part#_events"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Part#dispose",
		"kind": "function",
		"memberof": "Tone.Part",
		"scope": "instance",
		"overrides": "Tone.Event#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Pattern arpeggiates between the given notes\n\t *         in a number of patterns. See Tone.CtrlPattern for\n\t *         a full list of patterns.\n\t *  @example\n\t * var pattern = new Tone.Pattern(function(time, note){\n\t *   //the order of the notes passed in depends on the pattern\n\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t *  @extends {Tone.Loop}\n\t *  @param {Function} callback The callback to invoke with the\n\t *                             event.\n\t *  @param {Array} values The values to arpeggiate over.\n\t */",
		"meta": {
			"range": [
				630,
				1003
			],
			"filename": "Pattern.js",
			"lineno": 16,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039620",
				"name": "Tone.Pattern",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Pattern~options",
				"this._pattern": "Tone.Pattern#_pattern"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Pattern arpeggiates between the given notes\n        in a number of patterns. See Tone.CtrlPattern for\n        a full list of patterns.",
		"examples": [
			"var pattern = new Tone.Pattern(function(time, note){\n  //the order of the notes passed in depends on the pattern\n}, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n "
		],
		"augments": [
			"Tone.Loop"
		],
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with the\n                            event.",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The values to arpeggiate over.",
				"name": "values"
			}
		],
		"name": "Pattern",
		"longname": "Tone.Pattern",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1108,
				1219
			],
			"filename": "Pattern.js",
			"lineno": 40,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039684",
				"name": "Tone.Pattern.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Pattern.defaults",
		"memberof": "Tone.Pattern",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1136,
				1172
			],
			"filename": "Pattern.js",
			"lineno": 41,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039691",
				"name": "pattern",
				"type": "MemberExpression",
				"value": "Tone.CtrlPattern.Type.Up"
			}
		},
		"undocumented": true,
		"name": "pattern",
		"longname": "Tone.Pattern.defaults.pattern",
		"kind": "member",
		"memberof": "Tone.Pattern.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1176,
				1198
			],
			"filename": "Pattern.js",
			"lineno": 42,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039699",
				"name": "callback",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "callback",
		"longname": "Tone.Pattern.defaults.callback",
		"kind": "member",
		"memberof": "Tone.Pattern.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1202,
				1215
			],
			"filename": "Pattern.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039703",
				"name": "values",
				"type": "ArrayExpression",
				"value": "[]"
			}
		},
		"undocumented": true,
		"name": "values",
		"longname": "Tone.Pattern.defaults.values",
		"kind": "member",
		"memberof": "Tone.Pattern.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The current index in the values array.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {Positive}\n\t *  @name index\n\t */",
		"meta": {
			"filename": "Pattern.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The current index in the values array.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "index",
		"longname": "Tone.Pattern#index",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The array of events.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {Array}\n\t *  @name values\n\t */",
		"meta": {
			"filename": "Pattern.js",
			"lineno": 71,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The array of events.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "values",
		"longname": "Tone.Pattern#values",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The current value of the pattern.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {*}\n\t *  @name value\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Pattern.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The current value of the pattern.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"*"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.Pattern#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t *  @memberOf Tone.Pattern#\n\t *  @type {String}\n\t *  @name pattern\n\t */",
		"meta": {
			"filename": "Pattern.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The pattern type. See Tone.CtrlPattern for the full list of patterns.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "pattern",
		"longname": "Tone.Pattern#pattern",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return  {Tone.Pattern}  this\n\t */",
		"meta": {
			"range": [
				2705,
				2845
			],
			"filename": "Pattern.js",
			"lineno": 118,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039856",
				"name": "Tone.Pattern.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._pattern": "Tone.Pattern#_pattern"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Pattern"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Pattern#dispose",
		"kind": "function",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"overrides": "Tone.Loop#dispose"
	},
	{
		"comment": "/**\n\t *  @class A sequence is an alternate notation of a part. Instead\n\t *         of passing in an array of [time, event] pairs, pass\n\t *         in an array of events which will be spaced at the\n\t *         given subdivision. Sub-arrays will subdivide that beat\n\t *         by the number of items are in the array. \n\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t *  @param  {Function}  callback  The callback to invoke with every note\n\t *  @param  {Array}    events  The sequence\n\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t *  @extends {Tone.Part}\n\t *  @example\n\t * var seq = new Tone.Sequence(function(time, note){\n\t * \tconsole.log(note);\n\t * //straight quater notes\n\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t *  @example\n\t * var seq = new Tone.Sequence(function(time, note){\n\t * \tconsole.log(note);\n\t * //subdivisions are given as subarrays\n\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t */",
		"meta": {
			"range": [
				1086,
				1841
			],
			"filename": "Sequence.js",
			"lineno": 27,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039910",
				"name": "Tone.Sequence",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Sequence~options",
				"events": "Tone.Sequence~events",
				"this._subdivision": "Tone.Sequence#_subdivision",
				"this._loopEnd": "Tone.Sequence#_loopEnd",
				"this._loop": "Tone.Sequence#_loop",
				"i": "Tone.Sequence~i"
			}
		},
		"kind": "class",
		"classdesc": "A sequence is an alternate notation of a part. Instead\n        of passing in an array of [time, event] pairs, pass\n        in an array of events which will be spaced at the\n        given subdivision. Sub-arrays will subdivide that beat\n        by the number of items are in the array. \n        Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every note",
				"name": "callback"
			},
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"description": "The sequence",
				"name": "events"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The subdivision between which events are placed.",
				"name": "subdivision"
			}
		],
		"augments": [
			"Tone.Part"
		],
		"examples": [
			"var seq = new Tone.Sequence(function(time, note){\n\tconsole.log(note);\n//straight quater notes\n}, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n ",
			"var seq = new Tone.Sequence(function(time, note){\n\tconsole.log(note);\n//subdivisions are given as subarrays\n}, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);"
		],
		"name": "Sequence",
		"longname": "Tone.Sequence",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The default values.\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				1942,
				1995
			],
			"filename": "Sequence.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040039",
				"name": "Tone.Sequence.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"4n\"}",
				"paramnames": []
			}
		},
		"description": "The default values.",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Sequence.defaults",
		"kind": "member",
		"memberof": "Tone.Sequence",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1971,
				1991
			],
			"filename": "Sequence.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040046",
				"name": "subdivision",
				"type": "Literal",
				"value": "4n"
			}
		},
		"undocumented": true,
		"name": "subdivision",
		"longname": "Tone.Sequence.defaults.subdivision",
		"kind": "member",
		"memberof": "Tone.Sequence.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The subdivision of the sequence. This can only be \n\t *  set in the constructor. The subdivision is the \n\t *  interval between successive steps. \n\t *  @type {Time}\n\t *  @memberOf Tone.Sequence#\n\t *  @name subdivision\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Sequence.js",
			"lineno": 69,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The subdivision of the sequence. This can only be \n set in the constructor. The subdivision is the \n interval between successive steps.",
		"type": {
			"names": [
				"Time"
			]
		},
		"memberof": "Tone.Sequence",
		"name": "subdivision",
		"readonly": true,
		"longname": "Tone.Sequence#subdivision",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t *  a Tone.Sequence representing that sub-array will be returned. \n\t *  @example\n\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t * sequence.at(0)// => returns \"E4\"\n\t * //set a value\n\t * sequence.at(0, \"G3\");\n\t * //get a nested sequence\n\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t * @param {Positive} index The index to get or set\n\t * @param {*} value Optionally pass in the value to set at the given index.\n\t */",
		"meta": {
			"range": [
				2929,
				3218
			],
			"filename": "Sequence.js",
			"lineno": 97,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040076",
				"name": "Tone.Sequence.prototype.at",
				"type": "FunctionExpression",
				"paramnames": [
					"index",
					"value"
				]
			}
		},
		"description": "Get/Set an index of the sequence. If the index contains a subarray, \n a Tone.Sequence representing that sub-array will be returned.",
		"examples": [
			"var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\nsequence.at(0)// => returns \"E4\"\n//set a value\nsequence.at(0, \"G3\");\n//get a nested sequence\nsequence.at(3).at(1)// => returns \"Bb3\""
		],
		"params": [
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"description": "The index to get or set",
				"name": "index"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "Optionally pass in the value to set at the given index.",
				"name": "value"
			}
		],
		"name": "at",
		"longname": "Tone.Sequence#at",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"overrides": "Tone.Part#at"
	},
	{
		"comment": "/**\n\t *  Add an event at an index, if there's already something\n\t *  at that index, overwrite it. If `value` is an array, \n\t *  it will be parsed as a subsequence.\n\t *  @param {Number} index The index to add the event to\n\t *  @param {*} value The value to add at that index\n\t *  @returns {Tone.Sequence} this\n\t */",
		"meta": {
			"range": [
				3537,
				3968
			],
			"filename": "Sequence.js",
			"lineno": 115,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040120",
				"name": "Tone.Sequence.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"index",
					"value"
				]
			},
			"vars": {
				"subSubdivision": "Tone.Sequence#add~subSubdivision",
				"value": "Tone.Sequence#add~value"
			}
		},
		"description": "Add an event at an index, if there's already something\n at that index, overwrite it. If `value` is an array, \n it will be parsed as a subsequence.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The index to add the event to",
				"name": "index"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to add at that index",
				"name": "value"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sequence"
					]
				},
				"description": "this"
			}
		],
		"name": "add",
		"longname": "Tone.Sequence#add",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"overrides": "Tone.Part#add"
	},
	{
		"comment": "/**\n\t *  Remove a value from the sequence by index\n\t *  @param {Number} index The index of the event to remove\n\t *  @returns {Tone.Sequence} this\n\t */",
		"meta": {
			"range": [
				4124,
				4270
			],
			"filename": "Sequence.js",
			"lineno": 133,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040202",
				"name": "Tone.Sequence.prototype.remove",
				"type": "FunctionExpression",
				"paramnames": [
					"index",
					"value"
				]
			}
		},
		"description": "Remove a value from the sequence by index",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The index of the event to remove",
				"name": "index"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sequence"
					]
				},
				"description": "this"
			}
		],
		"name": "remove",
		"longname": "Tone.Sequence#remove",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"overrides": "Tone.Part#remove"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.Sequence} this\n\t */",
		"meta": {
			"range": [
				4713,
				4818
			],
			"filename": "Sequence.js",
			"lineno": 156,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100040272",
				"name": "Tone.Sequence.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sequence"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Sequence#dispose",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"overrides": "Tone.Part#dispose"
	},
	{
		"comment": "/**\n\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t *          the two signals) affects the timbre of the output signal greatly.\n\t *          Read more about Amplitude Modulation Synthesis on\n\t *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                            see defaults below\n\t *  @example\n\t * var synth = new Tone.AMSynth().toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t */",
		"meta": {
			"range": [
				1050,
				3553
			],
			"filename": "AMSynth.js",
			"lineno": 23,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040319",
				"name": "Tone.AMSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.AMSynth~options",
				"this._carrier": "Tone.AMSynth#_carrier",
				"this._carrier.volume.value": "Tone.AMSynth#_carrier.volume.value",
				"this.oscillator": "Tone.AMSynth#oscillator",
				"this.envelope": "Tone.AMSynth#envelope",
				"this._modulator": "Tone.AMSynth#_modulator",
				"this._modulator.volume.value": "Tone.AMSynth#_modulator.volume.value",
				"this.modulation": "Tone.AMSynth#modulation",
				"this.modulationEnvelope": "Tone.AMSynth#modulationEnvelope",
				"this.frequency": "Tone.AMSynth#frequency",
				"this.detune": "Tone.AMSynth#detune",
				"this.harmonicity": "Tone.AMSynth#harmonicity",
				"this.harmonicity.units": "Tone.AMSynth#harmonicity.units",
				"this._modulationScale": "Tone.AMSynth#_modulationScale",
				"this._modulationNode": "Tone.AMSynth#_modulationNode"
			}
		},
		"kind": "class",
		"classdesc": "AMSynth uses the output of one Tone.Synth to modulate the\n         amplitude of another Tone.Synth. The harmonicity (the ratio between\n         the two signals) affects the timbre of the output signal greatly.\n         Read more about Amplitude Modulation Synthesis on\n         [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).\n         <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">",
		"augments": [
			"Tone.Monophonic"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth\n                           see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var synth = new Tone.AMSynth().toMaster();\nsynth.triggerAttackRelease(\"C4\", \"4n\");"
		],
		"name": "AMSynth",
		"longname": "Tone.AMSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The carrier's oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				1411,
				1453
			],
			"filename": "AMSynth.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040369",
				"name": "this.oscillator",
				"type": "MemberExpression",
				"value": "this._carrier.oscillator",
				"paramnames": []
			}
		},
		"description": "The carrier's oscillator",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "oscillator",
		"longname": "Tone.AMSynth#oscillator",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The carrier's envelope\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1536,
				1596
			],
			"filename": "AMSynth.js",
			"lineno": 46,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040379",
				"name": "this.envelope",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The carrier's envelope",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.AMSynth#envelope",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulator's oscillator which is applied\n\t\t *  to the amplitude of the oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				1890,
				1958
			],
			"filename": "AMSynth.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040415",
				"name": "this.modulation",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulator's oscillator which is applied\n to the amplitude of the oscillator",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "modulation",
		"longname": "Tone.AMSynth#modulation",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulator's envelope\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				2043,
				2125
			],
			"filename": "AMSynth.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040431",
				"name": "this.modulationEnvelope",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulator's envelope",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "modulationEnvelope",
		"longname": "Tone.AMSynth#modulationEnvelope",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The frequency.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2201,
				2259
			],
			"filename": "AMSynth.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040447",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.AMSynth#frequency",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2336,
				2398
			],
			"filename": "AMSynth.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040462",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune in cents",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.AMSynth#detune",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */",
		"meta": {
			"range": [
				2685,
				2742
			],
			"filename": "AMSynth.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040479",
				"name": "this.harmonicity",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"//pitch voice1 an octave below voice0\nsynth.harmonicity.value = 0.5;"
		],
		"name": "harmonicity",
		"longname": "Tone.AMSynth#harmonicity",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3646,
				4002
			],
			"filename": "AMSynth.js",
			"lineno": 124,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040617",
				"name": "Tone.AMSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.AMSynth.defaults",
		"kind": "member",
		"memberof": "Tone.AMSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3674,
				3691
			],
			"filename": "AMSynth.js",
			"lineno": 125,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040624",
				"name": "harmonicity",
				"type": "Literal",
				"value": 3
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.AMSynth.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3695,
				3707
			],
			"filename": "AMSynth.js",
			"lineno": 126,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040626",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.AMSynth.defaults.detune",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3711,
				3750
			],
			"filename": "AMSynth.js",
			"lineno": 127,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040628",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.AMSynth.defaults.oscillator",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3731,
				3746
			],
			"filename": "AMSynth.js",
			"lineno": 128,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040630",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.AMSynth.defaults.oscillator.type",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3754,
				3848
			],
			"filename": "AMSynth.js",
			"lineno": 130,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040632",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.AMSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3772,
				3787
			],
			"filename": "AMSynth.js",
			"lineno": 131,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040634",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.AMSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3792,
				3806
			],
			"filename": "AMSynth.js",
			"lineno": 132,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040636",
				"name": "decay",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.AMSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3811,
				3824
			],
			"filename": "AMSynth.js",
			"lineno": 133,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040638",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.AMSynth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3829,
				3844
			],
			"filename": "AMSynth.js",
			"lineno": 134,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040640",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.AMSynth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3852,
				3893
			],
			"filename": "AMSynth.js",
			"lineno": 136,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040642",
				"name": "modulation",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"square\"}"
			}
		},
		"undocumented": true,
		"name": "modulation",
		"longname": "Tone.AMSynth.defaults.modulation",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3872,
				3889
			],
			"filename": "AMSynth.js",
			"lineno": 137,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040644",
				"name": "type",
				"type": "Literal",
				"value": "square"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.AMSynth.defaults.modulation.type",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.modulation",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3897,
				3999
			],
			"filename": "AMSynth.js",
			"lineno": 139,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040646",
				"name": "modulationEnvelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "modulationEnvelope",
		"longname": "Tone.AMSynth.defaults.modulationEnvelope",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3925,
				3939
			],
			"filename": "AMSynth.js",
			"lineno": 140,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040648",
				"name": "attack",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.AMSynth.defaults.modulationEnvelope.attack",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3944,
				3957
			],
			"filename": "AMSynth.js",
			"lineno": 141,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040650",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.AMSynth.defaults.modulationEnvelope.decay",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3962,
				3975
			],
			"filename": "AMSynth.js",
			"lineno": 142,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040652",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.AMSynth.defaults.modulationEnvelope.sustain",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3980,
				3995
			],
			"filename": "AMSynth.js",
			"lineno": 143,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040654",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.AMSynth.defaults.modulationEnvelope.release",
		"kind": "member",
		"memberof": "Tone.AMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.AMSynth} this\n\t */",
		"meta": {
			"range": [
				4902,
				5637
			],
			"filename": "AMSynth.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040728",
				"name": "Tone.AMSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._carrier": "Tone.AMSynth#_carrier",
				"this._modulator": "Tone.AMSynth#_modulator",
				"this.frequency": "Tone.AMSynth#frequency",
				"this.detune": "Tone.AMSynth#detune",
				"this.harmonicity": "Tone.AMSynth#harmonicity",
				"this._modulationScale": "Tone.AMSynth#_modulationScale",
				"this._modulationNode": "Tone.AMSynth#_modulationNode",
				"this.oscillator": "Tone.AMSynth#oscillator",
				"this.envelope": "Tone.AMSynth#envelope",
				"this.modulationEnvelope": "Tone.AMSynth#modulationEnvelope",
				"this.modulation": "Tone.AMSynth#modulation"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AMSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AMSynth#dispose",
		"kind": "function",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"overrides": "Tone.Monophonic#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t *          MonoSynths run in parallel with control over the \n\t *          frequency ratio between the two voices and vibrato effect.\n\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth \n\t *                          see defaults below\n\t *  @example\n\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t */",
		"meta": {
			"range": [
				825,
				2780
			],
			"filename": "DuoSynth.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040903",
				"name": "Tone.DuoSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.DuoSynth~options",
				"this.voice0": "Tone.DuoSynth#voice0",
				"this.voice0.volume.value": "Tone.DuoSynth#voice0.volume.value",
				"this.voice1": "Tone.DuoSynth#voice1",
				"this.voice1.volume.value": "Tone.DuoSynth#voice1.volume.value",
				"this._vibrato": "Tone.DuoSynth#_vibrato",
				"this.vibratoRate": "Tone.DuoSynth#vibratoRate",
				"this._vibratoGain": "Tone.DuoSynth#_vibratoGain",
				"this.vibratoAmount": "Tone.DuoSynth#vibratoAmount",
				"this.frequency": "Tone.DuoSynth#frequency",
				"this.harmonicity": "Tone.DuoSynth#harmonicity",
				"this.harmonicity.units": "Tone.DuoSynth#harmonicity.units"
			}
		},
		"kind": "class",
		"classdesc": "Tone.DuoSynth is a monophonic synth composed of two \n         MonoSynths run in parallel with control over the \n         frequency ratio between the two voices and vibrato effect.\n         <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">",
		"augments": [
			"Tone.Monophonic"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth \n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var duoSynth = new Tone.DuoSynth().toMaster();\nduoSynth.triggerAttackRelease(\"C4\", \"2n\");"
		],
		"name": "DuoSynth",
		"longname": "Tone.DuoSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  the first voice\n\t\t *  @type {Tone.MonoSynth}\n\t\t */",
		"meta": {
			"range": [
				1028,
				1076
			],
			"filename": "DuoSynth.js",
			"lineno": 30,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040933",
				"name": "this.voice0",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the first voice",
		"type": {
			"names": [
				"Tone.MonoSynth"
			]
		},
		"name": "voice0",
		"longname": "Tone.DuoSynth#voice0",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  the second voice\n\t\t *  @type {Tone.MonoSynth}\n\t\t */",
		"meta": {
			"range": [
				1179,
				1227
			],
			"filename": "DuoSynth.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100040956",
				"name": "this.voice1",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the second voice",
		"type": {
			"names": [
				"Tone.MonoSynth"
			]
		},
		"name": "voice1",
		"longname": "Tone.DuoSynth#voice1",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * the vibrato frequency\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1503,
				1545
			],
			"filename": "DuoSynth.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041001",
				"name": "this.vibratoRate",
				"type": "MemberExpression",
				"value": "this._vibrato.frequency",
				"paramnames": []
			}
		},
		"description": "the vibrato frequency",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "vibratoRate",
		"longname": "Tone.DuoSynth#vibratoRate",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The amount of vibrato\n\t\t * @type {Positive}\n\t\t * @signal\n\t\t */",
		"meta": {
			"range": [
				1779,
				1822
			],
			"filename": "DuoSynth.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041028",
				"name": "this.vibratoAmount",
				"type": "MemberExpression",
				"value": "this._vibratoGain.gain",
				"paramnames": []
			}
		},
		"description": "The amount of vibrato",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "vibratoAmount",
		"longname": "Tone.DuoSynth#vibratoAmount",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  the frequency control\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1905,
				1963
			],
			"filename": "DuoSynth.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041038",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the frequency control",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.DuoSynth#frequency",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t */",
		"meta": {
			"range": [
				2254,
				2311
			],
			"filename": "DuoSynth.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041053",
				"name": "this.harmonicity",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"//pitch voice1 an octave below voice0\nduoSynth.harmonicity.value = 0.5;"
		],
		"name": "harmonicity",
		"longname": "Tone.DuoSynth#harmonicity",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2874,
				3605
			],
			"filename": "DuoSynth.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041173",
				"name": "Tone.DuoSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.DuoSynth.defaults",
		"kind": "member",
		"memberof": "Tone.DuoSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2903,
				2924
			],
			"filename": "DuoSynth.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041180",
				"name": "vibratoAmount",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "vibratoAmount",
		"longname": "Tone.DuoSynth.defaults.vibratoAmount",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2928,
				2945
			],
			"filename": "DuoSynth.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041182",
				"name": "vibratoRate",
				"type": "Literal",
				"value": 5
			}
		},
		"undocumented": true,
		"name": "vibratoRate",
		"longname": "Tone.DuoSynth.defaults.vibratoRate",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2949,
				2968
			],
			"filename": "DuoSynth.js",
			"lineno": 107,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041184",
				"name": "harmonicity",
				"type": "Literal",
				"value": 1.5
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.DuoSynth.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2972,
				3285
			],
			"filename": "DuoSynth.js",
			"lineno": 108,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041186",
				"name": "voice0",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}"
			}
		},
		"undocumented": true,
		"name": "voice0",
		"longname": "Tone.DuoSynth.defaults.voice0",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2988,
				3002
			],
			"filename": "DuoSynth.js",
			"lineno": 109,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041188",
				"name": "volume",
				"type": "UnaryExpression",
				"value": -10
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.DuoSynth.defaults.voice0.volume",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3007,
				3023
			],
			"filename": "DuoSynth.js",
			"lineno": 110,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041191",
				"name": "portamento",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "portamento",
		"longname": "Tone.DuoSynth.defaults.voice0.portamento",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3028,
				3069
			],
			"filename": "DuoSynth.js",
			"lineno": 111,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041193",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.DuoSynth.defaults.voice0.oscillator",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3049,
				3064
			],
			"filename": "DuoSynth.js",
			"lineno": 112,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041195",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.DuoSynth.defaults.voice0.oscillator.type",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3074,
				3178
			],
			"filename": "DuoSynth.js",
			"lineno": 114,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041197",
				"name": "filterEnvelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "filterEnvelope",
		"longname": "Tone.DuoSynth.defaults.voice0.filterEnvelope",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3099,
				3114
			],
			"filename": "DuoSynth.js",
			"lineno": 115,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041199",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.DuoSynth.defaults.voice0.filterEnvelope.attack",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3120,
				3133
			],
			"filename": "DuoSynth.js",
			"lineno": 116,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041201",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.DuoSynth.defaults.voice0.filterEnvelope.decay",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3139,
				3152
			],
			"filename": "DuoSynth.js",
			"lineno": 117,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041203",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.DuoSynth.defaults.voice0.filterEnvelope.sustain",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3158,
				3173
			],
			"filename": "DuoSynth.js",
			"lineno": 118,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041205",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.DuoSynth.defaults.voice0.filterEnvelope.release",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3183,
				3281
			],
			"filename": "DuoSynth.js",
			"lineno": 120,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041207",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.DuoSynth.defaults.voice0.envelope",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3202,
				3217
			],
			"filename": "DuoSynth.js",
			"lineno": 121,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041209",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.DuoSynth.defaults.voice0.envelope.attack",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3223,
				3236
			],
			"filename": "DuoSynth.js",
			"lineno": 122,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041211",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.DuoSynth.defaults.voice0.envelope.decay",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3242,
				3255
			],
			"filename": "DuoSynth.js",
			"lineno": 123,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041213",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.DuoSynth.defaults.voice0.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3261,
				3276
			],
			"filename": "DuoSynth.js",
			"lineno": 124,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041215",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.DuoSynth.defaults.voice0.envelope.release",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice0.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3289,
				3602
			],
			"filename": "DuoSynth.js",
			"lineno": 127,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041217",
				"name": "voice1",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}"
			}
		},
		"undocumented": true,
		"name": "voice1",
		"longname": "Tone.DuoSynth.defaults.voice1",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3305,
				3319
			],
			"filename": "DuoSynth.js",
			"lineno": 128,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041219",
				"name": "volume",
				"type": "UnaryExpression",
				"value": -10
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.DuoSynth.defaults.voice1.volume",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3324,
				3340
			],
			"filename": "DuoSynth.js",
			"lineno": 129,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041222",
				"name": "portamento",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "portamento",
		"longname": "Tone.DuoSynth.defaults.voice1.portamento",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3345,
				3386
			],
			"filename": "DuoSynth.js",
			"lineno": 130,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041224",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.DuoSynth.defaults.voice1.oscillator",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3366,
				3381
			],
			"filename": "DuoSynth.js",
			"lineno": 131,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041226",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.DuoSynth.defaults.voice1.oscillator.type",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3391,
				3495
			],
			"filename": "DuoSynth.js",
			"lineno": 133,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041228",
				"name": "filterEnvelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "filterEnvelope",
		"longname": "Tone.DuoSynth.defaults.voice1.filterEnvelope",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3416,
				3431
			],
			"filename": "DuoSynth.js",
			"lineno": 134,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041230",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.DuoSynth.defaults.voice1.filterEnvelope.attack",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3437,
				3450
			],
			"filename": "DuoSynth.js",
			"lineno": 135,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041232",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.DuoSynth.defaults.voice1.filterEnvelope.decay",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3456,
				3469
			],
			"filename": "DuoSynth.js",
			"lineno": 136,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041234",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.DuoSynth.defaults.voice1.filterEnvelope.sustain",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3475,
				3490
			],
			"filename": "DuoSynth.js",
			"lineno": 137,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041236",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.DuoSynth.defaults.voice1.filterEnvelope.release",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3500,
				3598
			],
			"filename": "DuoSynth.js",
			"lineno": 139,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041238",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.DuoSynth.defaults.voice1.envelope",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3519,
				3534
			],
			"filename": "DuoSynth.js",
			"lineno": 140,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041240",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.DuoSynth.defaults.voice1.envelope.attack",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3540,
				3553
			],
			"filename": "DuoSynth.js",
			"lineno": 141,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041242",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.DuoSynth.defaults.voice1.envelope.decay",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3559,
				3572
			],
			"filename": "DuoSynth.js",
			"lineno": 142,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041244",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.DuoSynth.defaults.voice1.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3578,
				3593
			],
			"filename": "DuoSynth.js",
			"lineno": 143,
			"columnno": 4,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041246",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.DuoSynth.defaults.voice1.envelope.release",
		"kind": "member",
		"memberof": "Tone.DuoSynth.defaults.voice1.envelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.DuoSynth} this\n\t */",
		"meta": {
			"range": [
				4584,
				5155
			],
			"filename": "DuoSynth.js",
			"lineno": 182,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041344",
				"name": "Tone.DuoSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.voice0": "Tone.DuoSynth#voice0",
				"this.voice1": "Tone.DuoSynth#voice1",
				"this.frequency": "Tone.DuoSynth#frequency",
				"this._vibratoGain": "Tone.DuoSynth#_vibratoGain",
				"this._vibrato": "Tone.DuoSynth#_vibrato",
				"this.harmonicity": "Tone.DuoSynth#harmonicity",
				"this.vibratoAmount": "Tone.DuoSynth#vibratoAmount",
				"this.vibratoRate": "Tone.DuoSynth#vibratoRate"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.DuoSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.DuoSynth#dispose",
		"kind": "function",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"overrides": "Tone.Monophonic#dispose"
	},
	{
		"comment": "/**\n\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t *          can be explored using the modulationIndex parameter. Read more about\n\t *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth\n\t *                          see defaults below\n\t *  @example\n\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t */",
		"meta": {
			"range": [
				1106,
				3984
			],
			"filename": "FMSynth.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041490",
				"name": "Tone.FMSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.FMSynth~options",
				"this._carrier": "Tone.FMSynth#_carrier",
				"this._carrier.volume.value": "Tone.FMSynth#_carrier.volume.value",
				"this.oscillator": "Tone.FMSynth#oscillator",
				"this.envelope": "Tone.FMSynth#envelope",
				"this._modulator": "Tone.FMSynth#_modulator",
				"this._modulator.volume.value": "Tone.FMSynth#_modulator.volume.value",
				"this.modulation": "Tone.FMSynth#modulation",
				"this.modulationEnvelope": "Tone.FMSynth#modulationEnvelope",
				"this.frequency": "Tone.FMSynth#frequency",
				"this.detune": "Tone.FMSynth#detune",
				"this.harmonicity": "Tone.FMSynth#harmonicity",
				"this.harmonicity.units": "Tone.FMSynth#harmonicity.units",
				"this.modulationIndex": "Tone.FMSynth#modulationIndex",
				"this.modulationIndex.units": "Tone.FMSynth#modulationIndex.units",
				"this._modulationNode": "Tone.FMSynth#_modulationNode"
			}
		},
		"kind": "class",
		"classdesc": "FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n         the frequency of a second Tone.Synth. A lot of spectral content \n         can be explored using the modulationIndex parameter. Read more about\n         frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).\n         <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">",
		"augments": [
			"Tone.Monophonic"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth\n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var fmSynth = new Tone.FMSynth().toMaster();\nfmSynth.triggerAttackRelease(\"C5\", \"4n\");"
		],
		"name": "FMSynth",
		"longname": "Tone.FMSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The carrier's oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				1483,
				1525
			],
			"filename": "FMSynth.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041543",
				"name": "this.oscillator",
				"type": "MemberExpression",
				"value": "this._carrier.oscillator",
				"paramnames": []
			}
		},
		"description": "The carrier's oscillator",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "oscillator",
		"longname": "Tone.FMSynth#oscillator",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The carrier's envelope\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				1601,
				1661
			],
			"filename": "FMSynth.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041553",
				"name": "this.envelope",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The carrier's envelope",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "envelope",
		"longname": "Tone.FMSynth#envelope",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulator's oscillator which is applied\n\t\t *  to the amplitude of the oscillator\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				1973,
				2041
			],
			"filename": "FMSynth.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041592",
				"name": "this.modulation",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulator's oscillator which is applied\n to the amplitude of the oscillator",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "modulation",
		"longname": "Tone.FMSynth#modulation",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulator's envelope\n\t\t *  @type {Tone.Oscillator}\n\t\t */",
		"meta": {
			"range": [
				2119,
				2201
			],
			"filename": "FMSynth.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041608",
				"name": "this.modulationEnvelope",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulator's envelope",
		"type": {
			"names": [
				"Tone.Oscillator"
			]
		},
		"name": "modulationEnvelope",
		"longname": "Tone.FMSynth#modulationEnvelope",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2285,
				2343
			],
			"filename": "FMSynth.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041624",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.FMSynth#frequency",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				2420,
				2482
			],
			"filename": "FMSynth.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041639",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune in cents",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.FMSynth#detune",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t *  1 is no change. Harmonicity = 2 means a change of an octave.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch voice1 an octave below voice0\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */",
		"meta": {
			"range": [
				2769,
				2826
			],
			"filename": "FMSynth.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041656",
				"name": "this.harmonicity",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "Harmonicity is the ratio between the two voices. A harmonicity of\n 1 is no change. Harmonicity = 2 means a change of an octave.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"//pitch voice1 an octave below voice0\nsynth.harmonicity.value = 0.5;"
		],
		"name": "harmonicity",
		"longname": "Tone.FMSynth#harmonicity",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the\n\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the\n\t\t *  modulating signal (ma) -- as in ma/mf.\n\t\t *\t@type {Positive}\n\t\t *\t@signal\n\t\t */",
		"meta": {
			"range": [
				3147,
				3212
			],
			"filename": "FMSynth.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041680",
				"name": "this.modulationIndex",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulation index which essentially the depth or amount of the modulation. It is the\n ratio of the frequency of the modulating signal (mf) to the amplitude of the\n modulating signal (ma) -- as in ma/mf.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "modulationIndex",
		"longname": "Tone.FMSynth#modulationIndex",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				4077,
				4459
			],
			"filename": "FMSynth.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041830",
				"name": "Tone.FMSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.FMSynth.defaults",
		"kind": "member",
		"memberof": "Tone.FMSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4105,
				4122
			],
			"filename": "FMSynth.js",
			"lineno": 130,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041837",
				"name": "harmonicity",
				"type": "Literal",
				"value": 3
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.FMSynth.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4126,
				4148
			],
			"filename": "FMSynth.js",
			"lineno": 131,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041839",
				"name": "modulationIndex",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "modulationIndex",
		"longname": "Tone.FMSynth.defaults.modulationIndex",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4152,
				4164
			],
			"filename": "FMSynth.js",
			"lineno": 132,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041841",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.FMSynth.defaults.detune",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4168,
				4207
			],
			"filename": "FMSynth.js",
			"lineno": 133,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041843",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.FMSynth.defaults.oscillator",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4188,
				4203
			],
			"filename": "FMSynth.js",
			"lineno": 134,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041845",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.FMSynth.defaults.oscillator.type",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4211,
				4305
			],
			"filename": "FMSynth.js",
			"lineno": 136,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041847",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.FMSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4229,
				4244
			],
			"filename": "FMSynth.js",
			"lineno": 137,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041849",
				"name": "attack",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.FMSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4249,
				4263
			],
			"filename": "FMSynth.js",
			"lineno": 138,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041851",
				"name": "decay",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.FMSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4268,
				4281
			],
			"filename": "FMSynth.js",
			"lineno": 139,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041853",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.FMSynth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4286,
				4301
			],
			"filename": "FMSynth.js",
			"lineno": 140,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041855",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.FMSynth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4309,
				4350
			],
			"filename": "FMSynth.js",
			"lineno": 142,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041857",
				"name": "modulation",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"square\"}"
			}
		},
		"undocumented": true,
		"name": "modulation",
		"longname": "Tone.FMSynth.defaults.modulation",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4329,
				4346
			],
			"filename": "FMSynth.js",
			"lineno": 143,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041859",
				"name": "type",
				"type": "Literal",
				"value": "square"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.FMSynth.defaults.modulation.type",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.modulation",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4354,
				4456
			],
			"filename": "FMSynth.js",
			"lineno": 145,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041861",
				"name": "modulationEnvelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.5}"
			}
		},
		"undocumented": true,
		"name": "modulationEnvelope",
		"longname": "Tone.FMSynth.defaults.modulationEnvelope",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4382,
				4396
			],
			"filename": "FMSynth.js",
			"lineno": 146,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041863",
				"name": "attack",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.FMSynth.defaults.modulationEnvelope.attack",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4401,
				4414
			],
			"filename": "FMSynth.js",
			"lineno": 147,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041865",
				"name": "decay",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.FMSynth.defaults.modulationEnvelope.decay",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4419,
				4432
			],
			"filename": "FMSynth.js",
			"lineno": 148,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041867",
				"name": "sustain",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.FMSynth.defaults.modulationEnvelope.sustain",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				4437,
				4452
			],
			"filename": "FMSynth.js",
			"lineno": 149,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041869",
				"name": "release",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.FMSynth.defaults.modulationEnvelope.release",
		"kind": "member",
		"memberof": "Tone.FMSynth.defaults.modulationEnvelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.FMSynth} this\n\t */",
		"meta": {
			"range": [
				5356,
				6108
			],
			"filename": "FMSynth.js",
			"lineno": 187,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100041950",
				"name": "Tone.FMSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._carrier": "Tone.FMSynth#_carrier",
				"this._modulator": "Tone.FMSynth#_modulator",
				"this.frequency": "Tone.FMSynth#frequency",
				"this.detune": "Tone.FMSynth#detune",
				"this.modulationIndex": "Tone.FMSynth#modulationIndex",
				"this.harmonicity": "Tone.FMSynth#harmonicity",
				"this._modulationNode": "Tone.FMSynth#_modulationNode",
				"this.oscillator": "Tone.FMSynth#oscillator",
				"this.envelope": "Tone.FMSynth#envelope",
				"this.modulationEnvelope": "Tone.FMSynth#modulationEnvelope",
				"this.modulation": "Tone.FMSynth#modulation"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FMSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FMSynth#dispose",
		"kind": "function",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"overrides": "Tone.Monophonic#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Base-class for all instruments\n\t *  \n\t *  @constructor\n\t *  @extends {Tone}\n\t */",
		"meta": {
			"range": [
				198,
				703
			],
			"filename": "Instrument.js",
			"lineno": 11,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042122",
				"name": "Tone.Instrument",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.Instrument~options",
				"this._volume": "Tone.Instrument#_volume",
				"this.output": "Tone.Instrument#output",
				"this.volume": "Tone.Instrument#volume"
			}
		},
		"kind": "class",
		"classdesc": "Base-class for all instruments",
		"augments": [
			"Tone"
		],
		"name": "Instrument",
		"longname": "Tone.Instrument",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Instrument#volume",
		"kind": "member",
		"memberof": "Tone.Instrument",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default attributes\n\t *  @type {object}\n\t */",
		"meta": {
			"range": [
				797,
				889
			],
			"filename": "Instrument.js",
			"lineno": 41,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042189",
				"name": "Tone.Instrument.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "the default attributes",
		"type": {
			"names": [
				"object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Instrument.defaults",
		"kind": "member",
		"memberof": "Tone.Instrument",
		"scope": "static"
	},
	{
		"comment": "/** the volume of the output in decibels */",
		"meta": {
			"range": [
				874,
				886
			],
			"filename": "Instrument.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042196",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"description": "the volume of the output in decibels",
		"name": "volume",
		"longname": "Tone.Instrument.defaults.volume",
		"kind": "member",
		"memberof": "Tone.Instrument.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  @abstract\n\t *  @param {string|number} note the note to trigger\n\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t */",
		"meta": {
			"range": [
				1097,
				1148
			],
			"filename": "Instrument.js",
			"lineno": 52,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042199",
				"name": "Tone.Instrument.prototype.triggerAttack",
				"type": "MemberExpression",
				"value": "Tone.noOp",
				"paramnames": []
			}
		},
		"virtual": true,
		"params": [
			{
				"type": {
					"names": [
						"string",
						"number"
					]
				},
				"description": "the note to trigger",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time to trigger the ntoe",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "the velocity to trigger the note",
				"name": "velocity"
			}
		],
		"name": "triggerAttack",
		"longname": "Tone.Instrument#triggerAttack",
		"kind": "member",
		"memberof": "Tone.Instrument",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @abstract\n\t *  @param {Time} [time=now] when to trigger the release\n\t */",
		"meta": {
			"range": [
				1235,
				1287
			],
			"filename": "Instrument.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042211",
				"name": "Tone.Instrument.prototype.triggerRelease",
				"type": "MemberExpression",
				"value": "Tone.noOp",
				"paramnames": []
			}
		},
		"virtual": true,
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "when to trigger the release",
				"name": "time"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.Instrument#triggerRelease",
		"kind": "member",
		"memberof": "Tone.Instrument",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.Instrument#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.Instrument",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Instrument} this\n\t */",
		"meta": {
			"range": [
				2209,
				2412
			],
			"filename": "Instrument.js",
			"lineno": 84,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042272",
				"name": "Tone.Instrument.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._volume": "Tone.Instrument#_volume",
				"this.volume": "Tone.Instrument#volume"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Instrument#dispose",
		"kind": "function",
		"memberof": "Tone.Instrument",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t *          quality of the sound comes from the frequency envelope applied\n\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] the options available for the synth \n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.MembraneSynth().toMaster();\n\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1007,
				1794
			],
			"filename": "MembraneSynth.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042340",
				"name": "Tone.MembraneSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.MembraneSynth~options",
				"this.oscillator": "Tone.MembraneSynth#oscillator",
				"this.envelope": "Tone.MembraneSynth#envelope",
				"this.octaves": "Tone.MembraneSynth#octaves",
				"this.pitchDecay": "Tone.MembraneSynth#pitchDecay"
			}
		},
		"kind": "class",
		"classdesc": "Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n         with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n         is routed through a Tone.AmplitudeEnvelope to the output. The drum\n         quality of the sound comes from the frequency envelope applied\n         during during Tone.MembraneSynth.triggerAttack(note). The frequency\n         envelope starts at <code>note * .octaves</code> and ramps to \n         <code>note</code> over the duration of <code>.pitchDecay</code>.",
		"augments": [
			"Tone.Instrument"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth \n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var synth = new Tone.MembraneSynth().toMaster();\nsynth.triggerAttackRelease(\"C2\", \"8n\");"
		],
		"name": "MembraneSynth",
		"longname": "Tone.MembraneSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */",
		"meta": {
			"range": [
				1225,
				1294
			],
			"filename": "MembraneSynth.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042370",
				"name": "this.oscillator",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The oscillator.",
		"type": {
			"names": [
				"Tone.OmniOscillator"
			]
		},
		"name": "oscillator",
		"longname": "Tone.MembraneSynth#oscillator",
		"kind": "member",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1378,
				1438
			],
			"filename": "MembraneSynth.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042385",
				"name": "this.envelope",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amplitude envelope.",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.MembraneSynth#envelope",
		"kind": "member",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The number of octaves the pitch envelope ramps.\n\t\t *  @type {Positive}\n\t\t */",
		"meta": {
			"range": [
				1532,
				1562
			],
			"filename": "MembraneSynth.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042397",
				"name": "this.octaves",
				"type": "MemberExpression",
				"value": "options.octaves",
				"paramnames": []
			}
		},
		"description": "The number of octaves the pitch envelope ramps.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "octaves",
		"longname": "Tone.MembraneSynth#octaves",
		"kind": "member",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amount of time the frequency envelope takes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1654,
				1690
			],
			"filename": "MembraneSynth.js",
			"lineno": 51,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042405",
				"name": "this.pitchDecay",
				"type": "MemberExpression",
				"value": "options.pitchDecay",
				"paramnames": []
			}
		},
		"description": "The amount of time the frequency envelope takes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "pitchDecay",
		"longname": "Tone.MembraneSynth#pitchDecay",
		"kind": "member",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1893,
				2146
			],
			"filename": "MembraneSynth.js",
			"lineno": 63,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042445",
				"name": "Tone.MembraneSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MembraneSynth.defaults",
		"kind": "member",
		"memberof": "Tone.MembraneSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1927,
				1946
			],
			"filename": "MembraneSynth.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042452",
				"name": "pitchDecay",
				"type": "Literal",
				"value": 0.05
			}
		},
		"undocumented": true,
		"name": "pitchDecay",
		"longname": "Tone.MembraneSynth.defaults.pitchDecay",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1950,
				1964
			],
			"filename": "MembraneSynth.js",
			"lineno": 65,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042454",
				"name": "octaves",
				"type": "Literal",
				"value": 10
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.MembraneSynth.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1968,
				2008
			],
			"filename": "MembraneSynth.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042456",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sine\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.MembraneSynth.defaults.oscillator",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1988,
				2003
			],
			"filename": "MembraneSynth.js",
			"lineno": 67,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042458",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.MembraneSynth.defaults.oscillator.type",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2012,
				2143
			],
			"filename": "MembraneSynth.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042460",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"exponential\"}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.MembraneSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2030,
				2046
			],
			"filename": "MembraneSynth.js",
			"lineno": 70,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042462",
				"name": "attack",
				"type": "Literal",
				"value": 0.001
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MembraneSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2051,
				2064
			],
			"filename": "MembraneSynth.js",
			"lineno": 71,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042464",
				"name": "decay",
				"type": "Literal",
				"value": 0.4
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.MembraneSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2069,
				2085
			],
			"filename": "MembraneSynth.js",
			"lineno": 72,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042466",
				"name": "sustain",
				"type": "Literal",
				"value": 0.01
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.MembraneSynth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2090,
				2105
			],
			"filename": "MembraneSynth.js",
			"lineno": 73,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042468",
				"name": "release",
				"type": "Literal",
				"value": 1.4
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MembraneSynth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2110,
				2139
			],
			"filename": "MembraneSynth.js",
			"lineno": 74,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042470",
				"name": "attackCurve",
				"type": "Literal",
				"value": "exponential"
			}
		},
		"undocumented": true,
		"name": "attackCurve",
		"longname": "Tone.MembraneSynth.defaults.envelope.attackCurve",
		"kind": "member",
		"memberof": "Tone.MembraneSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Trigger the note at the given time with the given velocity. \n\t *  \n\t *  @param  {Frequency} note     the note\n\t *  @param  {Time} [time=now]     the time, if not given is now\n\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t *  @returns {Tone.MembraneSynth} this\n\t *  @example\n\t *  kick.triggerAttack(60);\n\t */",
		"meta": {
			"range": [
				2481,
				2887
			],
			"filename": "MembraneSynth.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042473",
				"name": "Tone.MembraneSynth.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.MembraneSynth#triggerAttack~time",
				"note": "Tone.MembraneSynth#triggerAttack~note",
				"maxNote": "Tone.MembraneSynth#triggerAttack~maxNote"
			}
		},
		"description": "Trigger the note at the given time with the given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "the note",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time, if not given is now",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity defaults to 1",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MembraneSynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"kick.triggerAttack(60);"
		],
		"name": "triggerAttack",
		"longname": "Tone.MembraneSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the note.\n\t *  \n\t *  @param  {Time} [time=now] the time the note will release\n\t *  @returns {Tone.MembraneSynth} this\n\t */",
		"meta": {
			"range": [
				3055,
				3172
			],
			"filename": "MembraneSynth.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042552",
				"name": "Tone.MembraneSynth.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Trigger the release portion of the note.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time the note will release",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MembraneSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.MembraneSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerRelease"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.MembraneSynth} this\n\t */",
		"meta": {
			"range": [
				3241,
				3509
			],
			"filename": "MembraneSynth.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042574",
				"name": "Tone.MembraneSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.oscillator": "Tone.MembraneSynth#oscillator",
				"this.envelope": "Tone.MembraneSynth#envelope"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MembraneSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MembraneSynth#dispose",
		"kind": "function",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#dispose"
	},
	{
		"comment": "/**\n\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] The options availble for the synth\n\t *                             see defaults below\n\t */",
		"meta": {
			"range": [
				1165,
				3320
			],
			"filename": "MetalSynth.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042665",
				"name": "Tone.MetalSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.MetalSynth~options",
				"this.frequency": "Tone.MetalSynth#frequency",
				"this._oscillators": "Tone.MetalSynth#_oscillators",
				"this._freqMultipliers": "Tone.MetalSynth#_freqMultipliers",
				"this._amplitue": "Tone.MetalSynth#_amplitue",
				"this._highpass": "Tone.MetalSynth#_highpass",
				"this._octaves": "Tone.MetalSynth#_octaves",
				"this._filterFreqScaler": "Tone.MetalSynth#_filterFreqScaler",
				"this.envelope": "Tone.MetalSynth#envelope",
				"i": "Tone.MetalSynth~i",
				"osc": "Tone.MetalSynth~osc",
				"this._oscillators[undefined]": "Tone.MetalSynth#_oscillators[undefined]",
				"mult": "Tone.MetalSynth~mult",
				"this._freqMultipliers[undefined]": "Tone.MetalSynth#_freqMultipliers[undefined]",
				"this.octaves": "Tone.MetalSynth#octaves"
			}
		},
		"kind": "class",
		"classdesc": "A highly inharmonic and spectrally complex source with a highpass filter\n         and amplitude envelope which is good for making metalophone sounds. Based\n         on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n         Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).",
		"augments": [
			"Tone.Instrument"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "The options availble for the synth\n                            see defaults below",
				"name": "options"
			}
		],
		"name": "MetalSynth",
		"longname": "Tone.MetalSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency of the cymbal\n\t\t *  @type  {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1394,
				1466
			],
			"filename": "MetalSynth.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042695",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency of the cymbal",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.MetalSynth#frequency",
		"kind": "member",
		"memberof": "Tone.MetalSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The envelope which is connected both to the\n\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t *  @type  {Tone.Envelope}\n\t\t */",
		"meta": {
			"range": [
				2506,
				2766
			],
			"filename": "MetalSynth.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042782",
				"name": "this.envelope",
				"type": "CallExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The envelope which is connected both to the\n amplitude and highpass filter's cutoff frequency",
		"type": {
			"names": [
				"Tone.Envelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.MetalSynth#envelope",
		"kind": "member",
		"memberof": "Tone.MetalSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				3448,
				3669
			],
			"filename": "MetalSynth.js",
			"lineno": 126,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042938",
				"name": "Tone.MetalSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1.5}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MetalSynth.defaults",
		"memberof": "Tone.MetalSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3479,
				3496
			],
			"filename": "MetalSynth.js",
			"lineno": 127,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042945",
				"name": "frequency",
				"type": "Literal",
				"value": 200
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.MetalSynth.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3500,
				3576
			],
			"filename": "MetalSynth.js",
			"lineno": 128,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042947",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.2}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.MetalSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3518,
				3534
			],
			"filename": "MetalSynth.js",
			"lineno": 129,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042949",
				"name": "attack",
				"type": "Literal",
				"value": 0.001
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MetalSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3539,
				3552
			],
			"filename": "MetalSynth.js",
			"lineno": 130,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042951",
				"name": "decay",
				"type": "Literal",
				"value": 1.4
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.MetalSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3557,
				3572
			],
			"filename": "MetalSynth.js",
			"lineno": 131,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042953",
				"name": "release",
				"type": "Literal",
				"value": 0.2
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MetalSynth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3580,
				3599
			],
			"filename": "MetalSynth.js",
			"lineno": 133,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042955",
				"name": "harmonicity",
				"type": "Literal",
				"value": 5.1
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.MetalSynth.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3603,
				3625
			],
			"filename": "MetalSynth.js",
			"lineno": 134,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042957",
				"name": "modulationIndex",
				"type": "Literal",
				"value": 32
			}
		},
		"undocumented": true,
		"name": "modulationIndex",
		"longname": "Tone.MetalSynth.defaults.modulationIndex",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3629,
				3647
			],
			"filename": "MetalSynth.js",
			"lineno": 135,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042959",
				"name": "resonance",
				"type": "Literal",
				"value": 4000
			}
		},
		"undocumented": true,
		"name": "resonance",
		"longname": "Tone.MetalSynth.defaults.resonance",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3651,
				3666
			],
			"filename": "MetalSynth.js",
			"lineno": 136,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042961",
				"name": "octaves",
				"type": "Literal",
				"value": 1.5
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.MetalSynth.defaults.octaves",
		"kind": "member",
		"memberof": "Tone.MetalSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Trigger the attack.\n\t *  @param  {Time}  time      When the attack should be triggered.\n\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t *  @return  {Tone.MetalSynth}  this\n\t */",
		"meta": {
			"range": [
				3911,
				4098
			],
			"filename": "MetalSynth.js",
			"lineno": 145,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042964",
				"name": "Tone.MetalSynth.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"vel"
				]
			},
			"vars": {
				"time": "Tone.MetalSynth#triggerAttack~time",
				"vel": "Tone.MetalSynth#triggerAttack~vel"
			}
		},
		"description": "Trigger the attack.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity that the envelope should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MetalSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttack",
		"longname": "Tone.MetalSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.MetalSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Trigger the release of the envelope.\n\t *  @param  {Time}  time      When the release should be triggered.\n\t *  @return  {Tone.MetalSynth}  this\n\t */",
		"meta": {
			"range": [
				4261,
				4407
			],
			"filename": "MetalSynth.js",
			"lineno": 157,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043005",
				"name": "Tone.MetalSynth.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.MetalSynth#triggerRelease~time"
			}
		},
		"description": "Trigger the release of the envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When the release should be triggered.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MetalSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.MetalSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.MetalSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerRelease"
	},
	{
		"comment": "/**\n\t *  Trigger the attack and release of the envelope after the given\n\t *  duration.\n\t *  @param  {Time}  duration  The duration before triggering the release\n\t *  @param  {Time}  time      When the attack should be triggered.\n\t *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.\n\t *  @return  {Tone.MetalSynth}  this\n\t */",
		"meta": {
			"range": [
				4781,
				5032
			],
			"filename": "MetalSynth.js",
			"lineno": 171,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043035",
				"name": "Tone.MetalSynth.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.MetalSynth#triggerAttackRelease~time",
				"duration": "Tone.MetalSynth#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and release of the envelope after the given\n duration.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration before triggering the release",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity that the envelope should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MetalSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.MetalSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.MetalSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttackRelease"
	},
	{
		"comment": "/**\n\t *  The modulationIndex of the oscillators which make up the source.\n\t *  see Tone.FMOscillator.modulationIndex\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Positive}\n\t *  @name  modulationIndex\n\t */",
		"meta": {
			"filename": "MetalSynth.js",
			"lineno": 179,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {}
		},
		"description": "The modulationIndex of the oscillators which make up the source.\n see Tone.FMOscillator.modulationIndex",
		"memberof": "Tone.MetalSynth",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "modulationIndex",
		"longname": "Tone.MetalSynth#modulationIndex",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The harmonicity of the oscillators which make up the source.\n\t *  see Tone.FMOscillator.harmonicity\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Positive}\n\t *  @name  harmonicity\n\t */",
		"meta": {
			"filename": "MetalSynth.js",
			"lineno": 197,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {}
		},
		"description": "The harmonicity of the oscillators which make up the source.\n see Tone.FMOscillator.harmonicity",
		"memberof": "Tone.MetalSynth",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "harmonicity",
		"longname": "Tone.MetalSynth#harmonicity",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The frequency of the highpass filter attached to the envelope\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Frequency}\n\t *  @name  resonance\n\t */",
		"meta": {
			"filename": "MetalSynth.js",
			"lineno": 215,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {}
		},
		"description": "The frequency of the highpass filter attached to the envelope",
		"memberof": "Tone.MetalSynth",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"name": "resonance",
		"longname": "Tone.MetalSynth#resonance",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  The number of octaves above the \"resonance\" frequency\n\t *  that the filter ramps during the attack/decay envelope\n\t *  @memberOf Tone.MetalSynth#\n\t *  @type {Number}\n\t *  @name  octaves\n\t */",
		"meta": {
			"filename": "MetalSynth.js",
			"lineno": 231,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {}
		},
		"description": "The number of octaves above the \"resonance\" frequency\n that the filter ramps during the attack/decay envelope",
		"memberof": "Tone.MetalSynth",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "octaves",
		"longname": "Tone.MetalSynth#octaves",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.MetalSynth} this\n\t */",
		"meta": {
			"range": [
				6915,
				7484
			],
			"filename": "MetalSynth.js",
			"lineno": 252,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043283",
				"name": "Tone.MetalSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"i": "Tone.MetalSynth#dispose~i",
				"this._oscillators": "Tone.MetalSynth#_oscillators",
				"this._freqMultipliers": "Tone.MetalSynth#_freqMultipliers",
				"this.frequency": "Tone.MetalSynth#frequency",
				"this._filterFreqScaler": "Tone.MetalSynth#_filterFreqScaler",
				"this._amplitue": "Tone.MetalSynth#_amplitue",
				"this.envelope": "Tone.MetalSynth#envelope",
				"this._highpass": "Tone.MetalSynth#_highpass"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MetalSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MetalSynth#dispose",
		"kind": "function",
		"memberof": "Tone.MetalSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#dispose"
	},
	{
		"comment": "/**\n\t *  @class  This is an abstract base class for other monophonic instruments to \n\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t *          shouldn't be directly instantiated.\n\t *\n\t *  @constructor\n\t *  @abstract\n\t *  @extends {Tone.Instrument}\n\t */",
		"meta": {
			"range": [
				396,
				669
			],
			"filename": "Monophonic.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043434",
				"name": "Tone.Monophonic",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.Monophonic~options",
				"this.portamento": "Tone.Monophonic#portamento"
			}
		},
		"kind": "class",
		"classdesc": "This is an abstract base class for other monophonic instruments to \n         extend. IMPORTANT: It does not make any sound on its own and\n         shouldn't be directly instantiated.",
		"virtual": true,
		"augments": [
			"Tone.Instrument"
		],
		"name": "Monophonic",
		"longname": "Tone.Monophonic",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.Monophonic#portamento",
		"kind": "member",
		"memberof": "Tone.Monophonic",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				777,
				827
			],
			"filename": "Monophonic.js",
			"lineno": 34,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043483",
				"name": "Tone.Monophonic.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Monophonic.defaults",
		"memberof": "Tone.Monophonic"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				808,
				824
			],
			"filename": "Monophonic.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043490",
				"name": "portamento",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "portamento",
		"longname": "Tone.Monophonic.defaults.portamento",
		"kind": "member",
		"memberof": "Tone.Monophonic.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.Monophonic#triggerAttack",
		"kind": "function",
		"memberof": "Tone.Monophonic",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.Monophonic#triggerRelease",
		"kind": "function",
		"memberof": "Tone.Monophonic",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerRelease"
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.Monophonic#setNote",
		"kind": "function",
		"memberof": "Tone.Monophonic",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t *          \n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth \n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.MonoSynth({\n\t * \t\"oscillator\" : {\n\t * \t\t\"type\" : \"square\"\n\t *  },\n\t *  \"envelope\" : {\n\t *  \t\"attack\" : 0.1\n\t *  }\n\t * }).toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1003,
				2286
			],
			"filename": "MonoSynth.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043681",
				"name": "Tone.MonoSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.MonoSynth~options",
				"this.oscillator": "Tone.MonoSynth#oscillator",
				"this.frequency": "Tone.MonoSynth#frequency",
				"this.detune": "Tone.MonoSynth#detune",
				"this.filter": "Tone.MonoSynth#filter",
				"this.filterEnvelope": "Tone.MonoSynth#filterEnvelope",
				"this.envelope": "Tone.MonoSynth#envelope"
			}
		},
		"kind": "class",
		"classdesc": "Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n         The amplitude of the Tone.Oscillator and the cutoff frequency of the \n         Tone.Filter are controlled by Tone.Envelopes. \n         <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">",
		"augments": [
			"Tone.Monophonic"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth \n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var synth = new Tone.MonoSynth({\n\t\"oscillator\" : {\n\t\t\"type\" : \"square\"\n },\n \"envelope\" : {\n \t\"attack\" : 0.1\n }\n}).toMaster();\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "MonoSynth",
		"longname": "Tone.MonoSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */",
		"meta": {
			"range": [
				1234,
				1295
			],
			"filename": "MonoSynth.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043711",
				"name": "this.oscillator",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The oscillator.",
		"type": {
			"names": [
				"Tone.OmniOscillator"
			]
		},
		"name": "oscillator",
		"longname": "Tone.MonoSynth#oscillator",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1379,
				1421
			],
			"filename": "MonoSynth.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043723",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this.oscillator.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.MonoSynth#frequency",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1498,
				1534
			],
			"filename": "MonoSynth.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043733",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this.oscillator.detune",
				"paramnames": []
			}
		},
		"description": "The detune control.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.MonoSynth#detune",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The filter.\n\t\t *  @type {Tone.Filter}\n\t\t */",
		"meta": {
			"range": [
				1595,
				1640
			],
			"filename": "MonoSynth.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043743",
				"name": "this.filter",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The filter.",
		"type": {
			"names": [
				"Tone.Filter"
			]
		},
		"name": "filter",
		"longname": "Tone.MonoSynth#filter",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The filter envelope.\n\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1721,
				1793
			],
			"filename": "MonoSynth.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043755",
				"name": "this.filterEnvelope",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The filter envelope.",
		"type": {
			"names": [
				"Tone.FrequencyEnvelope"
			]
		},
		"name": "filterEnvelope",
		"longname": "Tone.MonoSynth#filterEnvelope",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1877,
				1937
			],
			"filename": "MonoSynth.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043767",
				"name": "this.envelope",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amplitude envelope.",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.MonoSynth#envelope",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2393,
				2843
			],
			"filename": "MonoSynth.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043837",
				"name": "Tone.MonoSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MonoSynth.defaults",
		"memberof": "Tone.MonoSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2423,
				2441
			],
			"filename": "MonoSynth.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043844",
				"name": "frequency",
				"type": "Literal",
				"value": "C4"
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.MonoSynth.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2445,
				2457
			],
			"filename": "MonoSynth.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043846",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.MonoSynth.defaults.detune",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2461,
				2502
			],
			"filename": "MonoSynth.js",
			"lineno": 91,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043848",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"square\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.MonoSynth.defaults.oscillator",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2481,
				2498
			],
			"filename": "MonoSynth.js",
			"lineno": 92,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043850",
				"name": "type",
				"type": "Literal",
				"value": "square"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.MonoSynth.defaults.oscillator.type",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2506,
				2576
			],
			"filename": "MonoSynth.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043852",
				"name": "filter",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}"
			}
		},
		"undocumented": true,
		"name": "filter",
		"longname": "Tone.MonoSynth.defaults.filter",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2522,
				2529
			],
			"filename": "MonoSynth.js",
			"lineno": 95,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043854",
				"name": "Q",
				"type": "Literal",
				"value": 6
			}
		},
		"undocumented": true,
		"name": "Q",
		"longname": "Tone.MonoSynth.defaults.filter.Q",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2534,
				2552
			],
			"filename": "MonoSynth.js",
			"lineno": 96,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043856",
				"name": "type",
				"type": "Literal",
				"value": "lowpass"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.MonoSynth.defaults.filter.type",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2557,
				2572
			],
			"filename": "MonoSynth.js",
			"lineno": 97,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043858",
				"name": "rolloff",
				"type": "UnaryExpression",
				"value": -24
			}
		},
		"undocumented": true,
		"name": "rolloff",
		"longname": "Tone.MonoSynth.defaults.filter.rolloff",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filter",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2580,
				2674
			],
			"filename": "MonoSynth.js",
			"lineno": 99,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043861",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.MonoSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2598,
				2614
			],
			"filename": "MonoSynth.js",
			"lineno": 100,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043863",
				"name": "attack",
				"type": "Literal",
				"value": 0.005
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MonoSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2619,
				2632
			],
			"filename": "MonoSynth.js",
			"lineno": 101,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043865",
				"name": "decay",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.MonoSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2637,
				2652
			],
			"filename": "MonoSynth.js",
			"lineno": 102,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043867",
				"name": "sustain",
				"type": "Literal",
				"value": 0.9
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.MonoSynth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2657,
				2670
			],
			"filename": "MonoSynth.js",
			"lineno": 103,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043869",
				"name": "release",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MonoSynth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2678,
				2840
			],
			"filename": "MonoSynth.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043871",
				"name": "filterEnvelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":2}"
			}
		},
		"undocumented": true,
		"name": "filterEnvelope",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2702,
				2717
			],
			"filename": "MonoSynth.js",
			"lineno": 106,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043873",
				"name": "attack",
				"type": "Literal",
				"value": 0.06
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.attack",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2722,
				2735
			],
			"filename": "MonoSynth.js",
			"lineno": 107,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043875",
				"name": "decay",
				"type": "Literal",
				"value": 0.2
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.decay",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2740,
				2755
			],
			"filename": "MonoSynth.js",
			"lineno": 108,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043877",
				"name": "sustain",
				"type": "Literal",
				"value": 0.5
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.sustain",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2760,
				2773
			],
			"filename": "MonoSynth.js",
			"lineno": 109,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043879",
				"name": "release",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.release",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2778,
				2799
			],
			"filename": "MonoSynth.js",
			"lineno": 110,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043881",
				"name": "baseFrequency",
				"type": "Literal",
				"value": 200
			}
		},
		"undocumented": true,
		"name": "baseFrequency",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.baseFrequency",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2804,
				2817
			],
			"filename": "MonoSynth.js",
			"lineno": 111,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043883",
				"name": "octaves",
				"type": "Literal",
				"value": 7
			}
		},
		"undocumented": true,
		"name": "octaves",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.octaves",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2822,
				2836
			],
			"filename": "MonoSynth.js",
			"lineno": 112,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043885",
				"name": "exponent",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "exponent",
		"longname": "Tone.MonoSynth.defaults.filterEnvelope.exponent",
		"kind": "member",
		"memberof": "Tone.MonoSynth.defaults.filterEnvelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.MonoSynth} this\n\t */",
		"meta": {
			"range": [
				3695,
				4167
			],
			"filename": "MonoSynth.js",
			"lineno": 147,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043950",
				"name": "Tone.MonoSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.oscillator": "Tone.MonoSynth#oscillator",
				"this.envelope": "Tone.MonoSynth#envelope",
				"this.filterEnvelope": "Tone.MonoSynth#filterEnvelope",
				"this.filter": "Tone.MonoSynth#filter",
				"this.frequency": "Tone.MonoSynth#frequency",
				"this.detune": "Tone.MonoSynth#detune"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MonoSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MonoSynth#dispose",
		"kind": "function",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"overrides": "Tone.Monophonic#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] the options available for the synth \n\t *                          see defaults below\n\t * @example\n\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t */",
		"meta": {
			"range": [
				921,
				1552
			],
			"filename": "NoiseSynth.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044073",
				"name": "Tone.NoiseSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.NoiseSynth~options",
				"this.noise": "Tone.NoiseSynth#noise",
				"this.envelope": "Tone.NoiseSynth#envelope"
			}
		},
		"kind": "class",
		"classdesc": "Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n         and two envelopes (Tone.Envelop). One envelope controls the amplitude\n         of the noise and the other is controls the cutoff frequency of the filter. \n         <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">",
		"augments": [
			"Tone.Instrument"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth \n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var noiseSynth = new Tone.NoiseSynth().toMaster();\nnoiseSynth.triggerAttackRelease(\"8n\");"
		],
		"name": "NoiseSynth",
		"longname": "Tone.NoiseSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The noise source.\n\t\t *  @type {Tone.Noise}\n\t\t *  @example\n\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t */",
		"meta": {
			"range": [
				1206,
				1235
			],
			"filename": "NoiseSynth.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044103",
				"name": "this.noise",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The noise source.",
		"type": {
			"names": [
				"Tone.Noise"
			]
		},
		"examples": [
			"noiseSynth.set(\"noise.type\", \"brown\");"
		],
		"name": "noise",
		"longname": "Tone.NoiseSynth#noise",
		"kind": "member",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amplitude envelope. \n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1320,
				1380
			],
			"filename": "NoiseSynth.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044112",
				"name": "this.envelope",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amplitude envelope.",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.NoiseSynth#envelope",
		"kind": "member",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1660,
				1810
			],
			"filename": "NoiseSynth.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044163",
				"name": "Tone.NoiseSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.NoiseSynth.defaults",
		"memberof": "Tone.NoiseSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1691,
				1726
			],
			"filename": "NoiseSynth.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044170",
				"name": "noise",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"white\"}"
			}
		},
		"undocumented": true,
		"name": "noise",
		"longname": "Tone.NoiseSynth.defaults.noise",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1706,
				1722
			],
			"filename": "NoiseSynth.js",
			"lineno": 57,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044172",
				"name": "type",
				"type": "Literal",
				"value": "white"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.NoiseSynth.defaults.noise.type",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults.noise",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1730,
				1807
			],
			"filename": "NoiseSynth.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044174",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.NoiseSynth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1748,
				1764
			],
			"filename": "NoiseSynth.js",
			"lineno": 60,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044176",
				"name": "attack",
				"type": "Literal",
				"value": 0.005
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.NoiseSynth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1769,
				1782
			],
			"filename": "NoiseSynth.js",
			"lineno": 61,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044178",
				"name": "decay",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.NoiseSynth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1787,
				1802
			],
			"filename": "NoiseSynth.js",
			"lineno": 62,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044180",
				"name": "sustain",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.NoiseSynth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.NoiseSynth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start the attack portion of the envelopes. Unlike other \n\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t *  @param {Time} [time=now] the time the attack should start\n\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t *  @returns {Tone.NoiseSynth} this\n\t *  @example\n\t * noiseSynth.triggerAttack();\n\t */",
		"meta": {
			"range": [
				2153,
				2304
			],
			"filename": "NoiseSynth.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044183",
				"name": "Tone.NoiseSynth.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"velocity"
				]
			}
		},
		"description": "Start the attack portion of the envelopes. Unlike other \n instruments, Tone.NoiseSynth doesn't have a note.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time the attack should start",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "the velocity of the note (0-1)",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.NoiseSynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"noiseSynth.triggerAttack();"
		],
		"name": "triggerAttack",
		"longname": "Tone.NoiseSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Start the release portion of the envelopes.\n\t *  @param {Time} [time=now] the time the release should start\n\t *  @returns {Tone.NoiseSynth} this\n\t */",
		"meta": {
			"range": [
				2468,
				2582
			],
			"filename": "NoiseSynth.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044207",
				"name": "Tone.NoiseSynth.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the release portion of the envelopes.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time the release should start",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.NoiseSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.NoiseSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerRelease"
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release. \n\t *  @param  {Time} duration the duration of the note\n\t *  @param  {Time} [time=now]     the time of the attack\n\t *  @param  {number} [velocity=1] the velocity\n\t *  @returns {Tone.NoiseSynth} this\n\t */",
		"meta": {
			"range": [
				2840,
				3090
			],
			"filename": "NoiseSynth.js",
			"lineno": 98,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044229",
				"name": "Tone.NoiseSynth.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.NoiseSynth#triggerAttackRelease~time",
				"duration": "Tone.NoiseSynth#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the duration of the note",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "the time of the attack",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "the velocity",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.NoiseSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.NoiseSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttackRelease"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.NoiseSynth} this\n\t */",
		"meta": {
			"range": [
				3157,
				3407
			],
			"filename": "NoiseSynth.js",
			"lineno": 110,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044276",
				"name": "Tone.NoiseSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.noise": "Tone.NoiseSynth#noise",
				"this.envelope": "Tone.NoiseSynth#envelope"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.NoiseSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.NoiseSynth#dispose",
		"kind": "function",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#dispose"
	},
	{
		"comment": "/**\n\t *  @class Karplus-String string synthesis. Often out of tune. \n\t *         Will change when the AudioWorkerNode is available across\n\t *         browsers. \n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {Object} [options] see the defaults\n\t *  @example\n\t * var plucky = new Tone.PluckSynth().toMaster();\n\t * plucky.triggerAttack(\"C4\");\n\t */",
		"meta": {
			"range": [
				516,
				1535
			],
			"filename": "PluckSynth.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044354",
				"name": "Tone.PluckSynth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.PluckSynth~options",
				"this._noise": "Tone.PluckSynth#_noise",
				"this.attackNoise": "Tone.PluckSynth#attackNoise",
				"this._lfcf": "Tone.PluckSynth#_lfcf",
				"this.resonance": "Tone.PluckSynth#resonance",
				"this.dampening": "Tone.PluckSynth#dampening"
			}
		},
		"kind": "class",
		"classdesc": "Karplus-String string synthesis. Often out of tune. \n        Will change when the AudioWorkerNode is available across\n        browsers.",
		"augments": [
			"Tone.Instrument"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "see the defaults",
				"name": "options"
			}
		],
		"examples": [
			"var plucky = new Tone.PluckSynth().toMaster();\nplucky.triggerAttack(\"C4\");"
		],
		"name": "PluckSynth",
		"longname": "Tone.PluckSynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The amount of noise at the attack. \n\t\t *  Nominal range of [0.1, 20]\n\t\t *  @type {number}\n\t\t */",
		"meta": {
			"range": [
				861,
				899
			],
			"filename": "PluckSynth.js",
			"lineno": 33,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044394",
				"name": "this.attackNoise",
				"type": "MemberExpression",
				"value": "options.attackNoise",
				"paramnames": []
			}
		},
		"description": "The amount of noise at the attack. \n Nominal range of [0.1, 20]",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "attackNoise",
		"longname": "Tone.PluckSynth#attackNoise",
		"kind": "member",
		"memberof": "Tone.PluckSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The resonance control. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1187,
				1224
			],
			"filename": "PluckSynth.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044420",
				"name": "this.resonance",
				"type": "MemberExpression",
				"value": "this._lfcf.resonance",
				"paramnames": []
			}
		},
		"description": "The resonance control.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "resonance",
		"longname": "Tone.PluckSynth#resonance",
		"kind": "member",
		"memberof": "Tone.PluckSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1361,
				1398
			],
			"filename": "PluckSynth.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044430",
				"name": "this.dampening",
				"type": "MemberExpression",
				"value": "this._lfcf.dampening",
				"paramnames": []
			}
		},
		"description": "The dampening control. i.e. the lowpass filter frequency of the comb filter",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "dampening",
		"longname": "Tone.PluckSynth#dampening",
		"kind": "member",
		"memberof": "Tone.PluckSynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1643,
				1737
			],
			"filename": "PluckSynth.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044479",
				"name": "Tone.PluckSynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.9}",
				"paramnames": []
			}
		},
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.PluckSynth.defaults",
		"memberof": "Tone.PluckSynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1674,
				1691
			],
			"filename": "PluckSynth.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044486",
				"name": "attackNoise",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "attackNoise",
		"longname": "Tone.PluckSynth.defaults.attackNoise",
		"kind": "member",
		"memberof": "Tone.PluckSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1695,
				1713
			],
			"filename": "PluckSynth.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044488",
				"name": "dampening",
				"type": "Literal",
				"value": 4000
			}
		},
		"undocumented": true,
		"name": "dampening",
		"longname": "Tone.PluckSynth.defaults.dampening",
		"kind": "member",
		"memberof": "Tone.PluckSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1717,
				1734
			],
			"filename": "PluckSynth.js",
			"lineno": 75,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044490",
				"name": "resonance",
				"type": "Literal",
				"value": 0.9
			}
		},
		"undocumented": true,
		"name": "resonance",
		"longname": "Tone.PluckSynth.defaults.resonance",
		"kind": "member",
		"memberof": "Tone.PluckSynth.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Trigger the note. \n\t *  @param {Frequency} note The note to trigger.\n\t *  @param {Time} [time=now] When the note should be triggered.\n\t *  @returns {Tone.PluckSynth} this\n\t */",
		"meta": {
			"range": [
				1927,
				2249
			],
			"filename": "PluckSynth.js",
			"lineno": 84,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044493",
				"name": "Tone.PluckSynth.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"note": "Tone.PluckSynth#triggerAttack~note",
				"time": "Tone.PluckSynth#triggerAttack~time",
				"delayAmount": "Tone.PluckSynth#triggerAttack~delayAmount"
			}
		},
		"description": "Trigger the note.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PluckSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttack",
		"longname": "Tone.PluckSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.PluckSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Clean up. \n\t *  @returns {Tone.PluckSynth} this\n\t */",
		"meta": {
			"range": [
				2316,
				2617
			],
			"filename": "PluckSynth.js",
			"lineno": 98,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044563",
				"name": "Tone.PluckSynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._noise": "Tone.PluckSynth#_noise",
				"this._lfcf": "Tone.PluckSynth#_lfcf",
				"this.dampening": "Tone.PluckSynth#dampening",
				"this.resonance": "Tone.PluckSynth#resonance"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PluckSynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PluckSynth#dispose",
		"kind": "function",
		"memberof": "Tone.PluckSynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t *          instruments passed in as the second paramter. PolySynth is \n\t *          not a synthesizer by itself, it merely manages voices of \n\t *          one of the other types of synths, allowing any of the \n\t *          monophonic synthesizers to be polyphonic. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.Instrument}\n\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t *                                            uses Tone.Synth by default. \n\t *  @example\n\t * //a polysynth composed of 6 Voices of Synth\n\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t * //set the attributes using the set interface\n\t * synth.set(\"detune\", -1200);\n\t * //play a chord\n\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t */",
		"meta": {
			"range": [
				1018,
				2126
			],
			"filename": "PolySynth.js",
			"lineno": 26,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044652",
				"name": "Tone.PolySynth",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PolySynth~options",
				"options.polyphony": "Tone.PolySynth~options.polyphony",
				"this.voices": "Tone.PolySynth#voices",
				"this._triggers": "Tone.PolySynth#_triggers",
				"this.detune": "Tone.PolySynth#detune",
				"i": "Tone.PolySynth~i",
				"v": "Tone.PolySynth~v",
				"this.voices[undefined]": "Tone.PolySynth#voices[undefined]",
				"this._triggers[undefined]": "Tone.PolySynth#_triggers[undefined]"
			}
		},
		"kind": "class",
		"classdesc": "Tone.PolySynth handles voice creation and allocation for any\n         instruments passed in as the second paramter. PolySynth is \n         not a synthesizer by itself, it merely manages voices of \n         one of the other types of synths, allowing any of the \n         monophonic synthesizers to be polyphonic.",
		"augments": [
			"Tone.Instrument"
		],
		"params": [
			{
				"type": {
					"names": [
						"number",
						"Object"
					]
				},
				"optional": true,
				"defaultvalue": 4,
				"description": "The number of voices to create",
				"name": "polyphony"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"defaultvalue": "Tone.Synth",
				"description": "The constructor of the voices\n                                           uses Tone.Synth by default.",
				"name": "voice"
			}
		],
		"examples": [
			"//a polysynth composed of 6 Voices of Synth\nvar synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n//set the attributes using the set interface\nsynth.set(\"detune\", -1200);\n//play a chord\nsynth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");"
		],
		"name": "PolySynth",
		"longname": "Tone.PolySynth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  the array of voices\n\t\t *  @type {Array}\n\t\t */",
		"meta": {
			"range": [
				1394,
				1436
			],
			"filename": "PolySynth.js",
			"lineno": 39,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044712",
				"name": "this.voices",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "the array of voices",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "voices",
		"longname": "Tone.PolySynth#voices",
		"kind": "member",
		"memberof": "Tone.PolySynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune in cents\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1694,
				1756
			],
			"filename": "PolySynth.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044732",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune in cents",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.PolySynth#detune",
		"kind": "member",
		"memberof": "Tone.PolySynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the defaults\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2251,
				2355
			],
			"filename": "PolySynth.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044840",
				"name": "Tone.PolySynth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "the defaults",
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.PolySynth.defaults",
		"memberof": "Tone.PolySynth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2281,
				2296
			],
			"filename": "PolySynth.js",
			"lineno": 82,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044847",
				"name": "polyphony",
				"type": "Literal",
				"value": 4
			}
		},
		"undocumented": true,
		"name": "polyphony",
		"longname": "Tone.PolySynth.defaults.polyphony",
		"kind": "member",
		"memberof": "Tone.PolySynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2300,
				2312
			],
			"filename": "PolySynth.js",
			"lineno": 83,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044849",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.PolySynth.defaults.volume",
		"kind": "member",
		"memberof": "Tone.PolySynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2316,
				2328
			],
			"filename": "PolySynth.js",
			"lineno": 84,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044851",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.PolySynth.defaults.detune",
		"kind": "member",
		"memberof": "Tone.PolySynth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2332,
				2352
			],
			"filename": "PolySynth.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044853",
				"name": "voice",
				"type": "MemberExpression",
				"value": "Tone.Synth"
			}
		},
		"undocumented": true,
		"name": "voice",
		"longname": "Tone.PolySynth.defaults.voice",
		"kind": "member",
		"memberof": "Tone.PolySynth.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Trigger the attack portion of the note\n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} [time=now]  The start time of the note.\n\t *  @param {number} [velocity=1] The velocity of the note.\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * //trigger a chord immediately with a velocity of 0.2\n\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t */",
		"meta": {
			"range": [
				2849,
				3474
			],
			"filename": "PolySynth.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044858",
				"name": "Tone.PolySynth.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"notes",
					"time",
					"velocity"
				]
			},
			"vars": {
				"notes": "Tone.PolySynth#triggerAttack~notes",
				"time": "Tone.PolySynth#triggerAttack~time",
				"i": "Tone.PolySynth#triggerAttack~i",
				"val": "Tone.PolySynth#triggerAttack~val",
				"oldest": "Tone.PolySynth#triggerAttack~oldest",
				"oldestIndex": "Tone.PolySynth#triggerAttack~oldestIndex",
				"j": "Tone.PolySynth#triggerAttack~j",
				"oldest.release": "Tone.PolySynth#triggerAttack~oldest.release",
				"oldest.note": "Tone.PolySynth#triggerAttack~oldest.note"
			}
		},
		"description": "Trigger the attack portion of the note",
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Array"
					]
				},
				"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
				"name": "notes"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The start time of the note.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the note.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger a chord immediately with a velocity of 0.2\npoly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);"
		],
		"name": "triggerAttack",
		"longname": "Tone.PolySynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttack"
	},
	{
		"comment": "/**\n\t *  Trigger the attack and release after the specified duration\n\t *  \n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} duration the duration of the note\n\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * //trigger a chord for a duration of a half note \n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t *  @example\n\t * //can pass in an array of durations as well\n\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t */",
		"meta": {
			"range": [
				4196,
				4679
			],
			"filename": "PolySynth.js",
			"lineno": 138,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100044992",
				"name": "Tone.PolySynth.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"notes",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.PolySynth#triggerAttackRelease~time",
				"i": "Tone.PolySynth#triggerAttackRelease~i",
				"d": "Tone.PolySynth#triggerAttackRelease~d"
			}
		},
		"description": "Trigger the attack and release after the specified duration",
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Array"
					]
				},
				"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
				"name": "notes"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the duration of the note",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "if no time is given, defaults to now",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "the velocity of the attack (0-1)",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger a chord for a duration of a half note \npoly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n ",
			"//can pass in an array of durations as well\npoly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.PolySynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerAttackRelease"
	},
	{
		"comment": "/**\n\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t *                                  Frequency or an array of frequencies.\n\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t */",
		"meta": {
			"range": [
				5160,
				5659
			],
			"filename": "PolySynth.js",
			"lineno": 162,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045095",
				"name": "Tone.PolySynth.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"notes",
					"time"
				]
			},
			"vars": {
				"notes": "Tone.PolySynth#triggerRelease~notes",
				"time": "Tone.PolySynth#triggerRelease~time",
				"i": "Tone.PolySynth#triggerRelease~i",
				"stringified": "Tone.PolySynth#triggerRelease~stringified",
				"v": "Tone.PolySynth#triggerRelease~v",
				"desc": "Tone.PolySynth#triggerRelease~desc",
				"desc.release": "Tone.PolySynth#triggerRelease~desc.release"
			}
		},
		"description": "Trigger the release of the note. Unlike monophonic instruments, \n a note (or array of notes) needs to be passed in as the first argument.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency",
						"Array"
					]
				},
				"description": "The notes to play. Accepts a single\n                                 Frequency or an array of frequencies.",
				"name": "notes"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the release will be triggered.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");"
		],
		"name": "triggerRelease",
		"longname": "Tone.PolySynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#triggerRelease"
	},
	{
		"comment": "/**\n\t *  Set a member/attribute of the voices. \n\t *  @param {Object|string} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone.PolySynth} this\n\t *  @example\n\t * poly.set({\n\t * \t\"filter\" : {\n\t * \t\t\"type\" : \"highpass\"\n\t * \t},\n\t * \t\"envelope\" : {\n\t * \t\t\"attack\" : 0.25\n\t * \t}\n\t * });\n\t */",
		"meta": {
			"range": [
				5983,
				6166
			],
			"filename": "PolySynth.js",
			"lineno": 197,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045204",
				"name": "Tone.PolySynth.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"params",
					"value",
					"rampTime"
				]
			},
			"vars": {
				"i": "Tone.PolySynth#set~i"
			}
		},
		"description": "Set a member/attribute of the voices.",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"string"
					]
				},
				"name": "params"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"name": "rampTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"poly.set({\n\t\"filter\" : {\n\t\t\"type\" : \"highpass\"\n\t},\n\t\"envelope\" : {\n\t\t\"attack\" : 0.25\n\t}\n});"
		],
		"name": "set",
		"longname": "Tone.PolySynth#set",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the synth's attributes. Given no arguments get\n\t *  will return all available object properties and their corresponding\n\t *  values. Pass in a single attribute to retrieve or an array\n\t *  of attributes. The attribute strings can also include a \".\"\n\t *  to access deeper properties.\n\t *  @param {Array=} params the parameters to get, otherwise will return \n\t *  \t\t\t\t\t   all available.\n\t */",
		"meta": {
			"range": [
				6574,
				6662
			],
			"filename": "PolySynth.js",
			"lineno": 213,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045247",
				"name": "Tone.PolySynth.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"params"
				]
			}
		},
		"description": "Get the synth's attributes. Given no arguments get\n will return all available object properties and their corresponding\n values. Pass in a single attribute to retrieve or an array\n of attributes. The attribute strings can also include a \".\"\n to access deeper properties.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"optional": true,
				"description": "the parameters to get, otherwise will return \n \t\t\t\t\t   all available.",
				"name": "params"
			}
		],
		"name": "get",
		"longname": "Tone.PolySynth#get",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of all the currently active voices.\n\t *  @param {Time} [time=now] When the notes should be released.\n\t *  @return {Tone.PolySynth} this\n\t */",
		"meta": {
			"range": [
				6845,
				7131
			],
			"filename": "PolySynth.js",
			"lineno": 222,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045269",
				"name": "Tone.PolySynth.prototype.releaseAll",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.PolySynth#releaseAll~time",
				"i": "Tone.PolySynth#releaseAll~i",
				"desc": "Tone.PolySynth#releaseAll~desc",
				"desc.release": "Tone.PolySynth#releaseAll~desc.release"
			}
		},
		"description": "Trigger the release portion of all the currently active voices.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the notes should be released.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"name": "releaseAll",
		"longname": "Tone.PolySynth#releaseAll",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.PolySynth} this\n\t */",
		"meta": {
			"range": [
				7196,
				7537
			],
			"filename": "PolySynth.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045335",
				"name": "Tone.PolySynth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"i": "Tone.PolySynth#dispose~i",
				"this.voices[undefined]": "Tone.PolySynth#voices[undefined]",
				"this.detune": "Tone.PolySynth#detune",
				"this.voices": "Tone.PolySynth#voices",
				"this._triggers": "Tone.PolySynth#_triggers"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PolySynth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PolySynth#dispose",
		"kind": "function",
		"memberof": "Tone.PolySynth",
		"scope": "instance",
		"overrides": "Tone.Instrument#dispose"
	},
	{
		"comment": "/**\n\t *  The maximum number of notes that can be allocated \n\t *  to a polysynth. \n\t *  @type  {Number}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				7663,
				7696
			],
			"filename": "PolySynth.js",
			"lineno": 258,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045423",
				"name": "Tone.PolySynth.MAX_POLYPHONY",
				"type": "Literal",
				"value": 20,
				"paramnames": []
			}
		},
		"description": "The maximum number of notes that can be allocated \n to a polysynth.",
		"type": {
			"names": [
				"Number"
			]
		},
		"scope": "static",
		"name": "MAX_POLYPHONY",
		"longname": "Tone.PolySynth.MAX_POLYPHONY",
		"kind": "member",
		"memberof": "Tone.PolySynth"
	},
	{
		"comment": "/**\n\t * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n\t *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).\n\t * @param {Object} samples An object of samples mapping either Midi\n\t *                         Note Numbers or Scientific Pitch Notation\n\t *                         to the url of that sample.\n\t * @example\n\t * var sampler = new Tone.Sampler({\n\t * \t\"C3\" : \"path/to/C3.mp3\",\n\t * \t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t * \t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t * \t\"A3\" : \"path/to/A3.mp3\",\n\t * }, function(){\n\t * \t//sampler will repitch the closest sample\n\t * \tsampler.triggerAttack(\"D3\")\n\t * })\n\t */",
		"meta": {
			"range": [
				1113,
				2331
			],
			"filename": "Sampler.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045448",
				"name": "Tone.Sampler",
				"type": "FunctionExpression",
				"paramnames": [
					"urls"
				]
			},
			"vars": {
				"args": "Tone.Sampler~args",
				"options": "Tone.Sampler~options",
				"urlMap": "Tone.Sampler~urlMap",
				"note": "Tone.Sampler~note",
				"mid": "Tone.Sampler~mid",
				"urlMap[undefined]": "Tone.Sampler~urlMap.undefined]",
				"this._buffers": "Tone.Sampler#_buffers",
				"this._activeSources": "Tone.Sampler#_activeSources",
				"this.attack": "Tone.Sampler#attack",
				"this.release": "Tone.Sampler#release"
			}
		},
		"kind": "class",
		"classdesc": "Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.\n       For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "An object of samples mapping either Midi\n                        Note Numbers or Scientific Pitch Notation\n                        to the url of that sample.",
				"name": "samples"
			}
		],
		"examples": [
			"var sampler = new Tone.Sampler({\n\t\"C3\" : \"path/to/C3.mp3\",\n\t\"D#3\" : \"path/to/Dsharp3.mp3\",\n\t\"F#3\" : \"path/to/Fsharp3.mp3\",\n\t\"A3\" : \"path/to/A3.mp3\",\n}, function(){\n\t//sampler will repitch the closest sample\n\tsampler.triggerAttack(\"D3\")\n})"
		],
		"name": "Sampler",
		"longname": "Tone.Sampler",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The envelope applied to the beginning of the sample.\n\t\t * @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2180,
				2208
			],
			"filename": "Sampler.js",
			"lineno": 61,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045575",
				"name": "this.attack",
				"type": "MemberExpression",
				"value": "options.attack",
				"paramnames": []
			}
		},
		"description": "The envelope applied to the beginning of the sample.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.Sampler#attack",
		"kind": "member",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t * The envelope applied to the end of the envelope.\n\t\t * @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2297,
				2327
			],
			"filename": "Sampler.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045583",
				"name": "this.release",
				"type": "MemberExpression",
				"value": "options.release",
				"paramnames": []
			}
		},
		"description": "The envelope applied to the end of the envelope.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.Sampler#release",
		"kind": "member",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The defaults\n\t * @const\n\t * @type {Object}\n\t */",
		"meta": {
			"range": [
				2438,
				2534
			],
			"filename": "Sampler.js",
			"lineno": 77,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045602",
				"name": "Tone.Sampler.defaults",
				"type": "ObjectExpression",
				"value": "{\"attack\":0,\"release\":0.1,\"onload\":\"\",\"baseUrl\":\"\"}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Sampler.defaults",
		"memberof": "Tone.Sampler",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2466,
				2476
			],
			"filename": "Sampler.js",
			"lineno": 78,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045609",
				"name": "attack",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Sampler.defaults.attack",
		"kind": "member",
		"memberof": "Tone.Sampler.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2480,
				2493
			],
			"filename": "Sampler.js",
			"lineno": 79,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045611",
				"name": "release",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Sampler.defaults.release",
		"kind": "member",
		"memberof": "Tone.Sampler.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2497,
				2515
			],
			"filename": "Sampler.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045613",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.Sampler.defaults.onload",
		"kind": "member",
		"memberof": "Tone.Sampler.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2519,
				2531
			],
			"filename": "Sampler.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045617",
				"name": "baseUrl",
				"type": "Literal",
				"value": ""
			}
		},
		"undocumented": true,
		"name": "baseUrl",
		"longname": "Tone.Sampler.defaults.baseUrl",
		"kind": "member",
		"memberof": "Tone.Sampler.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * @param  {Frequency} note     The note to play\n\t * @param  {Time=} time     When to play the note\n\t * @param  {NormalRange=} velocity The velocity to play the sample back.\n\t * @return {Tone.Sampler}          this\n\t */",
		"meta": {
			"range": [
				3265,
				4086
			],
			"filename": "Sampler.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045677",
				"name": "Tone.Sampler.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"midi": "Tone.Sampler#triggerAttack~midi",
				"difference": "Tone.Sampler#triggerAttack~difference",
				"closestNote": "Tone.Sampler#triggerAttack~closestNote",
				"buffer": "Tone.Sampler#triggerAttack~buffer",
				"source": "Tone.Sampler#triggerAttack~source",
				"this._activeSources[undefined]": "Tone.Sampler#_activeSources[undefined]"
			}
		},
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to play",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to play the note",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The velocity to play the sample back.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sampler"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttack",
		"longname": "Tone.Sampler#triggerAttack",
		"kind": "function",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * @param  {Frequency} note     The note to release.\n\t * @param  {Time=} time     \tWhen to release the note.\n\t * @return {Tone.Sampler}\tthis\n\t */",
		"meta": {
			"range": [
				4242,
				4584
			],
			"filename": "Sampler.js",
			"lineno": 143,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045808",
				"name": "Tone.Sampler.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"midi": "Tone.Sampler#triggerRelease~midi",
				"source": "Tone.Sampler#triggerRelease~source",
				"time": "Tone.Sampler#triggerRelease~time"
			}
		},
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to release.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to release the note.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sampler"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.Sampler#triggerRelease",
		"kind": "function",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Invoke the attack phase, then after the duration, invoke the release.\n\t * @param  {Frequency} note     The note to play\n\t * @param  {Time} duration The time the note should be held\n\t * @param  {Time=} time     When to start the attack\n\t * @param  {NormalRange} [velocity=1] The velocity of the attack\n\t * @return {Tone.Sampler}          this\n\t */",
		"meta": {
			"range": [
				4944,
				5209
			],
			"filename": "Sampler.js",
			"lineno": 161,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045881",
				"name": "Tone.Sampler.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Sampler#triggerAttackRelease~time",
				"duration": "Tone.Sampler#triggerAttackRelease~duration"
			}
		},
		"description": "Invoke the attack phase, then after the duration, invoke the release.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to play",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time the note should be held",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to start the attack",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the attack",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sampler"
					]
				},
				"description": "this"
			}
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.Sampler#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add a note to the sampler.\n\t *  @param  {Note|Midi}   note      The buffer's pitch.\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,\n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke\n\t *                                 when the url is loaded.\n\t */",
		"meta": {
			"range": [
				5669,
				6110
			],
			"filename": "Sampler.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100045931",
				"name": "Tone.Sampler.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"url",
					"callback"
				]
			},
			"vars": {
				"mid": "Tone.Sampler#add~mid"
			}
		},
		"description": "Add a note to the sampler.",
		"params": [
			{
				"type": {
					"names": [
						"Note",
						"Midi"
					]
				},
				"description": "The buffer's pitch.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"String",
						"Tone.Buffer",
						"Audiobuffer"
					]
				},
				"description": "Either the url of the bufer,\n                                                or a buffer which will be added\n                                                with the given name.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke\n                                when the url is loaded.",
				"name": "callback"
			}
		],
		"name": "add",
		"longname": "Tone.Sampler#add",
		"kind": "function",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If the buffers are loaded or not\n\t * @memberOf Tone.Sampler#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Sampler.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {}
		},
		"description": "If the buffers are loaded or not",
		"memberof": "Tone.Sampler",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loaded",
		"readonly": true,
		"longname": "Tone.Sampler#loaded",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Clean up\n\t * @return {Tone.Sampler} this\n\t */",
		"meta": {
			"range": [
				6416,
				6741
			],
			"filename": "Sampler.js",
			"lineno": 208,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046019",
				"name": "Tone.Sampler.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._buffers": "Tone.Sampler#_buffers",
				"midi": "Tone.Sampler#dispose~midi",
				"": null,
				"this._activeSources": "Tone.Sampler#_activeSources"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Sampler"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Sampler#dispose",
		"kind": "function",
		"memberof": "Tone.Sampler",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t *          routed through a Tone.AmplitudeEnvelope. \n\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Monophonic}\n\t *  @param {Object} [options] the options available for the synth \n\t *                          see defaults below\n\t *  @example\n\t * var synth = new Tone.Synth().toMaster();\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				708,
				1597
			],
			"filename": "Synth.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046110",
				"name": "Tone.Synth",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.Synth~options",
				"this.oscillator": "Tone.Synth#oscillator",
				"this.frequency": "Tone.Synth#frequency",
				"this.detune": "Tone.Synth#detune",
				"this.envelope": "Tone.Synth#envelope"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Synth is composed simply of a Tone.OmniOscillator\n         routed through a Tone.AmplitudeEnvelope. \n         <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">",
		"augments": [
			"Tone.Monophonic"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"optional": true,
				"description": "the options available for the synth \n                         see defaults below",
				"name": "options"
			}
		],
		"examples": [
			"var synth = new Tone.Synth().toMaster();\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "Synth",
		"longname": "Tone.Synth",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator.\n\t\t *  @type {Tone.OmniOscillator}\n\t\t */",
		"meta": {
			"range": [
				931,
				992
			],
			"filename": "Synth.js",
			"lineno": 29,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046140",
				"name": "this.oscillator",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The oscillator.",
		"type": {
			"names": [
				"Tone.OmniOscillator"
			]
		},
		"name": "oscillator",
		"longname": "Tone.Synth#oscillator",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1076,
				1118
			],
			"filename": "Synth.js",
			"lineno": 36,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046152",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this.oscillator.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Synth#frequency",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1195,
				1231
			],
			"filename": "Synth.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046162",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this.oscillator.detune",
				"paramnames": []
			}
		},
		"description": "The detune control.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.Synth#detune",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The amplitude envelope.\n\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t */",
		"meta": {
			"range": [
				1315,
				1375
			],
			"filename": "Synth.js",
			"lineno": 49,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046172",
				"name": "this.envelope",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amplitude envelope.",
		"type": {
			"names": [
				"Tone.AmplitudeEnvelope"
			]
		},
		"name": "envelope",
		"longname": "Tone.Synth#envelope",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @const\n\t *  @static\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1700,
				1870
			],
			"filename": "Synth.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046225",
				"name": "Tone.Synth.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"kind": "constant",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Synth.defaults",
		"memberof": "Tone.Synth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1726,
				1769
			],
			"filename": "Synth.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046232",
				"name": "oscillator",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"triangle\"}"
			}
		},
		"undocumented": true,
		"name": "oscillator",
		"longname": "Tone.Synth.defaults.oscillator",
		"kind": "member",
		"memberof": "Tone.Synth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1746,
				1765
			],
			"filename": "Synth.js",
			"lineno": 67,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046234",
				"name": "type",
				"type": "Literal",
				"value": "triangle"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Synth.defaults.oscillator.type",
		"kind": "member",
		"memberof": "Tone.Synth.defaults.oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1773,
				1867
			],
			"filename": "Synth.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046236",
				"name": "envelope",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}"
			}
		},
		"undocumented": true,
		"name": "envelope",
		"longname": "Tone.Synth.defaults.envelope",
		"kind": "member",
		"memberof": "Tone.Synth.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1791,
				1807
			],
			"filename": "Synth.js",
			"lineno": 70,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046238",
				"name": "attack",
				"type": "Literal",
				"value": 0.005
			}
		},
		"undocumented": true,
		"name": "attack",
		"longname": "Tone.Synth.defaults.envelope.attack",
		"kind": "member",
		"memberof": "Tone.Synth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1812,
				1825
			],
			"filename": "Synth.js",
			"lineno": 71,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046240",
				"name": "decay",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "decay",
		"longname": "Tone.Synth.defaults.envelope.decay",
		"kind": "member",
		"memberof": "Tone.Synth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1830,
				1845
			],
			"filename": "Synth.js",
			"lineno": 72,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046242",
				"name": "sustain",
				"type": "Literal",
				"value": 0.3
			}
		},
		"undocumented": true,
		"name": "sustain",
		"longname": "Tone.Synth.defaults.envelope.sustain",
		"kind": "member",
		"memberof": "Tone.Synth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1850,
				1863
			],
			"filename": "Synth.js",
			"lineno": 73,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046244",
				"name": "release",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "release",
		"longname": "Tone.Synth.defaults.envelope.release",
		"kind": "member",
		"memberof": "Tone.Synth.defaults.envelope",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Synth} this\n\t */",
		"meta": {
			"range": [
				2609,
				2939
			],
			"filename": "Synth.js",
			"lineno": 106,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100046293",
				"name": "Tone.Synth.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.oscillator": "Tone.Synth#oscillator",
				"this.envelope": "Tone.Synth#envelope",
				"this.frequency": "Tone.Synth#frequency",
				"this.detune": "Tone.Synth#detune"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Synth"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Synth#dispose",
		"kind": "function",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"overrides": "Tone.Monophonic#dispose"
	},
	{
		"comment": "/**\n\t *  @class Return the absolute value of an incoming signal. \n\t *  \n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var signal = new Tone.Signal(-1);\n\t * var abs = new Tone.Abs();\n\t * signal.connect(abs);\n\t * //the output of abs is 1. \n\t */",
		"meta": {
			"range": [
				380,
				653
			],
			"filename": "Abs.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046384",
				"name": "Tone.Abs",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._abs": "Tone.Abs#_abs",
				"this.input": "Tone.Abs#input",
				"this.output": "Tone.Abs#output",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Return the absolute value of an incoming signal.",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var signal = new Tone.Signal(-1);\nvar abs = new Tone.Abs();\nsignal.connect(abs);\n//the output of abs is 1. "
		],
		"name": "Abs",
		"longname": "Tone.Abs",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  dispose method\n\t *  @returns {Tone.Abs} this\n\t */",
		"meta": {
			"range": [
				759,
				908
			],
			"filename": "Abs.js",
			"lineno": 38,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046445",
				"name": "Tone.Abs.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._abs": "Tone.Abs#_abs"
			}
		},
		"description": "dispose method",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Abs"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Abs#dispose",
		"kind": "function",
		"memberof": "Tone.Abs",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Add a signal and a number or two signals. When no value is\n\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t *         the it will be added to the input.\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t *                         and second inputs. \n\t *  @example\n\t * var signal = new Tone.Signal(2);\n\t * var add = new Tone.Add(2);\n\t * signal.connect(add);\n\t * //the output of add equals 4\n\t *  @example\n\t * //if constructed with no arguments\n\t * //it will add the first and second inputs\n\t * var add = new Tone.Add();\n\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t * //the output of add equals 7. \n\t */",
		"meta": {
			"range": [
				986,
				1367
			],
			"filename": "Add.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046501",
				"name": "Tone.Add",
				"type": "FunctionExpression",
				"paramnames": [
					"value"
				]
			},
			"vars": {
				"this._sum": "Tone.Add#_sum",
				"this.input[0]": "Tone.Add#input[0]",
				"this.input[1]": "Tone.Add#input[1]",
				"this.output": "Tone.Add#output",
				"this._param": "Tone.Add#_param"
			}
		},
		"kind": "class",
		"classdesc": "Add a signal and a number or two signals. When no value is\n        passed into the constructor, Tone.Add will sum <code>input[0]</code>\n        and <code>input[1]</code>. If a value is passed into the constructor, \n        the it will be added to the input.",
		"augments": [
			"Tone.Signal"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "If no value is provided, Tone.Add will sum the first\n                        and second inputs.",
				"name": "value"
			}
		],
		"examples": [
			"var signal = new Tone.Signal(2);\nvar add = new Tone.Add(2);\nsignal.connect(add);\n//the output of add equals 4\n ",
			"//if constructed with no arguments\n//it will add the first and second inputs\nvar add = new Tone.Add();\nvar sig0 = new Tone.Signal(3).connect(add, 0, 0);\nvar sig1 = new Tone.Signal(4).connect(add, 0, 1);\n//the output of add equals 7. "
		],
		"name": "Add",
		"longname": "Tone.Add",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Add} this\n\t */",
		"meta": {
			"range": [
				1465,
				1610
			],
			"filename": "Add.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046586",
				"name": "Tone.Add.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._sum": "Tone.Add#_sum"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Add"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Add#dispose",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"overrides": "Tone.Signal#dispose"
	},
	{
		"comment": "/**\n\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t *         See Tone.GainToAudio.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t *  var a2g = new Tone.AudioToGain();\n\t */",
		"meta": {
			"range": [
				346,
				570
			],
			"filename": "AudioToGain.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046642",
				"name": "Tone.AudioToGain",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._norm": "Tone.AudioToGain#_norm",
				"this.input": "Tone.AudioToGain#input",
				"this.output": "Tone.AudioToGain#output",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n        See Tone.GainToAudio.",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var a2g = new Tone.AudioToGain();"
		],
		"name": "AudioToGain",
		"longname": "Tone.AudioToGain",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.AudioToGain} this\n\t */",
		"meta": {
			"range": [
				686,
				845
			],
			"filename": "AudioToGain.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046694",
				"name": "Tone.AudioToGain.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._norm": "Tone.AudioToGain#_norm"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AudioToGain"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AudioToGain#dispose",
		"kind": "function",
		"memberof": "Tone.AudioToGain",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t * var eqPowGain = new Tone.EqualPowerGain();\n\t */",
		"meta": {
			"range": [
				294,
				659
			],
			"filename": "EqualPowerGain.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046749",
				"name": "Tone.EqualPowerGain",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._eqPower": "Tone.EqualPowerGain#_eqPower",
				"this.input": "Tone.EqualPowerGain#input",
				"this.output": "Tone.EqualPowerGain#output",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Convert an incoming signal between 0, 1 to an equal power gain scale.",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var eqPowGain = new Tone.EqualPowerGain();"
		],
		"name": "EqualPowerGain",
		"longname": "Tone.EqualPowerGain",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.EqualPowerGain} this\n\t */",
		"meta": {
			"range": [
				781,
				949
			],
			"filename": "EqualPowerGain.js",
			"lineno": 36,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046818",
				"name": "Tone.EqualPowerGain.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._eqPower": "Tone.EqualPowerGain#_eqPower"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.EqualPowerGain"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.EqualPowerGain#dispose",
		"kind": "function",
		"memberof": "Tone.EqualPowerGain",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Evaluate an expression at audio rate. <br><br>\n\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {string} expr the expression to generate\n\t *  @example\n\t * //adds the signals from input[0] and input[1].\n\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t */",
		"meta": {
			"range": [
				721,
				1627
			],
			"filename": "Expr.js",
			"lineno": 20,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046882",
				"name": "Tone.Expr",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"expr": "Tone.Expr~expr",
				"inputCount": "Tone.Expr~inputCount",
				"this._nodes": "Tone.Expr#_nodes",
				"this.input": "Tone.Expr#input",
				"i": "Tone.Expr~i",
				"this.input[undefined]": "Tone.Expr#input[undefined]",
				"tree": "Tone.Expr~tree",
				"result": "Tone.Expr~result",
				"this.output": "Tone.Expr#output"
			}
		},
		"kind": "class",
		"classdesc": "Evaluate an expression at audio rate. <br><br>\n        Parsing code modified from https://code.google.com/p/tapdigit/\n        Copyright 2011 2012 Ariya Hidayat, New BSD License",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"string"
					]
				},
				"description": "the expression to generate",
				"name": "expr"
			}
		],
		"examples": [
			"//adds the signals from input[0] and input[1].\nvar expr = new Tone.Expr(\"$0 + $1\");"
		],
		"name": "Expr",
		"longname": "Tone.Expr",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The inputs. The length is determined by the expression. \n\t\t *  @type {Array}\n\t\t */",
		"meta": {
			"range": [
				1104,
				1138
			],
			"filename": "Expr.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046927",
				"name": "this.input",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The inputs. The length is determined by the expression.",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "input",
		"longname": "Tone.Expr#input",
		"kind": "member",
		"memberof": "Tone.Expr",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The output node is the result of the expression\n\t\t *  @type {Tone}\n\t\t */",
		"meta": {
			"range": [
				1603,
				1623
			],
			"filename": "Expr.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100046992",
				"name": "this.output",
				"type": "Identifier",
				"value": "result",
				"paramnames": []
			}
		},
		"description": "The output node is the result of the expression",
		"type": {
			"names": [
				"Tone"
			]
		},
		"name": "output",
		"longname": "Tone.Expr#output",
		"kind": "member",
		"memberof": "Tone.Expr",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  clean up\n\t */",
		"meta": {
			"range": [
				10225,
				10341
			],
			"filename": "Expr.js",
			"lineno": 452,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048280",
				"name": "Tone.Expr.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "clean up",
		"name": "dispose",
		"longname": "Tone.Expr#dispose",
		"kind": "function",
		"memberof": "Tone.Expr",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t *         See also Tone.AudioToGain. \n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @example\n\t * var g2a = new Tone.GainToAudio();\n\t */",
		"meta": {
			"range": [
				330,
				565
			],
			"filename": "GainToAudio.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048326",
				"name": "Tone.GainToAudio",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._norm": "Tone.GainToAudio#_norm",
				"this.input": "Tone.GainToAudio#input",
				"this.output": "Tone.GainToAudio#output",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n        See also Tone.AudioToGain.",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var g2a = new Tone.GainToAudio();"
		],
		"name": "GainToAudio",
		"longname": "Tone.GainToAudio",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.GainToAudio} this\n\t */",
		"meta": {
			"range": [
				681,
				840
			],
			"filename": "GainToAudio.js",
			"lineno": 33,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048382",
				"name": "Tone.GainToAudio.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._norm": "Tone.GainToAudio#_norm"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GainToAudio"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.GainToAudio#dispose",
		"kind": "function",
		"memberof": "Tone.GainToAudio",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t *          can compare two signals or a signal and a number. \n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t *  @example\n\t * var gt = new Tone.GreaterThan(2);\n\t * var sig = new Tone.Signal(4).connect(gt);\n\t * //output of gt is equal 1. \n\t */",
		"meta": {
			"range": [
				555,
				1055
			],
			"filename": "GreaterThan.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048439",
				"name": "Tone.GreaterThan",
				"type": "FunctionExpression",
				"paramnames": [
					"value"
				]
			},
			"vars": {
				"this._param": "Tone.GreaterThan#_param",
				"this.input[0]": "Tone.GreaterThan#input[0]",
				"this.input[1]": "Tone.GreaterThan#input[1]",
				"this._gtz": "Tone.GreaterThan#_gtz",
				"this.output": "Tone.GreaterThan#output"
			}
		},
		"kind": "class",
		"classdesc": "Output 1 if the signal is greater than the value, otherwise outputs 0.\n         can compare two signals or a signal and a number.",
		"augments": [
			"Tone.Signal"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "the value to compare to the incoming signal",
				"name": "value"
			}
		],
		"examples": [
			"var gt = new Tone.GreaterThan(2);\nvar sig = new Tone.Signal(4).connect(gt);\n//output of gt is equal 1. "
		],
		"name": "GreaterThan",
		"longname": "Tone.GreaterThan",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  dispose method\n\t *  @returns {Tone.GreaterThan} this\n\t */",
		"meta": {
			"range": [
				1173,
				1326
			],
			"filename": "GreaterThan.js",
			"lineno": 48,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048526",
				"name": "Tone.GreaterThan.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._gtz": "Tone.GreaterThan#_gtz"
			}
		},
		"description": "dispose method",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GreaterThan"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.GreaterThan#dispose",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"overrides": "Tone.Signal#dispose"
	},
	{
		"comment": "/**\n\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var gt0 = new Tone.GreaterThanZero();\n\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t * //the output of gt0 is 1. \n\t * sig.value = 0;\n\t * //the output of gt0 is 0. \n\t */",
		"meta": {
			"range": [
				471,
				1024
			],
			"filename": "GreaterThanZero.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048583",
				"name": "Tone.GreaterThanZero",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._thresh": "Tone.GreaterThanZero#_thresh",
				"this.output": "Tone.GreaterThanZero#output",
				"": null,
				"this._scale": "Tone.GreaterThanZero#_scale",
				"this.input": "Tone.GreaterThanZero#input"
			}
		},
		"kind": "class",
		"classdesc": "GreaterThanZero outputs 1 when the input is strictly greater than zero",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var gt0 = new Tone.GreaterThanZero();\nvar sig = new Tone.Signal(0.01).connect(gt0);\n//the output of gt0 is 1. \nsig.value = 0;\n//the output of gt0 is 0. "
		],
		"name": "GreaterThanZero",
		"longname": "Tone.GreaterThanZero",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  dispose method\n\t *  @returns {Tone.GreaterThanZero} this\n\t */",
		"meta": {
			"range": [
				1154,
				1368
			],
			"filename": "GreaterThanZero.js",
			"lineno": 52,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048660",
				"name": "Tone.GreaterThanZero.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._scale": "Tone.GreaterThanZero#_scale",
				"this._thresh": "Tone.GreaterThanZero#_thresh"
			}
		},
		"description": "dispose method",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GreaterThanZero"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.GreaterThanZero#dispose",
		"kind": "function",
		"memberof": "Tone.GreaterThanZero",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t *         values in the NormalRange. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {NormalRange} modulus The modulus to apply.\n\t *  @example\n\t * var mod = new Tone.Modulo(0.2)\n\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t * //mod outputs 0.1\n\t */",
		"meta": {
			"range": [
				506,
				1475
			],
			"filename": "Modulo.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048730",
				"name": "Tone.Modulo",
				"type": "FunctionExpression",
				"paramnames": [
					"modulus"
				]
			},
			"vars": {
				"this._shaper": "Tone.Modulo#_shaper",
				"this._multiply": "Tone.Modulo#_multiply",
				"this._subtract": "Tone.Modulo#_subtract",
				"this.output": "Tone.Modulo#output",
				"this._modSignal": "Tone.Modulo#_modSignal"
			}
		},
		"kind": "class",
		"classdesc": "Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n        values in the NormalRange.",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"description": "The modulus to apply.",
				"name": "modulus"
			}
		],
		"examples": [
			"var mod = new Tone.Modulo(0.2)\nvar sig = new Tone.Signal(0.5).connect(mod);\n//mod outputs 0.1"
		],
		"name": "Modulo",
		"longname": "Tone.Modulo",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The modulus value.\n\t * @memberOf Tone.Modulo#\n\t * @type {NormalRange}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Modulo.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The modulus value.",
		"memberof": "Tone.Modulo",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "value",
		"longname": "Tone.Modulo#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * clean up\n\t *  @returns {Tone.Modulo} this\n\t */",
		"meta": {
			"range": [
				2137,
				2456
			],
			"filename": "Modulo.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100048941",
				"name": "Tone.Modulo.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._shaper": "Tone.Modulo#_shaper",
				"this._multiply": "Tone.Modulo#_multiply",
				"this._subtract": "Tone.Modulo#_subtract",
				"this._modSignal": "Tone.Modulo#_modSignal"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Modulo"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Modulo#dispose",
		"kind": "function",
		"memberof": "Tone.Modulo",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t *          multiplies the incoming signal by that value. \n\t *\n\t *  @constructor\n\t *  @extends {Tone.Signal}\n\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t *                         it will return the product of the first and second inputs\n\t *  @example\n\t * var mult = new Tone.Multiply();\n\t * var sigA = new Tone.Signal(3);\n\t * var sigB = new Tone.Signal(4);\n\t * sigA.connect(mult, 0, 0);\n\t * sigB.connect(mult, 0, 1);\n\t * //output of mult is 12.\n\t *  @example\n\t * var mult = new Tone.Multiply(10);\n\t * var sig = new Tone.Signal(2).connect(mult);\n\t * //the output of mult is 20. \n\t */",
		"meta": {
			"range": [
				819,
				1339
			],
			"filename": "Multiply.js",
			"lineno": 25,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049036",
				"name": "Tone.Multiply",
				"type": "FunctionExpression",
				"paramnames": [
					"value"
				]
			},
			"vars": {
				"this._mult": "Tone.Multiply#_mult",
				"this.input[0]": "Tone.Multiply#input[0]",
				"this.output": "Tone.Multiply#output",
				"this._param": "Tone.Multiply#_param",
				"this.input[1]": "Tone.Multiply#input[1]",
				"this._param.value": "Tone.Multiply#_param.value"
			}
		},
		"kind": "class",
		"classdesc": "Multiply two incoming signals. Or, if a number is given in the constructor, \n         multiplies the incoming signal by that value.",
		"augments": [
			"Tone.Signal"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "Constant value to multiple. If no value is provided,\n                        it will return the product of the first and second inputs",
				"name": "value"
			}
		],
		"examples": [
			"var mult = new Tone.Multiply();\nvar sigA = new Tone.Signal(3);\nvar sigB = new Tone.Signal(4);\nsigA.connect(mult, 0, 0);\nsigB.connect(mult, 0, 1);\n//output of mult is 12.\n ",
			"var mult = new Tone.Multiply(10);\nvar sig = new Tone.Signal(2).connect(mult);\n//the output of mult is 20. "
		],
		"name": "Multiply",
		"longname": "Tone.Multiply",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Multiply} this\n\t */",
		"meta": {
			"range": [
				1445,
				1619
			],
			"filename": "Multiply.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049118",
				"name": "Tone.Multiply.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._mult": "Tone.Multiply#_mult",
				"this._param": "Tone.Multiply#_param"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Multiply"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Multiply#dispose",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"overrides": "Tone.Signal#dispose"
	},
	{
		"comment": "/**\n\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @example\n\t * var neg = new Tone.Negate();\n\t * var sig = new Tone.Signal(-2).connect(neg);\n\t * //output of neg is positive 2. \n\t */",
		"meta": {
			"range": [
				385,
				612
			],
			"filename": "Negate.js",
			"lineno": 15,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049180",
				"name": "Tone.Negate",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._multiply": "Tone.Negate#_multiply",
				"this.input": "Tone.Negate#input",
				"this.output": "Tone.Negate#output"
			}
		},
		"kind": "class",
		"classdesc": "Negate the incoming signal. i.e. an input signal of 10 will output -10",
		"augments": [
			"Tone.SignalBase"
		],
		"examples": [
			"var neg = new Tone.Negate();\nvar sig = new Tone.Signal(-2).connect(neg);\n//output of neg is positive 2. "
		],
		"name": "Negate",
		"longname": "Tone.Negate",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Negate} this\n\t */",
		"meta": {
			"range": [
				718,
				880
			],
			"filename": "Negate.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049225",
				"name": "Tone.Negate.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._multiply": "Tone.Negate#_multiply"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Negate"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Negate#dispose",
		"kind": "function",
		"memberof": "Tone.Negate",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {number} inputMin the min input value\n\t *  @param {number} inputMax the max input value\n\t *  @example\n\t * var norm = new Tone.Normalize(2, 4);\n\t * var sig = new Tone.Signal(3).connect(norm);\n\t * //output of norm is 0.5. \n\t */",
		"meta": {
			"range": [
				492,
				1174
			],
			"filename": "Normalize.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049281",
				"name": "Tone.Normalize",
				"type": "FunctionExpression",
				"paramnames": [
					"inputMin",
					"inputMax"
				]
			},
			"vars": {
				"this._inputMin": "Tone.Normalize#_inputMin",
				"this._inputMax": "Tone.Normalize#_inputMax",
				"this._sub": "Tone.Normalize#_sub",
				"this.input": "Tone.Normalize#input",
				"this._div": "Tone.Normalize#_div",
				"this.output": "Tone.Normalize#output"
			}
		},
		"kind": "class",
		"classdesc": "Normalize takes an input min and max and maps it linearly to NormalRange [0,1]",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "the min input value",
				"name": "inputMin"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "the max input value",
				"name": "inputMax"
			}
		],
		"examples": [
			"var norm = new Tone.Normalize(2, 4);\nvar sig = new Tone.Signal(3).connect(norm);\n//output of norm is 0.5. "
		],
		"name": "Normalize",
		"longname": "Tone.Normalize",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The minimum value the input signal will reach.\n\t * @memberOf Tone.Normalize#\n\t * @type {number}\n\t * @name min\n\t */",
		"meta": {
			"filename": "Normalize.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The minimum value the input signal will reach.",
		"memberof": "Tone.Normalize",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "min",
		"longname": "Tone.Normalize#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The maximum value the input signal will reach.\n\t * @memberOf Tone.Normalize#\n\t * @type {number}\n\t * @name max\n\t */",
		"meta": {
			"filename": "Normalize.js",
			"lineno": 71,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The maximum value the input signal will reach.",
		"memberof": "Tone.Normalize",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "max",
		"longname": "Tone.Normalize#max",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Normalize} this\n\t */",
		"meta": {
			"range": [
				2106,
				2304
			],
			"filename": "Normalize.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049480",
				"name": "Tone.Normalize.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._sub": "Tone.Normalize#_sub",
				"this._div": "Tone.Normalize#_div"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Normalize"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Normalize#dispose",
		"kind": "function",
		"memberof": "Tone.Normalize",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t *         must be AudioRange.\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t *  @example\n\t * var pow = new Tone.Pow(2);\n\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t * //output of pow is 0.25. \n\t */",
		"meta": {
			"range": [
				481,
				803
			],
			"filename": "Pow.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049548",
				"name": "Tone.Pow",
				"type": "FunctionExpression",
				"paramnames": [
					"exp"
				]
			},
			"vars": {
				"this._exp": "Tone.Pow#_exp",
				"this._expScaler": "Tone.Pow#_expScaler",
				"this.input": "Tone.Pow#input",
				"this.output": "Tone.Pow#output"
			}
		},
		"kind": "class",
		"classdesc": "Pow applies an exponent to the incoming signal. The incoming signal\n        must be AudioRange.",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"Positive"
					]
				},
				"description": "The exponent to apply to the incoming signal, must be at least 2.",
				"name": "exp"
			}
		],
		"examples": [
			"var pow = new Tone.Pow(2);\nvar sig = new Tone.Signal(0.5).connect(pow);\n//output of pow is 0.25. "
		],
		"name": "Pow",
		"longname": "Tone.Pow",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The value of the exponent.\n\t * @memberOf Tone.Pow#\n\t * @type {number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Pow.js",
			"lineno": 37,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The value of the exponent.",
		"memberof": "Tone.Pow",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "value",
		"longname": "Tone.Pow#value",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Pow} this\n\t */",
		"meta": {
			"range": [
				1450,
				1611
			],
			"filename": "Pow.js",
			"lineno": 70,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049681",
				"name": "Tone.Pow.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._expScaler": "Tone.Pow#_expScaler"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Pow"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Pow#dispose",
		"kind": "function",
		"memberof": "Tone.Pow",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Performs a linear scaling on an input signal.\n\t *          Scales a NormalRange input to between\n\t *          outputMin and outputMax.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t *  @example\n\t * var scale = new Tone.Scale(50, 100);\n\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t * //the output of scale equals 75\n\t */",
		"meta": {
			"range": [
				632,
				1207
			],
			"filename": "Scale.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049738",
				"name": "Tone.Scale",
				"type": "FunctionExpression",
				"paramnames": [
					"outputMin",
					"outputMax"
				]
			},
			"vars": {
				"this._outputMin": "Tone.Scale#_outputMin",
				"this._outputMax": "Tone.Scale#_outputMax",
				"this._scale": "Tone.Scale#_scale",
				"this.input": "Tone.Scale#input",
				"this._add": "Tone.Scale#_add",
				"this.output": "Tone.Scale#output"
			}
		},
		"kind": "class",
		"classdesc": "Performs a linear scaling on an input signal.\n         Scales a NormalRange input to between\n         outputMin and outputMax.",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output value when the input is 0.",
				"name": "outputMin"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The output value when the input is 1.",
				"name": "outputMax"
			}
		],
		"examples": [
			"var scale = new Tone.Scale(50, 100);\nvar signal = new Tone.Signal(0.5).connect(scale);\n//the output of scale equals 75"
		],
		"name": "Scale",
		"longname": "Tone.Scale",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The minimum output value. This number is output when \n\t * the value input value is 0. \n\t * @memberOf Tone.Scale#\n\t * @type {number}\n\t * @name min\n\t */",
		"meta": {
			"filename": "Scale.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The minimum output value. This number is output when \nthe value input value is 0.",
		"memberof": "Tone.Scale",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "min",
		"longname": "Tone.Scale#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The maximum output value. This number is output when \n\t * the value input value is 1. \n\t * @memberOf Tone.Scale#\n\t * @type {number}\n\t * @name max\n\t */",
		"meta": {
			"filename": "Scale.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The maximum output value. This number is output when \nthe value input value is 1.",
		"memberof": "Tone.Scale",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "max",
		"longname": "Tone.Scale#max",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Scale} this\n\t */",
		"meta": {
			"range": [
				2194,
				2392
			],
			"filename": "Scale.js",
			"lineno": 103,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100049934",
				"name": "Tone.Scale.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._add": "Tone.Scale#_add",
				"this._scale": "Tone.Scale#_scale"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Scale"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Scale#dispose",
		"kind": "function",
		"memberof": "Tone.Scale",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Performs an exponential scaling on an input signal.\n\t *          Scales a NormalRange value [0,1] exponentially\n\t *          to the output range of outputMin to outputMax.\n\t *\n\t *  @constructor\n\t *  @extends {Tone.SignalBase}\n\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t *  @example\n\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t */",
		"meta": {
			"range": [
				685,
				1113
			],
			"filename": "ScaleExp.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050001",
				"name": "Tone.ScaleExp",
				"type": "FunctionExpression",
				"paramnames": [
					"outputMin",
					"outputMax",
					"exponent"
				]
			},
			"vars": {
				"this._scale": "Tone.ScaleExp#_scale",
				"this.output": "Tone.ScaleExp#output",
				"this._exp": "Tone.ScaleExp#_exp",
				"this.input": "Tone.ScaleExp#input"
			}
		},
		"kind": "class",
		"classdesc": "Performs an exponential scaling on an input signal.\n         Scales a NormalRange value [0,1] exponentially\n         to the output range of outputMin to outputMax.",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output value when the input is 0.",
				"name": "outputMin"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The output value when the input is 1.",
				"name": "outputMax"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 2,
				"description": "The exponent which scales the incoming signal.",
				"name": "exponent"
			}
		],
		"examples": [
			"var scaleExp = new Tone.ScaleExp(0, 100, 2);\nvar signal = new Tone.Signal(0.5).connect(scaleExp);"
		],
		"name": "ScaleExp",
		"longname": "Tone.ScaleExp",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Instead of interpolating linearly between the <code>min</code> and \n\t * <code>max</code> values, setting the exponent will interpolate between\n\t * the two values with an exponential curve. \n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name exponent\n\t */",
		"meta": {
			"filename": "ScaleExp.js",
			"lineno": 41,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "Instead of interpolating linearly between the <code>min</code> and \n<code>max</code> values, setting the exponent will interpolate between\nthe two values with an exponential curve.",
		"memberof": "Tone.ScaleExp",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "exponent",
		"longname": "Tone.ScaleExp#exponent",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The minimum output value. This number is output when \n\t * the value input value is 0. \n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name min\n\t */",
		"meta": {
			"filename": "ScaleExp.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The minimum output value. This number is output when \nthe value input value is 0.",
		"memberof": "Tone.ScaleExp",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "min",
		"longname": "Tone.ScaleExp#min",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The maximum output value. This number is output when \n\t * the value input value is 1. \n\t * @memberOf Tone.ScaleExp#\n\t * @type {number}\n\t * @name max\n\t */",
		"meta": {
			"filename": "ScaleExp.js",
			"lineno": 74,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The maximum output value. This number is output when \nthe value input value is 1.",
		"memberof": "Tone.ScaleExp",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "max",
		"longname": "Tone.ScaleExp#max",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.ScaleExp} this\n\t */",
		"meta": {
			"range": [
				2330,
				2531
			],
			"filename": "ScaleExp.js",
			"lineno": 94,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050173",
				"name": "Tone.ScaleExp.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._scale": "Tone.ScaleExp#_scale",
				"this._exp": "Tone.ScaleExp#_exp"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.ScaleExp"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.ScaleExp#dispose",
		"kind": "function",
		"memberof": "Tone.ScaleExp",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t *          has all of the methods available to native Web Audio \n\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t *          as well as additional conveniences. Read more about working with signals \n\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Param}\n\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t *                                     is passed in, that parameter will be wrapped\n\t *                                     and controlled by the Signal. \n\t *  @param {string} [units=Number] unit The units the signal is in. \n\t *  @example\n\t * var signal = new Tone.Signal(10);\n\t */",
		"meta": {
			"range": [
				1070,
				1654
			],
			"filename": "Signal.js",
			"lineno": 22,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050244",
				"name": "Tone.Signal",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Signal~options",
				"gainNode": "Tone.Signal~gainNode",
				"options.param": "Tone.Signal~options.param",
				"this.output": "Tone.Signal#output",
				"this.input": "Tone.Signal#input",
				"this._param": "Tone.Signal#_param"
			}
		},
		"kind": "class",
		"classdesc": "A signal is an audio-rate value. Tone.Signal is a core component of the library.\n         Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n         has all of the methods available to native Web Audio \n         [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n         as well as additional conveniences. Read more about working with signals \n         [here](https://github.com/Tonejs/Tone.js/wiki/Signals).",
		"augments": [
			"Tone.Param"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"AudioParam"
					]
				},
				"optional": true,
				"description": "Initial value of the signal. If an AudioParam\n                                    is passed in, that parameter will be wrapped\n                                    and controlled by the Signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"string"
					]
				},
				"optional": true,
				"defaultvalue": "Number",
				"description": "unit The units the signal is in.",
				"name": "units"
			}
		],
		"examples": [
			"var signal = new Tone.Signal(10);"
		],
		"name": "Signal",
		"longname": "Tone.Signal",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The default values\n\t *  @type  {Object}\n\t *  @static\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1778,
				1871
			],
			"filename": "Signal.js",
			"lineno": 55,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050336",
				"name": "Tone.Signal.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":true}",
				"paramnames": []
			}
		},
		"description": "The default values",
		"type": {
			"names": [
				"Object"
			]
		},
		"scope": "static",
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.Signal.defaults",
		"memberof": "Tone.Signal"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1805,
				1816
			],
			"filename": "Signal.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050343",
				"name": "value",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "value",
		"longname": "Tone.Signal.defaults.value",
		"kind": "member",
		"memberof": "Tone.Signal.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1820,
				1847
			],
			"filename": "Signal.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050345",
				"name": "units",
				"type": "MemberExpression",
				"value": "Tone.Type.Default"
			}
		},
		"undocumented": true,
		"name": "units",
		"longname": "Tone.Signal.defaults.units",
		"kind": "member",
		"memberof": "Tone.Signal.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1851,
				1867
			],
			"filename": "Signal.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050351",
				"name": "convert",
				"type": "Literal",
				"value": true
			}
		},
		"undocumented": true,
		"name": "convert",
		"longname": "Tone.Signal.defaults.convert",
		"kind": "member",
		"memberof": "Tone.Signal.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.Signal#connect",
		"memberof": "Tone.Signal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  dispose and disconnect\n\t *  @returns {Tone.Signal} this\n\t */",
		"meta": {
			"range": [
				2509,
				2613
			],
			"filename": "Signal.js",
			"lineno": 79,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050370",
				"name": "Tone.Signal.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "dispose and disconnect",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Signal"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Signal#dispose",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"overrides": "Tone.Param#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Base class for all Signals. Used Internally. \n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t */",
		"meta": {
			"range": [
				173,
				224
			],
			"filename": "SignalBase.js",
			"lineno": 11,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050411",
				"name": "Tone.SignalBase",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"kind": "class",
		"classdesc": "Base class for all Signals. Used Internally.",
		"augments": [
			"Tone"
		],
		"name": "SignalBase",
		"longname": "Tone.SignalBase",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.SignalBase#connect",
		"kind": "function",
		"memberof": "Tone.SignalBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t *\n\t *  @extends {Tone.Signal}\n\t *  @constructor\n\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t *                         is omitted, it will subtract the second signal from the first.\n\t *  @example\n\t * var sub = new Tone.Subtract(1);\n\t * var sig = new Tone.Signal(4).connect(sub);\n\t * //the output of sub is 3. \n\t *  @example\n\t * var sub = new Tone.Subtract();\n\t * var sigA = new Tone.Signal(10);\n\t * var sigB = new Tone.Signal(2.5);\n\t * sigA.connect(sub, 0, 0);\n\t * sigB.connect(sub, 0, 1);\n\t * //output of sub is 7.5\n\t */",
		"meta": {
			"range": [
				986,
				1581
			],
			"filename": "Subtract.js",
			"lineno": 26,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050557",
				"name": "Tone.Subtract",
				"type": "FunctionExpression",
				"paramnames": [
					"value"
				]
			},
			"vars": {
				"this._sum": "Tone.Subtract#_sum",
				"this.input[0]": "Tone.Subtract#input[0]",
				"this.output": "Tone.Subtract#output",
				"this._neg": "Tone.Subtract#_neg",
				"this._param": "Tone.Subtract#_param",
				"this.input[1]": "Tone.Subtract#input[1]"
			}
		},
		"kind": "class",
		"classdesc": "Subtract the signal connected to <code>input[1]</code> from the signal connected \n        to <code>input[0]</code>. If an argument is provided in the constructor, the \n        signals <code>.value</code> will be subtracted from the incoming signal.",
		"augments": [
			"Tone.Signal"
		],
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "The value to subtract from the incoming signal. If the value\n                        is omitted, it will subtract the second signal from the first.",
				"name": "value"
			}
		],
		"examples": [
			"var sub = new Tone.Subtract(1);\nvar sig = new Tone.Signal(4).connect(sub);\n//the output of sub is 3. \n ",
			"var sub = new Tone.Subtract();\nvar sigA = new Tone.Signal(10);\nvar sigB = new Tone.Signal(2.5);\nsigA.connect(sub, 0, 0);\nsigB.connect(sub, 0, 1);\n//output of sub is 7.5"
		],
		"name": "Subtract",
		"longname": "Tone.Subtract",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				1690,
				1886
			],
			"filename": "Subtract.js",
			"lineno": 62,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050648",
				"name": "Tone.Subtract.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._neg": "Tone.Subtract#_neg",
				"this._sum": "Tone.Subtract#_sum"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Subtract#dispose",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"overrides": "Tone.Signal#dispose"
	},
	{
		"comment": "/**\n\t * @class Tone.TickSignal extends Tone.TimelineSignal, but adds the capability\n\t *        to calculate the number of elapsed ticks. exponential and target curves\n\t *        are approximated with multiple linear ramps. \n\t *        \n\t *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n\t *        describing integrating timing functions for tempo calculations. \n\t *\n\t * @param {Number} value The initial value of the signal\n\t * @extends {Tone.TimelineSignal}\n\t */",
		"meta": {
			"range": [
				654,
				877
			],
			"filename": "TickSignal.js",
			"lineno": 14,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050714",
				"name": "Tone.TickSignal",
				"type": "FunctionExpression",
				"paramnames": [
					"value"
				]
			},
			"vars": {
				"value": "Tone.TickSignal~value",
				"this._events.memory": "Tone.TickSignal#_events.memory"
			}
		},
		"kind": "class",
		"classdesc": "Tone.TickSignal extends Tone.TimelineSignal, but adds the capability\n       to calculate the number of elapsed ticks. exponential and target curves\n       are approximated with multiple linear ramps. \n       \n       Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n       describing integrating timing functions for tempo calculations.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The initial value of the signal",
				"name": "value"
			}
		],
		"augments": [
			"Tone.TimelineSignal"
		],
		"name": "TickSignal",
		"longname": "Tone.TickSignal",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.TickSignal} this \n\t */",
		"meta": {
			"range": [
				1998,
				2584
			],
			"filename": "TickSignal.js",
			"lineno": 59,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050873",
				"name": "Tone.TickSignal.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time",
					"constant"
				]
			},
			"vars": {
				"time": "Tone.TickSignal#setTargetAtTime~time",
				"value": "Tone.TickSignal#setTargetAtTime~value",
				"prevEvent": "Tone.TickSignal#setTargetAtTime~prevEvent",
				"segments": "Tone.TickSignal#setTargetAtTime~segments",
				"i": "Tone.TickSignal#setTargetAtTime~i",
				"segTime": "Tone.TickSignal#setTargetAtTime~segTime",
				"rampVal": "Tone.TickSignal#setTargetAtTime~rampVal"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TickSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.TickSignal#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"overrides": "Tone.TimelineSignal#setTargetAtTime"
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TickSignal} this\n\t */",
		"meta": {
			"range": [
				2832,
				3558
			],
			"filename": "TickSignal.js",
			"lineno": 83,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050971",
				"name": "Tone.TickSignal.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			},
			"vars": {
				"time": "Tone.TickSignal#exponentialRampToValueAtTime~time",
				"value": "Tone.TickSignal#exponentialRampToValueAtTime~value",
				"prevEvent": "Tone.TickSignal#exponentialRampToValueAtTime~prevEvent",
				"segments": "Tone.TickSignal#exponentialRampToValueAtTime~segments",
				"segmentDur": "Tone.TickSignal#exponentialRampToValueAtTime~segmentDur",
				"i": "Tone.TickSignal#exponentialRampToValueAtTime~i",
				"segTime": "Tone.TickSignal#exponentialRampToValueAtTime~segTime",
				"rampVal": "Tone.TickSignal#exponentialRampToValueAtTime~rampVal"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TickSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.TickSignal#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"overrides": "Tone.TimelineSignal#exponentialRampToValueAtTime"
	},
	{
		"comment": "/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  {Time} time The time to get the tick count at\n\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t *                          given any automations. \n\t */",
		"meta": {
			"range": [
				3869,
				4171
			],
			"filename": "TickSignal.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051089",
				"name": "Tone.TickSignal.prototype._getTickUntilEvent",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"time"
				]
			},
			"vars": {
				"event": "Tone.TickSignal#_getTickUntilEvent~event",
				"val0": "Tone.TickSignal#_getTickUntilEvent~val0",
				"val1": "Tone.TickSignal#_getTickUntilEvent~val1"
			}
		},
		"description": "Returns the tick value at the time. Takes into account\nany automation curves scheduled on the signal.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to get the tick count at",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"description": "The number of ticks which have elapsed at the time\n                         given any automations."
			}
		],
		"name": "_getTickUntilEvent",
		"longname": "Tone.TickSignal#_getTickUntilEvent",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Returns the tick value at the time. Takes into account\n\t * any automation curves scheduled on the signal.\n\t * @param  {Time} time The time to get the tick count at\n\t * @return {Ticks}      The number of ticks which have elapsed at the time\n\t *                          given any automations. \n\t */",
		"meta": {
			"range": [
				4482,
				4658
			],
			"filename": "TickSignal.js",
			"lineno": 132,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051149",
				"name": "Tone.TickSignal.prototype.getTickAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.TickSignal#getTickAtTime~time",
				"event": "Tone.TickSignal#getTickAtTime~event"
			}
		},
		"description": "Returns the tick value at the time. Takes into account\nany automation curves scheduled on the signal.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to get the tick count at",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"description": "The number of ticks which have elapsed at the time\n                         given any automations."
			}
		],
		"name": "getTickAtTime",
		"longname": "Tone.TickSignal#getTickAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Return the elapsed time of the number of ticks from the given time\n\t * @param {Ticks} ticks The number of ticks to calculate\n\t * @param  {Time} time The time to get the next tick from\n\t * @return {Seconds} The duration of the number of ticks from the given time in seconds\n\t */",
		"meta": {
			"range": [
				4949,
				5155
			],
			"filename": "TickSignal.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051186",
				"name": "Tone.TickSignal.prototype.getDurationOfTicks",
				"type": "FunctionExpression",
				"paramnames": [
					"ticks",
					"time"
				]
			},
			"vars": {
				"time": "Tone.TickSignal#getDurationOfTicks~time",
				"currentTick": "Tone.TickSignal#getDurationOfTicks~currentTick"
			}
		},
		"description": "Return the elapsed time of the number of ticks from the given time",
		"params": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"description": "The number of ticks to calculate",
				"name": "ticks"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to get the next tick from",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				},
				"description": "The duration of the number of ticks from the given time in seconds"
			}
		],
		"name": "getDurationOfTicks",
		"longname": "Tone.TickSignal#getDurationOfTicks",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Given a tick, returns the time that tick occurs at. \n\t * @param  {Ticks} tick\n\t * @return {Time}      The time that the tick occurs. \n\t */",
		"meta": {
			"range": [
				5307,
				6200
			],
			"filename": "TickSignal.js",
			"lineno": 155,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051225",
				"name": "Tone.TickSignal.prototype.getTimeOfTick",
				"type": "FunctionExpression",
				"paramnames": [
					"tick"
				]
			},
			"vars": {
				"before": "Tone.TickSignal#getTimeOfTick~before",
				"after": "Tone.TickSignal#getTimeOfTick~after",
				"val0": "Tone.TickSignal#getTimeOfTick~val0",
				"val1": "Tone.TickSignal#getTimeOfTick~val1",
				"delta": "Tone.TickSignal#getTimeOfTick~delta",
				"k": "Tone.TickSignal#getTimeOfTick~k",
				"sol1": "Tone.TickSignal#getTimeOfTick~sol1",
				"sol2": "Tone.TickSignal#getTimeOfTick~sol2"
			}
		},
		"description": "Given a tick, returns the time that tick occurs at.",
		"params": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"name": "tick"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that the tick occurs."
			}
		],
		"name": "getTimeOfTick",
		"longname": "Tone.TickSignal#getTimeOfTick",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class A signal which adds the method getValueAtTime. \n\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t *  @extends {Tone.Signal}\n\t *  @param {Number=} value The initial value of the signal\n\t *  @param {String=} units The conversion units of the signal.\n\t */",
		"meta": {
			"range": [
				425,
				960
			],
			"filename": "TimelineSignal.js",
			"lineno": 12,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051435",
				"name": "Tone.TimelineSignal",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.TimelineSignal~options",
				"this._events": "Tone.TimelineSignal#_events",
				"this._initial": "Tone.TimelineSignal#_initial",
				"this.value": "Tone.TimelineSignal#value"
			}
		},
		"kind": "class",
		"classdesc": "A signal which adds the method getValueAtTime. \n        Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline",
		"augments": [
			"Tone.Signal"
		],
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"description": "The initial value of the signal",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "The conversion units of the signal.",
				"name": "units"
			}
		],
		"name": "TimelineSignal",
		"longname": "Tone.TimelineSignal",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1134,
				1151
			],
			"filename": "TimelineSignal.js",
			"lineno": 44,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051520",
				"name": "Linear",
				"type": "Literal",
				"value": "linear"
			}
		},
		"name": "Linear",
		"longname": "Tone.TimelineSignal.Type.Linear",
		"kind": "member",
		"memberof": "Tone.TimelineSignal.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "linear"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1155,
				1182
			],
			"filename": "TimelineSignal.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051522",
				"name": "Exponential",
				"type": "Literal",
				"value": "exponential"
			}
		},
		"name": "Exponential",
		"longname": "Tone.TimelineSignal.Type.Exponential",
		"kind": "member",
		"memberof": "Tone.TimelineSignal.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "exponential"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1186,
				1203
			],
			"filename": "TimelineSignal.js",
			"lineno": 46,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051524",
				"name": "Target",
				"type": "Literal",
				"value": "target"
			}
		},
		"name": "Target",
		"longname": "Tone.TimelineSignal.Type.Target",
		"kind": "member",
		"memberof": "Tone.TimelineSignal.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "target"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1207,
				1218
			],
			"filename": "TimelineSignal.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051526",
				"name": "Set",
				"type": "Literal",
				"value": "set"
			}
		},
		"name": "Set",
		"longname": "Tone.TimelineSignal.Type.Set",
		"kind": "member",
		"memberof": "Tone.TimelineSignal.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "set"
	},
	{
		"comment": "/**\n\t * The current value of the signal. \n\t * @memberOf Tone.TimelineSignal#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "TimelineSignal.js",
			"lineno": 50,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The current value of the signal.",
		"memberof": "Tone.TimelineSignal",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.TimelineSignal#value",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Signal#value"
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.TimelineSignal} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				2251,
				2609
			],
			"filename": "TimelineSignal.js",
			"lineno": 85,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051601",
				"name": "Tone.TimelineSignal.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime"
				]
			},
			"vars": {
				"value": "Tone.TimelineSignal#setValueAtTime~value",
				"startTime": "Tone.TimelineSignal#setValueAtTime~startTime"
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.TimelineSignal#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#setValueAtTime"
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				2861,
				3200
			],
			"filename": "TimelineSignal.js",
			"lineno": 106,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051661",
				"name": "Tone.TimelineSignal.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.TimelineSignal#linearRampToValueAtTime~value",
				"endTime": "Tone.TimelineSignal#linearRampToValueAtTime~endTime"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.TimelineSignal#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#linearRampToValueAtTime"
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				3458,
				4373
			],
			"filename": "TimelineSignal.js",
			"lineno": 126,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051721",
				"name": "Tone.TimelineSignal.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"endTime": "Tone.TimelineSignal#exponentialRampToValueAtTime~endTime",
				"beforeEvent": "Tone.TimelineSignal#exponentialRampToValueAtTime~beforeEvent",
				"value": "Tone.TimelineSignal#exponentialRampToValueAtTime~value",
				"setValue": "Tone.TimelineSignal#exponentialRampToValueAtTime~setValue"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.TimelineSignal#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#exponentialRampToValueAtTime"
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.TimelineSignal} this \n\t */",
		"meta": {
			"range": [
				4653,
				5146
			],
			"filename": "TimelineSignal.js",
			"lineno": 159,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051850",
				"name": "Tone.TimelineSignal.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.TimelineSignal#setTargetAtTime~value",
				"timeConstant": "Tone.TimelineSignal#setTargetAtTime~timeConstant",
				"startTime": "Tone.TimelineSignal#setTargetAtTime~startTime"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.TimelineSignal#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#setTargetAtTime"
	},
	{
		"comment": "/**\n\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t *  @param {Float32Array} values        \n\t *  @param {Time} startTime    \n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.TimelineSignal} this \n\t */",
		"meta": {
			"range": [
				5490,
				5959
			],
			"filename": "TimelineSignal.js",
			"lineno": 182,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051936",
				"name": "Tone.TimelineSignal.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration",
					"scaling"
				]
			},
			"vars": {
				"scaling": "Tone.TimelineSignal#setValueCurveAtTime~scaling",
				"duration": "Tone.TimelineSignal#setValueCurveAtTime~duration",
				"startTime": "Tone.TimelineSignal#setValueCurveAtTime~startTime",
				"segTime": "Tone.TimelineSignal#setValueCurveAtTime~segTime",
				"i": "Tone.TimelineSignal#setValueCurveAtTime~i"
			}
		},
		"description": "Set an array of arbitrary values starting at the given time for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Float32Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "If the values in the curve should be scaled by some value",
				"name": "scaling"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.TimelineSignal#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#setValueCurveAtTime"
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				6148,
				6345
			],
			"filename": "TimelineSignal.js",
			"lineno": 201,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052027",
				"name": "Tone.TimelineSignal.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"after": "Tone.TimelineSignal#cancelScheduledValues~after"
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.TimelineSignal#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#cancelScheduledValues"
	},
	{
		"comment": "/**\n\t *  Sets the computed value at the given time. This provides\n\t *  a point from which a linear or exponential curve\n\t *  can be scheduled after. Will cancel events after \n\t *  the given time and shorten the currently scheduled\n\t *  linear or exponential ramp so that it ends at `time` .\n\t *  This is to avoid discontinuities and clicks in envelopes. \n\t *  @param {Time} time When to set the ramp point\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				6802,
				7707
			],
			"filename": "TimelineSignal.js",
			"lineno": 218,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052065",
				"name": "Tone.TimelineSignal.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.TimelineSignal#setRampPoint~time",
				"val": "Tone.TimelineSignal#setRampPoint~val",
				"before": "Tone.TimelineSignal#setRampPoint~before",
				"after": "Tone.TimelineSignal#setRampPoint~after"
			}
		},
		"description": "Sets the computed value at the given time. This provides\n a point from which a linear or exponential curve\n can be scheduled after. Will cancel events after \n the given time and shorten the currently scheduled\n linear or exponential ramp so that it ends at `time` .\n This is to avoid discontinuities and clicks in envelopes.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When to set the ramp point",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.TimelineSignal#setRampPoint",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#setRampPoint"
	},
	{
		"comment": "/**\n\t *  Do a linear ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				8099,
				8282
			],
			"filename": "TimelineSignal.js",
			"lineno": 253,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052191",
				"name": "Tone.TimelineSignal.prototype.linearRampToValueBetween",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"start",
					"finish"
				]
			}
		},
		"description": "Do a linear ramp to the given value between the start and finish times.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The beginning anchor point to do the linear ramp",
				"name": "start"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
				"name": "finish"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueBetween",
		"longname": "Tone.TimelineSignal#linearRampToValueBetween",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Do a exponential ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				8684,
				8877
			],
			"filename": "TimelineSignal.js",
			"lineno": 267,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052220",
				"name": "Tone.TimelineSignal.prototype.exponentialRampToValueBetween",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"start",
					"finish"
				]
			}
		},
		"description": "Do a exponential ramp to the given value between the start and finish times.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The beginning anchor point to do the exponential ramp",
				"name": "start"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
				"name": "finish"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueBetween",
		"longname": "Tone.TimelineSignal#exponentialRampToValueBetween",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9852,
				10907
			],
			"filename": "TimelineSignal.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052289",
				"name": "Tone.TimelineSignal.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.TimelineSignal#getValueAtTime~time",
				"after": "Tone.TimelineSignal#getValueAtTime~after",
				"before": "Tone.TimelineSignal#getValueAtTime~before",
				"value": "Tone.TimelineSignal#getValueAtTime~value",
				"previous": "Tone.TimelineSignal#getValueAtTime~previous",
				"previouVal": "Tone.TimelineSignal#getValueAtTime~previouVal"
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.TimelineSignal#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.TimelineSignal} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				11409,
				11482
			],
			"filename": "TimelineSignal.js",
			"lineno": 344,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052492",
				"name": "Tone.TimelineSignal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.TimelineSignal#connect",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"ignore": true
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				12593,
				12740
			],
			"filename": "TimelineSignal.js",
			"lineno": 381,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052615",
				"name": "Tone.TimelineSignal.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._events": "Tone.TimelineSignal#_events"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.TimelineSignal#dispose",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"overrides": "Tone.Signal#dispose"
	},
	{
		"comment": "/**\n\t *  @class Wraps the native Web Audio API \n\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t *\n\t *  @extends {Tone.SignalBase}\n\t *  @constructor\n\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t *                                    The mapping function should take two arguments: \n\t *                                    the first is the value at the current position \n\t *                                    and the second is the array position. \n\t *                                    If the argument is an array, that array will be\n\t *                                    set as the wave shaping function. The input\n\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t *                                    signal can take on any numerical values. \n\t *                                    \n\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t *  @example\n\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t * \treturn val * 2;\n\t * }, 2048);\n\t *  @example\n\t * //a waveshaper can also be constructed with an array of values\n\t * var invert = new Tone.WaveShaper([1, -1]);\n\t */",
		"meta": {
			"range": [
				1327,
				1989
			],
			"filename": "WaveShaper.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052668",
				"name": "Tone.WaveShaper",
				"type": "FunctionExpression",
				"paramnames": [
					"mapping",
					"bufferLen"
				]
			},
			"vars": {
				"this._shaper": "Tone.WaveShaper#_shaper",
				"this.input": "Tone.WaveShaper#input",
				"this.output": "Tone.WaveShaper#output",
				"this._curve": "Tone.WaveShaper#_curve",
				"this.curve": "Tone.WaveShaper#curve"
			}
		},
		"kind": "class",
		"classdesc": "Wraps the native Web Audio API \n        [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).",
		"augments": [
			"Tone.SignalBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"function",
						"Array",
						"Number"
					]
				},
				"description": "The function used to define the values. \n                                   The mapping function should take two arguments: \n                                   the first is the value at the current position \n                                   and the second is the array position. \n                                   If the argument is an array, that array will be\n                                   set as the wave shaping function. The input\n                                   signal is an AudioRange [-1, 1] value and the output\n                                   signal can take on any numerical values.",
				"name": "mapping"
			},
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"optional": true,
				"defaultvalue": 1024,
				"description": "The length of the WaveShaperNode buffer.",
				"name": "bufferLen"
			}
		],
		"examples": [
			"var timesTwo = new Tone.WaveShaper(function(val){\n\treturn val * 2;\n}, 2048);\n ",
			"//a waveshaper can also be constructed with an array of values\nvar invert = new Tone.WaveShaper([1, -1]);"
		],
		"name": "WaveShaper",
		"longname": "Tone.WaveShaper",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Uses a mapping function to set the value of the curve. \n\t *  @param {function} mapping The function used to define the values. \n\t *                            The mapping function take two arguments: \n\t *                            the first is the value at the current position \n\t *                            which goes from -1 to 1 over the number of elements\n\t *                            in the curve array. The second argument is the array position. \n\t *  @returns {Tone.WaveShaper} this\n\t *  @example\n\t * //map the input signal from [-1, 1] to [0, 10]\n\t * shaper.setMap(function(val, index){\n\t * \treturn (val + 1) * 5;\n\t * })\n\t */",
		"meta": {
			"range": [
				2691,
				2950
			],
			"filename": "WaveShaper.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052784",
				"name": "Tone.WaveShaper.prototype.setMap",
				"type": "FunctionExpression",
				"paramnames": [
					"mapping"
				]
			},
			"vars": {
				"i": "Tone.WaveShaper#setMap~i",
				"len": "Tone.WaveShaper#setMap~len",
				"normalized": "Tone.WaveShaper#setMap~normalized",
				"this._curve[undefined]": "Tone.WaveShaper#_curve[undefined]",
				"this._shaper.curve": "Tone.WaveShaper#_shaper.curve"
			}
		},
		"description": "Uses a mapping function to set the value of the curve.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The function used to define the values. \n                           The mapping function take two arguments: \n                           the first is the value at the current position \n                           which goes from -1 to 1 over the number of elements\n                           in the curve array. The second argument is the array position.",
				"name": "mapping"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.WaveShaper"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//map the input signal from [-1, 1] to [0, 10]\nshaper.setMap(function(val, index){\n\treturn (val + 1) * 5;\n})"
		],
		"name": "setMap",
		"longname": "Tone.WaveShaper#setMap",
		"kind": "function",
		"memberof": "Tone.WaveShaper",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The array to set as the waveshaper curve. For linear curves\n\t * array length does not make much difference, but for complex curves\n\t * longer arrays will provide smoother interpolation. \n\t * @memberOf Tone.WaveShaper#\n\t * @type {Array}\n\t * @name curve\n\t */",
		"meta": {
			"filename": "WaveShaper.js",
			"lineno": 82,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The array to set as the waveshaper curve. For linear curves\narray length does not make much difference, but for complex curves\nlonger arrays will provide smoother interpolation.",
		"memberof": "Tone.WaveShaper",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "curve",
		"longname": "Tone.WaveShaper#curve",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Specifies what type of oversampling (if any) should be used when \n\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t * @memberOf Tone.WaveShaper#\n\t * @type {string}\n\t * @name oversample\n\t */",
		"meta": {
			"filename": "WaveShaper.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "Specifies what type of oversampling (if any) should be used when \napplying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".",
		"memberof": "Tone.WaveShaper",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "oversample",
		"longname": "Tone.WaveShaper#oversample",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.WaveShaper} this\n\t */",
		"meta": {
			"range": [
				4120,
				4307
			],
			"filename": "WaveShaper.js",
			"lineno": 124,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052943",
				"name": "Tone.WaveShaper.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._shaper": "Tone.WaveShaper#_shaper",
				"this._curve": "Tone.WaveShaper#_curve"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.WaveShaper"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.WaveShaper#dispose",
		"kind": "function",
		"memberof": "Tone.WaveShaper",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t *         it's own class is that many browsers optimize out Tone.Signal\n\t *         with a value of 0 and will not process nodes further down the graph. \n\t *  @extends {Tone.SignalBase}\n\t */",
		"meta": {
			"range": [
				338,
				579
			],
			"filename": "Zero.js",
			"lineno": 9,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100053002",
				"name": "Tone.Zero",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._gain": "Tone.Zero#_gain",
				"this.input": "Tone.Zero#input",
				"this.output": "Tone.Zero#output"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Zero outputs 0's at audio-rate. The reason this has to be\n        it's own class is that many browsers optimize out Tone.Signal\n        with a value of 0 and will not process nodes further down the graph.",
		"augments": [
			"Tone.SignalBase"
		],
		"name": "Zero",
		"longname": "Tone.Zero",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @return  {Tone.Zero}  this\n\t */",
		"meta": {
			"range": [
				682,
				834
			],
			"filename": "Zero.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100053059",
				"name": "Tone.Zero.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._gain": "Tone.Zero#_gain"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Zero"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Zero#dispose",
		"kind": "function",
		"memberof": "Tone.Zero",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.AMOscillator \n\t *\n\t *  @extends {Tone.Oscillator}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */",
		"meta": {
			"range": [
				647,
				2552
			],
			"filename": "AMOscillator.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053118",
				"name": "Tone.AMOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.AMOscillator~options",
				"this._carrier": "Tone.AMOscillator#_carrier",
				"this.frequency": "Tone.AMOscillator#frequency",
				"this.detune": "Tone.AMOscillator#detune",
				"this.detune.value": "Tone.AMOscillator#detune.value",
				"this._modulator": "Tone.AMOscillator#_modulator",
				"this._modulationScale": "Tone.AMOscillator#_modulationScale",
				"this.harmonicity": "Tone.AMOscillator#harmonicity",
				"this.harmonicity.units": "Tone.AMOscillator#harmonicity.units",
				"this._modulationNode": "Tone.AMOscillator#_modulationNode",
				"this.phase": "Tone.AMOscillator#phase"
			}
		},
		"kind": "class",
		"classdesc": "Tone.AMOscillator",
		"augments": [
			"Tone.Oscillator"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The starting frequency of the oscillator.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the carrier oscillator.",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the modulator oscillator.",
				"name": "modulationType"
			}
		],
		"examples": [
			"//a sine oscillator frequency-modulated by a square wave\nvar fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();"
		],
		"name": "AMOscillator",
		"longname": "Tone.AMOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1062,
				1102
			],
			"filename": "AMOscillator.js",
			"lineno": 36,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053164",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._carrier.frequency",
				"paramnames": []
			}
		},
		"description": "The oscillator's frequency",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.AMOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"overrides": "Tone.Oscillator#frequency"
	},
	{
		"comment": "/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1186,
				1220
			],
			"filename": "AMOscillator.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053174",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this._carrier.detune",
				"paramnames": []
			}
		},
		"description": "The detune control signal.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.AMOscillator#detune",
		"kind": "member",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"overrides": "Tone.Oscillator#detune"
	},
	{
		"comment": "/**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch the modulator an octave below carrier\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */",
		"meta": {
			"range": [
				1949,
				2006
			],
			"filename": "AMOscillator.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053218",
				"name": "this.harmonicity",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"//pitch the modulator an octave below carrier\nsynth.harmonicity.value = 0.5;"
		],
		"name": "harmonicity",
		"longname": "Tone.AMOscillator#harmonicity",
		"kind": "member",
		"memberof": "Tone.AMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				2682,
				2818
			],
			"filename": "AMOscillator.js",
			"lineno": 99,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053335",
				"name": "Tone.AMOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.AMOscillator.defaults",
		"memberof": "Tone.AMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2715,
				2732
			],
			"filename": "AMOscillator.js",
			"lineno": 100,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053342",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.AMOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.AMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2736,
				2748
			],
			"filename": "AMOscillator.js",
			"lineno": 101,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053344",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.AMOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.AMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2752,
				2763
			],
			"filename": "AMOscillator.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053346",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.AMOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.AMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2767,
				2794
			],
			"filename": "AMOscillator.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053348",
				"name": "modulationType",
				"type": "Literal",
				"value": "square"
			}
		},
		"undocumented": true,
		"name": "modulationType",
		"longname": "Tone.AMOscillator.defaults.modulationType",
		"kind": "member",
		"memberof": "Tone.AMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2798,
				2815
			],
			"filename": "AMOscillator.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053350",
				"name": "harmonicity",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.AMOscillator.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.AMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.AMOscillator#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "AMOscillator.js",
			"lineno": 129,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the carrier oscillator",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.AMOscillator#type",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Oscillator#type"
	},
	{
		"comment": "/**\n\t * The type of the modulator oscillator\n\t * @memberOf Tone.AMOscillator#\n\t * @type {string}\n\t * @name modulationType\n\t */",
		"meta": {
			"filename": "AMOscillator.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the modulator oscillator",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "modulationType",
		"longname": "Tone.AMOscillator#modulationType",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.AMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "AMOscillator.js",
			"lineno": 159,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "phase",
		"longname": "Tone.AMOscillator#phase",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Oscillator#phase"
	},
	{
		"comment": "/**\n\t * The partials of the carrier waveform. A partial represents \n\t * the amplitude at a harmonic. The first harmonic is the \n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series. \n\t * Setting this value will automatically set the type to \"custom\". \n\t * The value is an empty array when the type is not \"custom\". \n\t * @memberOf Tone.AMOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */",
		"meta": {
			"filename": "AMOscillator.js",
			"lineno": 175,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "partials",
		"examples": [
			"osc.partials = [1, 0.2, 0.01];"
		],
		"longname": "Tone.AMOscillator#partials",
		"scope": "instance",
		"kind": "member",
		"overrides": "Tone.Oscillator#partials"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.AMOscillator} this\n\t */",
		"meta": {
			"range": [
				5015,
				5526
			],
			"filename": "AMOscillator.js",
			"lineno": 201,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053565",
				"name": "Tone.AMOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.frequency": "Tone.AMOscillator#frequency",
				"this.detune": "Tone.AMOscillator#detune",
				"this.harmonicity": "Tone.AMOscillator#harmonicity",
				"this._carrier": "Tone.AMOscillator#_carrier",
				"this._modulator": "Tone.AMOscillator#_modulator",
				"this._modulationNode": "Tone.AMOscillator#_modulationNode",
				"this._modulationScale": "Tone.AMOscillator#_modulationScale"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.AMOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.AMOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"overrides": "Tone.Oscillator#dispose"
	},
	{
		"comment": "/**\n\t *  @class Wrapper around the native BufferSourceNode.\n\t *  @extends {Tone}\n\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t *  @param  {Function}  onload  The callback to invoke when the \n\t *                               buffer is done playing.\n\t */",
		"meta": {
			"range": [
				674,
				2452
			],
			"filename": "BufferSource.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053729",
				"name": "Tone.BufferSource",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.BufferSource~options",
				"this.onended": "Tone.BufferSource#onended",
				"this._startTime": "Tone.BufferSource#_startTime",
				"this._stopTime": "Tone.BufferSource#_stopTime",
				"this._gainNode": "Tone.BufferSource#_gainNode",
				"this.output": "Tone.BufferSource#output",
				"this._source": "Tone.BufferSource#_source",
				"this._buffer": "Tone.BufferSource#_buffer",
				"this.playbackRate": "Tone.BufferSource#playbackRate",
				"this.fadeIn": "Tone.BufferSource#fadeIn",
				"this.fadeOut": "Tone.BufferSource#fadeOut",
				"this._gain": "Tone.BufferSource#_gain",
				"this._onendedTimeout": "Tone.BufferSource#_onendedTimeout",
				"this.loop": "Tone.BufferSource#loop",
				"this.loopStart": "Tone.BufferSource#loopStart",
				"this.loopEnd": "Tone.BufferSource#loopEnd",
				"this.playbackRate.value": "Tone.BufferSource#playbackRate.value"
			}
		},
		"kind": "class",
		"classdesc": "Wrapper around the native BufferSourceNode.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"AudioBuffer",
						"Tone.Buffer"
					]
				},
				"description": "The buffer to play",
				"name": "buffer"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the \n                              buffer is done playing.",
				"name": "onload"
			}
		],
		"name": "BufferSource",
		"longname": "Tone.BufferSource",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke after the \n\t\t *  buffer source is done playing. \n\t\t *  @type  {Function}\n\t\t */",
		"meta": {
			"range": [
				926,
				956
			],
			"filename": "BufferSource.js",
			"lineno": 28,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053756",
				"name": "this.onended",
				"type": "MemberExpression",
				"value": "options.onended",
				"paramnames": []
			}
		},
		"description": "The callback to invoke after the \n buffer source is done playing.",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "onended",
		"longname": "Tone.BufferSource#onended",
		"kind": "member",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The playbackRate of the buffer\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1780,
				1861
			],
			"filename": "BufferSource.js",
			"lineno": 71,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053827",
				"name": "this.playbackRate",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The playbackRate of the buffer",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "playbackRate",
		"longname": "Tone.BufferSource#playbackRate",
		"kind": "member",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The fadeIn time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1946,
				1974
			],
			"filename": "BufferSource.js",
			"lineno": 77,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053846",
				"name": "this.fadeIn",
				"type": "MemberExpression",
				"value": "options.fadeIn",
				"paramnames": []
			}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.BufferSource#fadeIn",
		"kind": "member",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The fadeOut time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2060,
				2090
			],
			"filename": "BufferSource.js",
			"lineno": 83,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053854",
				"name": "this.fadeOut",
				"type": "MemberExpression",
				"value": "options.fadeOut",
				"paramnames": []
			}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.BufferSource#fadeOut",
		"kind": "member",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @const\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				2551,
				2741
			],
			"filename": "BufferSource.js",
			"lineno": 112,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053917",
				"name": "Tone.BufferSource.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.BufferSource.defaults",
		"memberof": "Tone.BufferSource",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2584,
				2605
			],
			"filename": "BufferSource.js",
			"lineno": 113,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053924",
				"name": "onended",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onended",
		"longname": "Tone.BufferSource.defaults.onended",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2609,
				2629
			],
			"filename": "BufferSource.js",
			"lineno": 114,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053928",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.BufferSource.defaults.onload",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2633,
				2647
			],
			"filename": "BufferSource.js",
			"lineno": 115,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053932",
				"name": "loop",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "loop",
		"longname": "Tone.BufferSource.defaults.loop",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2651,
				2666
			],
			"filename": "BufferSource.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053934",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.BufferSource.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2670,
				2683
			],
			"filename": "BufferSource.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053936",
				"name": "loopEnd",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.BufferSource.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2687,
				2699
			],
			"filename": "BufferSource.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053938",
				"name": "fadeIn",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeIn",
		"longname": "Tone.BufferSource.defaults.fadeIn",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2703,
				2716
			],
			"filename": "BufferSource.js",
			"lineno": 119,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053940",
				"name": "fadeOut",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeOut",
		"longname": "Tone.BufferSource.defaults.fadeOut",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2720,
				2738
			],
			"filename": "BufferSource.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100053942",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.BufferSource.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.BufferSource.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.BufferSource#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "BufferSource.js",
			"lineno": 123,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.BufferSource",
		"name": "state",
		"longname": "Tone.BufferSource#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Start the buffer\n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at. \n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length \n\t *                                of the sample (minus any offset)\n\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t *  @return  {Tone.BufferSource}  this\n\t */",
		"meta": {
			"range": [
				3825,
				5964
			],
			"filename": "BufferSource.js",
			"lineno": 153,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054000",
				"name": "Tone.BufferSource.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration",
					"gain",
					"fadeInTime"
				]
			},
			"vars": {
				"time": "Tone.BufferSource#start~time",
				"offset": "Tone.BufferSource#start~offset",
				"gain": "Tone.BufferSource#start~gain",
				"this._gain": "Tone.BufferSource#_gain",
				"fadeInTime": "Tone.BufferSource#start~fadeInTime",
				"this._startTime": "Tone.BufferSource#_startTime",
				"computedDur": "Tone.BufferSource#start~computedDur",
				"loopEnd": "Tone.BufferSource#start~loopEnd",
				"loopStart": "Tone.BufferSource#start~loopStart",
				"loopDuration": "Tone.BufferSource#start~loopDuration",
				"this._source.buffer": "Tone.BufferSource#_source.buffer",
				"this._source.loopEnd": "Tone.BufferSource#_source.loopEnd"
			}
		},
		"description": "Start the buffer",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the player should start.",
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The offset from the beginning of the sample\n                                to start at.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Gain"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The gain to play the buffer back at.",
				"name": "gain"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The optional fadeIn ramp time.",
				"name": "fadeInTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.BufferSource"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.BufferSource#start",
		"kind": "function",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t *  buffer out. \n\t *  @param  {Time=}  time         The time the buffer should stop.\n\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t *  @return  {Tone.BufferSource}  this\n\t */",
		"meta": {
			"range": [
				6239,
				7421
			],
			"filename": "BufferSource.js",
			"lineno": 230,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054349",
				"name": "Tone.BufferSource.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"fadeOutTime"
				]
			},
			"vars": {
				"time": "Tone.BufferSource#stop~time",
				"fadeOutTime": "Tone.BufferSource#stop~fadeOutTime",
				"this._stopTime": "Tone.BufferSource#_stopTime",
				"startFade": "Tone.BufferSource#stop~startFade",
				"this._onendedTimeout": "Tone.BufferSource#_onendedTimeout"
			}
		},
		"description": "Stop the buffer. Optionally add a ramp time to fade the \n buffer out.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The time the buffer should stop.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "How long the gain should fade out for",
				"name": "fadeOutTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.BufferSource"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.BufferSource#stop",
		"kind": "function",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If loop is true, the loop will start at this position. \n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopStart\n\t */",
		"meta": {
			"filename": "BufferSource.js",
			"lineno": 278,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If loop is true, the loop will start at this position.",
		"memberof": "Tone.BufferSource",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopStart",
		"longname": "Tone.BufferSource#loopStart",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * If loop is true, the loop will end at this position.\n\t * @memberOf Tone.BufferSource#\n\t * @type {Time}\n\t * @name loopEnd\n\t */",
		"meta": {
			"filename": "BufferSource.js",
			"lineno": 293,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If loop is true, the loop will end at this position.",
		"memberof": "Tone.BufferSource",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.BufferSource#loopEnd",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The audio buffer belonging to the player. \n\t * @memberOf Tone.BufferSource#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */",
		"meta": {
			"filename": "BufferSource.js",
			"lineno": 308,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The audio buffer belonging to the player.",
		"memberof": "Tone.BufferSource",
		"type": {
			"names": [
				"Tone.Buffer"
			]
		},
		"name": "buffer",
		"longname": "Tone.BufferSource#buffer",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * If the buffer should loop once it's over. \n\t * @memberOf Tone.BufferSource#\n\t * @type {Boolean}\n\t * @name loop\n\t */",
		"meta": {
			"filename": "BufferSource.js",
			"lineno": 323,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If the buffer should loop once it's over.",
		"memberof": "Tone.BufferSource",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loop",
		"longname": "Tone.BufferSource#loop",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.BufferSource}  this\n\t */",
		"meta": {
			"range": [
				9011,
				9395
			],
			"filename": "BufferSource.js",
			"lineno": 342,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054702",
				"name": "Tone.BufferSource.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.onended": "Tone.BufferSource#onended",
				"this._source": "Tone.BufferSource#_source",
				"this._gainNode": "Tone.BufferSource#_gainNode",
				"this._buffer": "Tone.BufferSource#_buffer",
				"this._startTime": "Tone.BufferSource#_startTime",
				"this.playbackRate": "Tone.BufferSource#playbackRate"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.BufferSource"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.BufferSource#dispose",
		"kind": "function",
		"memberof": "Tone.BufferSource",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.FatOscillator \n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */",
		"meta": {
			"range": [
				616,
				1778
			],
			"filename": "FatOscillator.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054813",
				"name": "Tone.FatOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FatOscillator~options",
				"this.frequency": "Tone.FatOscillator#frequency",
				"this.detune": "Tone.FatOscillator#detune",
				"this._oscillators": "Tone.FatOscillator#_oscillators",
				"this._spread": "Tone.FatOscillator#_spread",
				"this._type": "Tone.FatOscillator#_type",
				"this._phase": "Tone.FatOscillator#_phase",
				"this._partials": "Tone.FatOscillator#_partials",
				"this.count": "Tone.FatOscillator#count"
			}
		},
		"kind": "class",
		"classdesc": "Tone.FatOscillator",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The starting frequency of the oscillator.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the carrier oscillator.",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the modulator oscillator.",
				"name": "modulationType"
			}
		],
		"examples": [
			"//a sine oscillator frequency-modulated by a square wave\nvar fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();"
		],
		"name": "FatOscillator",
		"longname": "Tone.FatOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				866,
				938
			],
			"filename": "FatOscillator.js",
			"lineno": 28,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054844",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The oscillator's frequency",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.FatOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.FatOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1022,
				1084
			],
			"filename": "FatOscillator.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054861",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune control signal.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.FatOscillator#detune",
		"kind": "member",
		"memberof": "Tone.FatOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				1905,
				2045
			],
			"filename": "FatOscillator.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054948",
				"name": "Tone.FatOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"sawtooth\"}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.FatOscillator.defaults",
		"memberof": "Tone.FatOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1939,
				1956
			],
			"filename": "FatOscillator.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054955",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.FatOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1960,
				1972
			],
			"filename": "FatOscillator.js",
			"lineno": 88,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054957",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.FatOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1976,
				1987
			],
			"filename": "FatOscillator.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054959",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.FatOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1991,
				2004
			],
			"filename": "FatOscillator.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054961",
				"name": "spread",
				"type": "Literal",
				"value": 20
			}
		},
		"undocumented": true,
		"name": "spread",
		"longname": "Tone.FatOscillator.defaults.spread",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2008,
				2019
			],
			"filename": "FatOscillator.js",
			"lineno": 91,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054963",
				"name": "count",
				"type": "Literal",
				"value": 3
			}
		},
		"undocumented": true,
		"name": "count",
		"longname": "Tone.FatOscillator.defaults.count",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2023,
				2042
			],
			"filename": "FatOscillator.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100054965",
				"name": "type",
				"type": "Literal",
				"value": "sawtooth"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.FatOscillator.defaults.type",
		"kind": "member",
		"memberof": "Tone.FatOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.FatOscillator#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "FatOscillator.js",
			"lineno": 130,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the carrier oscillator",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.FatOscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents.\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Cents}\n\t * @name spread\n\t */",
		"meta": {
			"filename": "FatOscillator.js",
			"lineno": 148,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The detune spread between the oscillators. If \"count\" is\nset to 3 oscillators and the \"spread\" is set to 40,\nthe three oscillators would be detuned like this: [-20, 0, 20]\nfor a total detune spread of 40 cents.",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Cents"
			]
		},
		"name": "spread",
		"longname": "Tone.FatOscillator#spread",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The number of detuned oscillators\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Number}\n\t * @name count\n\t */",
		"meta": {
			"filename": "FatOscillator.js",
			"lineno": 173,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The number of detuned oscillators",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "count",
		"longname": "Tone.FatOscillator#count",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.FatOscillator#\n\t * @type {Number}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "FatOscillator.js",
			"lineno": 218,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "phase",
		"longname": "Tone.FatOscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The partials of the carrier waveform. A partial represents \n\t * the amplitude at a harmonic. The first harmonic is the \n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series. \n\t * Setting this value will automatically set the type to \"custom\". \n\t * The value is an empty array when the type is not \"custom\". \n\t * @memberOf Tone.FatOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */",
		"meta": {
			"filename": "FatOscillator.js",
			"lineno": 236,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "partials",
		"examples": [
			"osc.partials = [1, 0.2, 0.01];"
		],
		"longname": "Tone.FatOscillator#partials",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.FatOscillator} this\n\t */",
		"meta": {
			"range": [
				6218,
				6581
			],
			"filename": "FatOscillator.js",
			"lineno": 266,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055491",
				"name": "Tone.FatOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.frequency": "Tone.FatOscillator#frequency",
				"this.detune": "Tone.FatOscillator#detune",
				"": null,
				"this._oscillators": "Tone.FatOscillator#_oscillators",
				"this._partials": "Tone.FatOscillator#_partials"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FatOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FatOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.FMOscillator \n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t *  @param {String} type The type of the carrier oscillator.\n\t *  @param {String} modulationType The type of the modulator oscillator.\n\t *  @example\n\t * //a sine oscillator frequency-modulated by a square wave\n\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t */",
		"meta": {
			"range": [
				614,
				2969
			],
			"filename": "FMOscillator.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055595",
				"name": "Tone.FMOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.FMOscillator~options",
				"this._carrier": "Tone.FMOscillator#_carrier",
				"this.frequency": "Tone.FMOscillator#frequency",
				"this.detune": "Tone.FMOscillator#detune",
				"this.detune.value": "Tone.FMOscillator#detune.value",
				"this.modulationIndex": "Tone.FMOscillator#modulationIndex",
				"this.modulationIndex.units": "Tone.FMOscillator#modulationIndex.units",
				"this._modulator": "Tone.FMOscillator#_modulator",
				"this.harmonicity": "Tone.FMOscillator#harmonicity",
				"this.harmonicity.units": "Tone.FMOscillator#harmonicity.units",
				"this._modulationNode": "Tone.FMOscillator#_modulationNode",
				"this.phase": "Tone.FMOscillator#phase"
			}
		},
		"kind": "class",
		"classdesc": "Tone.FMOscillator",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The starting frequency of the oscillator.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the carrier oscillator.",
				"name": "type"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the modulator oscillator.",
				"name": "modulationType"
			}
		],
		"examples": [
			"//a sine oscillator frequency-modulated by a square wave\nvar fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();"
		],
		"name": "FMOscillator",
		"longname": "Tone.FMOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The oscillator's frequency\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1029,
				1101
			],
			"filename": "FMOscillator.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055641",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The oscillator's frequency",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.FMOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.FMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1185,
				1219
			],
			"filename": "FMOscillator.js",
			"lineno": 42,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055658",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this._carrier.detune",
				"paramnames": []
			}
		},
		"description": "The detune control signal.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.FMOscillator#detune",
		"kind": "member",
		"memberof": "Tone.FMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t *\t@type {Positive}\n\t\t *\t@signal\n\t\t */",
		"meta": {
			"range": [
				1551,
				1616
			],
			"filename": "FMOscillator.js",
			"lineno": 52,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055678",
				"name": "this.modulationIndex",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n ratio of the frequency of the modulating signal (mf) to the amplitude of the \n modulating signal (ma) -- as in ma/mf.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "modulationIndex",
		"longname": "Tone.FMOscillator#modulationIndex",
		"kind": "member",
		"memberof": "Tone.FMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t *  @example\n\t\t * //pitch the modulator an octave below carrier\n\t\t * synth.harmonicity.value = 0.5;\n\t\t */",
		"meta": {
			"range": [
				2212,
				2269
			],
			"filename": "FMOscillator.js",
			"lineno": 72,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055717",
				"name": "this.harmonicity",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"//pitch the modulator an octave below carrier\nsynth.harmonicity.value = 0.5;"
		],
		"name": "harmonicity",
		"longname": "Tone.FMOscillator#harmonicity",
		"kind": "member",
		"memberof": "Tone.FMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				3095,
				3256
			],
			"filename": "FMOscillator.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055866",
				"name": "Tone.FMOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.FMOscillator.defaults",
		"memberof": "Tone.FMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3128,
				3145
			],
			"filename": "FMOscillator.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055873",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.FMOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3149,
				3161
			],
			"filename": "FMOscillator.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055875",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.FMOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3165,
				3176
			],
			"filename": "FMOscillator.js",
			"lineno": 107,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055877",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.FMOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3180,
				3201
			],
			"filename": "FMOscillator.js",
			"lineno": 108,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055879",
				"name": "modulationIndex",
				"type": "Literal",
				"value": 2
			}
		},
		"undocumented": true,
		"name": "modulationIndex",
		"longname": "Tone.FMOscillator.defaults.modulationIndex",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3205,
				3232
			],
			"filename": "FMOscillator.js",
			"lineno": 109,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055881",
				"name": "modulationType",
				"type": "Literal",
				"value": "square"
			}
		},
		"undocumented": true,
		"name": "modulationType",
		"longname": "Tone.FMOscillator.defaults.modulationType",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3236,
				3253
			],
			"filename": "FMOscillator.js",
			"lineno": 110,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100055883",
				"name": "harmonicity",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "harmonicity",
		"longname": "Tone.FMOscillator.defaults.harmonicity",
		"kind": "member",
		"memberof": "Tone.FMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the carrier oscillator\n\t * @memberOf Tone.FMOscillator#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "FMOscillator.js",
			"lineno": 135,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the carrier oscillator",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.FMOscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The type of the modulator oscillator\n\t * @memberOf Tone.FMOscillator#\n\t * @type {String}\n\t * @name modulationType\n\t */",
		"meta": {
			"filename": "FMOscillator.js",
			"lineno": 150,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the modulator oscillator",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "modulationType",
		"longname": "Tone.FMOscillator#modulationType",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.FMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "FMOscillator.js",
			"lineno": 165,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "phase",
		"longname": "Tone.FMOscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The partials of the carrier waveform. A partial represents \n\t * the amplitude at a harmonic. The first harmonic is the \n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series. \n\t * Setting this value will automatically set the type to \"custom\". \n\t * The value is an empty array when the type is not \"custom\". \n\t * @memberOf Tone.FMOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */",
		"meta": {
			"filename": "FMOscillator.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The partials of the carrier waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "partials",
		"examples": [
			"osc.partials = [1, 0.2, 0.01];"
		],
		"longname": "Tone.FMOscillator#partials",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.FMOscillator} this\n\t */",
		"meta": {
			"range": [
				5453,
				6009
			],
			"filename": "FMOscillator.js",
			"lineno": 207,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056098",
				"name": "Tone.FMOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.frequency": "Tone.FMOscillator#frequency",
				"this.detune": "Tone.FMOscillator#detune",
				"this.harmonicity": "Tone.FMOscillator#harmonicity",
				"this._carrier": "Tone.FMOscillator#_carrier",
				"this._modulator": "Tone.FMOscillator#_modulator",
				"this._modulationNode": "Tone.FMOscillator#_modulationNode",
				"this.modulationIndex": "Tone.FMOscillator#modulationIndex"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.FMOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.FMOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t *        amount of crossfading transition time between successive grains.\n\t * @extends {Tone}\n\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t */",
		"meta": {
			"range": [
				698,
				2157
			],
			"filename": "GrainPlayer.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056234",
				"name": "Tone.GrainPlayer",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.GrainPlayer~options",
				"this.buffer": "Tone.GrainPlayer#buffer",
				"this._clock": "Tone.GrainPlayer#_clock",
				"this._loopStart": "Tone.GrainPlayer#_loopStart",
				"this._loopEnd": "Tone.GrainPlayer#_loopEnd",
				"this._activeSources": "Tone.GrainPlayer#_activeSources",
				"this._playbackRate": "Tone.GrainPlayer#_playbackRate",
				"this._grainSize": "Tone.GrainPlayer#_grainSize",
				"this._overlap": "Tone.GrainPlayer#_overlap",
				"this.detune": "Tone.GrainPlayer#detune",
				"this.overlap": "Tone.GrainPlayer#overlap",
				"this.loop": "Tone.GrainPlayer#loop",
				"this.playbackRate": "Tone.GrainPlayer#playbackRate",
				"this.grainSize": "Tone.GrainPlayer#grainSize",
				"this.loopStart": "Tone.GrainPlayer#loopStart",
				"this.loopEnd": "Tone.GrainPlayer#loopEnd",
				"this.reverse": "Tone.GrainPlayer#reverse"
			}
		},
		"kind": "class",
		"classdesc": "Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n       Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n       amount of time each small chunk of audio is played for and the overlap is the \n       amount of crossfading transition time between successive grains.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Tone.Buffer"
					]
				},
				"description": "The url to load, or the Tone.Buffer to play.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke after the url is loaded.",
				"name": "callback"
			}
		],
		"name": "GrainPlayer",
		"longname": "Tone.GrainPlayer",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The audio buffer belonging to the player.\n\t\t *  @type  {Tone.Buffer}\n\t\t */",
		"meta": {
			"range": [
				934,
				992
			],
			"filename": "GrainPlayer.js",
			"lineno": 22,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056264",
				"name": "this.buffer",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The audio buffer belonging to the player.",
		"type": {
			"names": [
				"Tone.Buffer"
			]
		},
		"name": "buffer",
		"longname": "Tone.GrainPlayer#buffer",
		"kind": "member",
		"memberof": "Tone.GrainPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t *  @type  {Cents}\n\t\t */",
		"meta": {
			"range": [
				1812,
				1840
			],
			"filename": "GrainPlayer.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056340",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "options.detune",
				"paramnames": []
			}
		},
		"description": "Adjust the pitch independently of the playbackRate.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"name": "detune",
		"longname": "Tone.GrainPlayer#detune",
		"kind": "member",
		"memberof": "Tone.GrainPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2290,
				2498
			],
			"filename": "GrainPlayer.js",
			"lineno": 95,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056430",
				"name": "Tone.GrainPlayer.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.GrainPlayer.defaults",
		"memberof": "Tone.GrainPlayer"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2322,
				2342
			],
			"filename": "GrainPlayer.js",
			"lineno": 96,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056437",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.GrainPlayer.defaults.onload",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2346,
				2361
			],
			"filename": "GrainPlayer.js",
			"lineno": 97,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056441",
				"name": "overlap",
				"type": "Literal",
				"value": 0.1
			}
		},
		"undocumented": true,
		"name": "overlap",
		"longname": "Tone.GrainPlayer.defaults.overlap",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2365,
				2382
			],
			"filename": "GrainPlayer.js",
			"lineno": 98,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056443",
				"name": "grainSize",
				"type": "Literal",
				"value": 0.2
			}
		},
		"undocumented": true,
		"name": "grainSize",
		"longname": "Tone.GrainPlayer.defaults.grainSize",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2386,
				2404
			],
			"filename": "GrainPlayer.js",
			"lineno": 99,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056445",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.GrainPlayer.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2408,
				2420
			],
			"filename": "GrainPlayer.js",
			"lineno": 100,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056447",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.GrainPlayer.defaults.detune",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2424,
				2438
			],
			"filename": "GrainPlayer.js",
			"lineno": 101,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056449",
				"name": "loop",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "loop",
		"longname": "Tone.GrainPlayer.defaults.loop",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2442,
				2457
			],
			"filename": "GrainPlayer.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056451",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.GrainPlayer.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2461,
				2474
			],
			"filename": "GrainPlayer.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056453",
				"name": "loopEnd",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.GrainPlayer.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2478,
				2495
			],
			"filename": "GrainPlayer.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056455",
				"name": "reverse",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "reverse",
		"longname": "Tone.GrainPlayer.defaults.reverse",
		"kind": "member",
		"memberof": "Tone.GrainPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration. \n\t *  \n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at. \n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length \n\t *                                of the sample (minus any offset)\n\t *  @returns {Tone.GrainPlayer} this\n\t *  @memberOf Tone.GrainPlayer#\n\t *  @method start\n\t *  @name start\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 107,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Play the buffer at the given startTime. Optionally add an offset\n and/or duration which will play the buffer from a position\n within the buffer for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the player should start.",
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The offset from the beginning of the sample\n                                to start at.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GrainPlayer"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone.GrainPlayer",
		"kind": "function",
		"name": "start",
		"longname": "Tone.GrainPlayer#start",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Jump to a specific time and play it.\n\t *  @param  {Time}  offset  The offset to jump to.\n\t *  @param {Time=} time When to make the jump.\n\t *  @return  {Tone.GrainPlayer}  this\n\t */",
		"meta": {
			"range": [
				5155,
				5307
			],
			"filename": "GrainPlayer.js",
			"lineno": 205,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056719",
				"name": "Tone.GrainPlayer.prototype.seek",
				"type": "FunctionExpression",
				"paramnames": [
					"offset",
					"time"
				]
			},
			"vars": {
				"this._offset": "Tone.GrainPlayer#_offset"
			}
		},
		"description": "Jump to a specific time and play it.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The offset to jump to.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to make the jump.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GrainPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "seek",
		"longname": "Tone.GrainPlayer#seek",
		"kind": "function",
		"memberof": "Tone.GrainPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The playback rate of the sample\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Positive}\n\t * @name playbackRate\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 211,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The playback rate of the sample",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.GrainPlayer#playbackRate",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The loop start time. \n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name loopStart\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 227,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The loop start time.",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopStart",
		"longname": "Tone.GrainPlayer#loopStart",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The loop end time. \n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name loopEnd\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 242,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The loop end time.",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.GrainPlayer#loopEnd",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The direction the buffer should play in\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {boolean}\n\t * @name reverse\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 257,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The direction the buffer should play in",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "reverse",
		"longname": "Tone.GrainPlayer#reverse",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The size of each chunk of audio that the \n\t * buffer is chopped into and played back at.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name grainSize\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 272,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The size of each chunk of audio that the \nbuffer is chopped into and played back at.",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "grainSize",
		"longname": "Tone.GrainPlayer#grainSize",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * This is the duration of the cross-fade between \n\t * sucessive grains.\n\t * @memberOf Tone.GrainPlayer#\n\t * @type {Time}\n\t * @name overlap\n\t */",
		"meta": {
			"filename": "GrainPlayer.js",
			"lineno": 289,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "This is the duration of the cross-fade between \nsucessive grains.",
		"memberof": "Tone.GrainPlayer",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "overlap",
		"longname": "Tone.GrainPlayer#overlap",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Clean up\n\t * @return {Tone.GrainPlayer} this\n\t */",
		"meta": {
			"range": [
				7398,
				7707
			],
			"filename": "GrainPlayer.js",
			"lineno": 309,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100056972",
				"name": "Tone.GrainPlayer.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.buffer": "Tone.GrainPlayer#buffer",
				"this._clock": "Tone.GrainPlayer#_clock",
				"": null,
				"this._activeSources": "Tone.GrainPlayer#_activeSources"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.GrainPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.GrainPlayer#dispose",
		"kind": "function",
		"memberof": "Tone.GrainPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t *         or any time you need to play a bunch of audio buffers. \n\t *\n\t *  @deprecated Use [Tone.Players](Players) instead.\n\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t *                                                to the MultiPlayer\n\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t *  @extends {Tone}\n\t *  @example\n\t * var multiPlayer = new MultiPlayer({\n\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t * }, function(){\n\t * \tmultiPlayer.start(\"kick\");\n\t * });\n\t *  @example\n\t * //can also store the values in an array\n\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t * function(){\n\t * \t//if an array is passed in, the samples are referenced to by index\n\t * \tmultiPlayer.start(1);\n\t * });\n\t */",
		"meta": {
			"range": [
				1076,
				2160
			],
			"filename": "MultiPlayer.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057062",
				"name": "Tone.MultiPlayer",
				"type": "FunctionExpression",
				"paramnames": [
					"urls"
				]
			},
			"vars": {
				"urls": "Tone.MultiPlayer~urls",
				"options": "Tone.MultiPlayer~options",
				"this.buffers": "Tone.MultiPlayer#buffers",
				"this._activeSources": "Tone.MultiPlayer#_activeSources",
				"this.fadeIn": "Tone.MultiPlayer#fadeIn",
				"this.fadeOut": "Tone.MultiPlayer#fadeOut"
			}
		},
		"kind": "class",
		"classdesc": "Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n        or any time you need to play a bunch of audio buffers.",
		"deprecated": "Use [Tone.Players](Players) instead.",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"Array",
						"Tone.Buffers"
					]
				},
				"description": "The buffers which are available\n                                               to the MultiPlayer",
				"name": "buffers"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when all of the buffers are loaded.",
				"name": "onload"
			}
		],
		"augments": [
			"Tone"
		],
		"examples": [
			"var multiPlayer = new MultiPlayer({\n\t\"kick\" : \"path/to/kick.mp3\",\n\t\"snare\" : \"path/to/snare.mp3\",\n}, function(){\n\tmultiPlayer.start(\"kick\");\n});\n ",
			"//can also store the values in an array\nvar multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \nfunction(){\n\t//if an array is passed in, the samples are referenced to by index\n\tmultiPlayer.start(1);\n});"
		],
		"name": "MultiPlayer",
		"longname": "Tone.MultiPlayer",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t\t *  All the buffers belonging to the player.\n\t\t\t *  @type  {Tone.Buffers}\n\t\t\t */",
		"meta": {
			"range": [
				1617,
				1644
			],
			"filename": "MultiPlayer.js",
			"lineno": 45,
			"columnno": 3,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057139",
				"name": "this.buffers",
				"type": "MemberExpression",
				"value": "options.urls",
				"paramnames": []
			}
		},
		"description": "All the buffers belonging to the player.",
		"type": {
			"names": [
				"Tone.Buffers"
			]
		},
		"name": "buffers",
		"longname": "Tone.MultiPlayer#buffers",
		"kind": "member",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The fade in envelope which is applied\n\t\t *  to the beginning of the BufferSource\n\t\t *  @type  {Time}\n\t\t */",
		"meta": {
			"range": [
				1979,
				2007
			],
			"filename": "MultiPlayer.js",
			"lineno": 62,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057169",
				"name": "this.fadeIn",
				"type": "MemberExpression",
				"value": "options.fadeIn",
				"paramnames": []
			}
		},
		"description": "The fade in envelope which is applied\n to the beginning of the BufferSource",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.MultiPlayer#fadeIn",
		"kind": "member",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The fade out envelope which is applied\n\t\t *  to the end of the BufferSource\n\t\t *  @type  {Time}\n\t\t */",
		"meta": {
			"range": [
				2126,
				2156
			],
			"filename": "MultiPlayer.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057177",
				"name": "this.fadeOut",
				"type": "MemberExpression",
				"value": "options.fadeOut",
				"paramnames": []
			}
		},
		"description": "The fade out envelope which is applied\n to the end of the BufferSource",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.MultiPlayer#fadeOut",
		"kind": "member",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The defaults\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				2259,
				2347
			],
			"filename": "MultiPlayer.js",
			"lineno": 78,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057196",
				"name": "Tone.MultiPlayer.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "The defaults",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.MultiPlayer.defaults",
		"kind": "member",
		"memberof": "Tone.MultiPlayer",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2291,
				2311
			],
			"filename": "MultiPlayer.js",
			"lineno": 79,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057203",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.MultiPlayer.defaults.onload",
		"kind": "member",
		"memberof": "Tone.MultiPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2315,
				2327
			],
			"filename": "MultiPlayer.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057207",
				"name": "fadeIn",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeIn",
		"longname": "Tone.MultiPlayer.defaults.fadeIn",
		"kind": "member",
		"memberof": "Tone.MultiPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2331,
				2344
			],
			"filename": "MultiPlayer.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057209",
				"name": "fadeOut",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeOut",
		"longname": "Tone.MultiPlayer.defaults.fadeOut",
		"kind": "member",
		"memberof": "Tone.MultiPlayer.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Start a buffer by name. The `start` method allows a number of options\n\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t *  @param  {Time}  time      When to start the buffer.\n\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t *  @return  {Tone.MultiPlayer}  this\n\t */",
		"meta": {
			"range": [
				3782,
				4237
			],
			"filename": "MultiPlayer.js",
			"lineno": 119,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057320",
				"name": "Tone.MultiPlayer.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"bufferName",
					"time",
					"offset",
					"duration",
					"pitch",
					"gain"
				]
			},
			"vars": {
				"time": "Tone.MultiPlayer#start~time",
				"source": "Tone.MultiPlayer#start~source",
				"pitch": "Tone.MultiPlayer#start~pitch",
				"source.playbackRate.value": "Tone.MultiPlayer#start~source.playbackRate.value"
			}
		},
		"description": "Start a buffer by name. The `start` method allows a number of options\n to be passed in such as offset, interval, and gain. This is good for multi-sampled \n instruments and sound sprites where samples are repitched played back at different velocities.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the buffer to start.",
				"name": "bufferName"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When to start the buffer.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The offset into the buffer to play from.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "How long to play the buffer for.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Interval"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The interval to repitch the buffer.",
				"name": "pitch"
			},
			{
				"type": {
					"names": [
						"Gain"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The gain to play the sample at.",
				"name": "gain"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultiPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.MultiPlayer#start",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t *  @param  {Time}  time      When to start the buffer.\n\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t *  @param  {Time=}  loopStart   The start of the loop.\n\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t *  @return  {Tone.MultiPlayer}  this\n\t */",
		"meta": {
			"range": [
				4898,
				5438
			],
			"filename": "MultiPlayer.js",
			"lineno": 143,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057411",
				"name": "Tone.MultiPlayer.prototype.startLoop",
				"type": "FunctionExpression",
				"paramnames": [
					"bufferName",
					"time",
					"offset",
					"loopStart",
					"loopEnd",
					"pitch",
					"gain"
				]
			},
			"vars": {
				"time": "Tone.MultiPlayer#startLoop~time",
				"source": "Tone.MultiPlayer#startLoop~source",
				"source.loop": "Tone.MultiPlayer#startLoop~source.loop",
				"source.loopStart": "Tone.MultiPlayer#startLoop~source.loopStart",
				"source.loopEnd": "Tone.MultiPlayer#startLoop~source.loopEnd",
				"pitch": "Tone.MultiPlayer#startLoop~pitch",
				"source.playbackRate.value": "Tone.MultiPlayer#startLoop~source.playbackRate.value"
			}
		},
		"description": "Start a looping buffer by name. Similar to `start`, but the buffer\n is looped instead of played straight through. Can still be stopped with `stop`.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the buffer to start.",
				"name": "bufferName"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When to start the buffer.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The offset into the buffer to play from.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The start of the loop.",
				"name": "loopStart"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The end of the loop.",
				"name": "loopEnd"
			},
			{
				"type": {
					"names": [
						"Interval"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The interval to repitch the buffer.",
				"name": "pitch"
			},
			{
				"type": {
					"names": [
						"Gain"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The gain to play the sample at.",
				"name": "gain"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultiPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "startLoop",
		"longname": "Tone.MultiPlayer#startLoop",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the first played instance of the buffer name.\n\t *  @param  {String}  bufferName  The buffer to stop.\n\t *  @param  {Time=}  time    When to stop the buffer\n\t *  @return  {Tone.MultiPlayer}  this\n\t */",
		"meta": {
			"range": [
				5656,
				6042
			],
			"filename": "MultiPlayer.js",
			"lineno": 161,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057521",
				"name": "Tone.MultiPlayer.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"bufferName",
					"time"
				]
			},
			"vars": {
				"time": "Tone.MultiPlayer#stop~time"
			}
		},
		"description": "Stop the first played instance of the buffer name.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The buffer to stop.",
				"name": "bufferName"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to stop the buffer",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultiPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.MultiPlayer#stop",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop all currently playing buffers at the given time.\n\t *  @param  {Time=}  time  When to stop the buffers.\n\t *  @return  {Tone.MultiPlayer}  this\n\t */",
		"meta": {
			"range": [
				6208,
				6487
			],
			"filename": "MultiPlayer.js",
			"lineno": 176,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057580",
				"name": "Tone.MultiPlayer.prototype.stopAll",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.MultiPlayer#stopAll~time",
				"bufferName": "Tone.MultiPlayer#stopAll~bufferName",
				"sources": "Tone.MultiPlayer#stopAll~sources",
				"i": "Tone.MultiPlayer#stopAll~i"
			}
		},
		"description": "Stop all currently playing buffers at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "When to stop the buffers.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultiPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "stopAll",
		"longname": "Tone.MultiPlayer#stopAll",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add another buffer to the available buffers.\n\t *  @param {String} name The name to that the buffer is refered\n\t *                       to in start/stop methods. \n\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t *                                  or the buffer.\n\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t */",
		"meta": {
			"range": [
				6871,
				6993
			],
			"filename": "MultiPlayer.js",
			"lineno": 195,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057639",
				"name": "Tone.MultiPlayer.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"name",
					"url",
					"callback"
				]
			}
		},
		"description": "Add another buffer to the available buffers.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name to that the buffer is refered\n                      to in start/stop methods.",
				"name": "name"
			},
			{
				"type": {
					"names": [
						"String",
						"Tone.Buffer"
					]
				},
				"description": "The url of the buffer to load\n                                 or the buffer.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The function to invoke after the buffer is loaded.",
				"name": "callback"
			}
		],
		"name": "add",
		"longname": "Tone.MultiPlayer#add",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source. \"started\"\n\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.MultiPlayer#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "MultiPlayer.js",
			"lineno": 200,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source. \"started\"\n if there are any buffers playing. \"stopped\" otherwise.",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.MultiPlayer",
		"name": "state",
		"longname": "Tone.MultiPlayer#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.MultiPlayer#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "MultiPlayer.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.MultiPlayer",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.MultiPlayer#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.MultiPlayer}  this\n\t */",
		"meta": {
			"range": [
				7790,
				8120
			],
			"filename": "MultiPlayer.js",
			"lineno": 236,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057732",
				"name": "Tone.MultiPlayer.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"bufferName": "Tone.MultiPlayer#dispose~bufferName",
				"": null,
				"this.buffers": "Tone.MultiPlayer#buffers",
				"this._activeSources": "Tone.MultiPlayer#_activeSources"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.MultiPlayer"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.MultiPlayer#dispose",
		"kind": "function",
		"memberof": "Tone.MultiPlayer",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {string} type the noise type (white|pink|brown)\n\t *  @example\n\t * //initialize the noise and start\n\t * var noise = new Tone.Noise(\"pink\").start();\n\t * \n\t * //make an autofilter to shape the noise\n\t * var autoFilter = new Tone.AutoFilter({\n\t * \t\"frequency\" : \"8m\", \n\t * \t\"min\" : 800, \n\t * \t\"max\" : 15000\n\t * }).connect(Tone.Master);\n\t * \n\t * //connect the noise\n\t * noise.connect(autoFilter);\n\t * //start the autofilter LFO\n\t * autoFilter.start()\n\t */",
		"meta": {
			"range": [
				938,
				1429
			],
			"filename": "Noise.js",
			"lineno": 30,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057820",
				"name": "Tone.Noise",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Noise~options",
				"this._source": "Tone.Noise#_source",
				"this._type": "Tone.Noise#_type",
				"this._playbackRate": "Tone.Noise#_playbackRate"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n         Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n         colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"string"
					]
				},
				"description": "the noise type (white|pink|brown)",
				"name": "type"
			}
		],
		"examples": [
			"//initialize the noise and start\nvar noise = new Tone.Noise(\"pink\").start();\n\n//make an autofilter to shape the noise\nvar autoFilter = new Tone.AutoFilter({\n\t\"frequency\" : \"8m\", \n\t\"min\" : 800, \n\t\"max\" : 15000\n}).connect(Tone.Master);\n\n//connect the noise\nnoise.connect(autoFilter);\n//start the autofilter LFO\nautoFilter.start()"
		],
		"name": "Noise",
		"longname": "Tone.Noise",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1384,
				1425
			],
			"filename": "Noise.js",
			"lineno": 54,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057863",
				"name": "this._playbackRate",
				"type": "MemberExpression",
				"value": "options.playbackRate",
				"paramnames": []
			}
		},
		"description": "The playback rate of the noise. Affects\n the \"frequency\" of the noise.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "_playbackRate",
		"longname": "Tone.Noise#_playbackRate",
		"kind": "member",
		"memberof": "Tone.Noise",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1560,
				1627
			],
			"filename": "Noise.js",
			"lineno": 66,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057882",
				"name": "Tone.Noise.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":1}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Noise.defaults",
		"memberof": "Tone.Noise"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1586,
				1602
			],
			"filename": "Noise.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057889",
				"name": "type",
				"type": "Literal",
				"value": "white"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Noise.defaults.type",
		"kind": "member",
		"memberof": "Tone.Noise.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1606,
				1624
			],
			"filename": "Noise.js",
			"lineno": 68,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100057891",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.Noise.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.Noise.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t * @memberOf Tone.Noise#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * noise.type = \"white\";\n\t */",
		"meta": {
			"filename": "Noise.js",
			"lineno": 71,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the noise. Can be \"white\", \"brown\", or \"pink\".",
		"memberof": "Tone.Noise",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"examples": [
			"noise.type = \"white\";"
		],
		"longname": "Tone.Noise#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @returns {Tone.Noise} this\n\t */",
		"meta": {
			"range": [
				3354,
				3569
			],
			"filename": "Noise.js",
			"lineno": 149,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058129",
				"name": "Tone.Noise.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._source": "Tone.Noise#_source",
				"this._buffer": "Tone.Noise#_buffer"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Noise"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Noise#dispose",
		"kind": "function",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t *         to a FatOscillator of type \"sawtooth\". \n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t *  @param {String} type The type of the oscillator.\n\t *  @example\n\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t */",
		"meta": {
			"range": [
				1174,
				1989
			],
			"filename": "OmniOscillator.js",
			"lineno": 24,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058581",
				"name": "Tone.OmniOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.OmniOscillator~options",
				"this.frequency": "Tone.OmniOscillator#frequency",
				"this.detune": "Tone.OmniOscillator#detune",
				"this._sourceType": "Tone.OmniOscillator#_sourceType",
				"this._oscillator": "Tone.OmniOscillator#_oscillator",
				"this.type": "Tone.OmniOscillator#type"
			}
		},
		"kind": "class",
		"classdesc": "Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n        Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n        into one class. The oscillator class can be changed by setting the `type`. \n        `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n        any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n        will use the FMOscillator, AMOscillator or FatOscillator respectively. \n        For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n        to a FatOscillator of type \"sawtooth\".",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The initial frequency of the oscillator.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The type of the oscillator.",
				"name": "type"
			}
		],
		"examples": [
			"var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");"
		],
		"name": "OmniOscillator",
		"longname": "Tone.OmniOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1412,
				1484
			],
			"filename": "OmniOscillator.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058611",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.OmniOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1560,
				1622
			],
			"filename": "OmniOscillator.js",
			"lineno": 41,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058628",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune control",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.OmniOscillator#detune",
		"kind": "member",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				2117,
				2223
			],
			"filename": "OmniOscillator.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058690",
				"name": "Tone.OmniOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.OmniOscillator.defaults",
		"memberof": "Tone.OmniOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2152,
				2169
			],
			"filename": "OmniOscillator.js",
			"lineno": 73,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058697",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.OmniOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.OmniOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2173,
				2185
			],
			"filename": "OmniOscillator.js",
			"lineno": 74,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058699",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.OmniOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.OmniOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2189,
				2204
			],
			"filename": "OmniOscillator.js",
			"lineno": 75,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058701",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.OmniOscillator.defaults.type",
		"kind": "member",
		"memberof": "Tone.OmniOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2208,
				2219
			],
			"filename": "OmniOscillator.js",
			"lineno": 76,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058703",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.OmniOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.OmniOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2293,
				2318
			],
			"filename": "OmniOscillator.js",
			"lineno": 84,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058709",
				"name": "Pulse",
				"type": "Literal",
				"value": "PulseOscillator"
			}
		},
		"name": "Pulse",
		"longname": "<anonymous>~OmniOscType.Pulse",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "PulseOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2322,
				2343
			],
			"filename": "OmniOscillator.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058711",
				"name": "PWM",
				"type": "Literal",
				"value": "PWMOscillator"
			}
		},
		"name": "PWM",
		"longname": "<anonymous>~OmniOscType.PWM",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "PWMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2347,
				2365
			],
			"filename": "OmniOscillator.js",
			"lineno": 86,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058713",
				"name": "Osc",
				"type": "Literal",
				"value": "Oscillator"
			}
		},
		"name": "Osc",
		"longname": "<anonymous>~OmniOscType.Osc",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "Oscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2369,
				2388
			],
			"filename": "OmniOscillator.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058715",
				"name": "FM",
				"type": "Literal",
				"value": "FMOscillator"
			}
		},
		"name": "FM",
		"longname": "<anonymous>~OmniOscType.FM",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "FMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2392,
				2411
			],
			"filename": "OmniOscillator.js",
			"lineno": 88,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058717",
				"name": "AM",
				"type": "Literal",
				"value": "AMOscillator"
			}
		},
		"name": "AM",
		"longname": "<anonymous>~OmniOscType.AM",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "AMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2415,
				2436
			],
			"filename": "OmniOscillator.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058719",
				"name": "Fat",
				"type": "Literal",
				"value": "FatOscillator"
			}
		},
		"name": "Fat",
		"longname": "<anonymous>~OmniOscType.Fat",
		"kind": "member",
		"memberof": "<anonymous>~OmniOscType",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "FatOscillator"
	},
	{
		"comment": "/**\n\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t * when it's not.\n\t * \n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name type\n\t * @example\n\t * omniOsc.type = \"pwm\";\n\t * //modulationFrequency is parameter which is available\n\t * //only when the type is \"pwm\". \n\t * omniOsc.modulationFrequency.value = 0.5;\n\t * @example\n\t * //an square wave frequency modulated by a sawtooth\n\t * omniOsc.type = \"fmsquare\";\n\t * omniOsc.modulationType = \"sawtooth\";\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 110,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\nprefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\ntypes. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\noscillator's class are accessible when the oscillator is set to that type, but throws an error \nwhen it's not.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "type",
		"examples": [
			"omniOsc.type = \"pwm\";\n//modulationFrequency is parameter which is available\n//only when the type is \"pwm\". \nomniOsc.modulationFrequency.value = 0.5;",
			"//an square wave frequency modulated by a sawtooth\nomniOsc.type = \"fmsquare\";\nomniOsc.modulationType = \"sawtooth\";"
		],
		"longname": "Tone.OmniOscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The partials of the waveform. A partial represents \n\t * the amplitude at a harmonic. The first harmonic is the \n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series. \n\t * Setting this value will automatically set the type to \"custom\". \n\t * The value is an empty array when the type is not \"custom\". \n\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 163,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The partials of the waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\". \nThis is not available on \"pwm\" and \"pulse\" oscillator types.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "partials",
		"examples": [
			"osc.partials = [1, 0.2, 0.01];"
		],
		"longname": "Tone.OmniOscillator#partials",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Set a member/attribute of the oscillator. \n\t *  @param {Object|String} params\n\t *  @param {number=} value\n\t *  @param {Time=} rampTime\n\t *  @returns {Tone.OmniOscillator} this\n\t */",
		"meta": {
			"range": [
				5676,
				6007
			],
			"filename": "OmniOscillator.js",
			"lineno": 193,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100058998",
				"name": "Tone.OmniOscillator.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"params",
					"value"
				]
			},
			"vars": {
				"this.type": "Tone.OmniOscillator#type"
			}
		},
		"description": "Set a member/attribute of the oscillator.",
		"params": [
			{
				"type": {
					"names": [
						"Object",
						"String"
					]
				},
				"name": "params"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"name": "rampTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.OmniOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.OmniOscillator#set",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees. \n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 234,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "phase",
		"longname": "Tone.OmniOscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {NormalRange}\n\t * @signal\n\t * @name width\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t * //can access the width attribute only if type === \"pulse\"\n\t * omniOsc.width.value = 0.2; \n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 249,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The width of the oscillator (only if the oscillator is set to \"pulse\")",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "width",
		"examples": [
			"var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n//can access the width attribute only if type === \"pulse\"\nomniOsc.width.value = 0.2; "
		],
		"longname": "Tone.OmniOscillator#width",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The number of detuned oscillators\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Number}\n\t * @name count\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 268,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The number of detuned oscillators",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "count",
		"longname": "Tone.OmniOscillator#count",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The detune spread between the oscillators. If \"count\" is\n\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t * for more info.\n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Cents}\n\t * @name spread\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 287,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The detune spread between the oscillators. If \"count\" is\nset to 3 oscillators and the \"spread\" is set to 40,\nthe three oscillators would be detuned like this: [-20, 0, 20]\nfor a total detune spread of 40 cents. See Tone.FatOscillator\nfor more info.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Cents"
			]
		},
		"name": "spread",
		"longname": "Tone.OmniOscillator#spread",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The type of the modulator oscillator. Only if the oscillator\n\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t * for more info. \n\t * @memberOf Tone.OmniOscillator#\n\t * @type {String}\n\t * @name modulationType\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 310,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the modulator oscillator. Only if the oscillator\nis set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\nfor more info.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "modulationType",
		"longname": "Tone.OmniOscillator#modulationType",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t * modulating signal (ma) -- as in ma/mf. \n\t * See Tone.FMOscillator for more info. \n\t * @type {Positive}\n\t * @signal\n\t * @name modulationIndex\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 331,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \nratio of the frequency of the modulating signal (mf) to the amplitude of the \nmodulating signal (ma) -- as in ma/mf. \nSee Tone.FMOscillator for more info.",
		"type": {
			"names": [
				"Positive"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "modulationIndex",
		"longname": "modulationIndex",
		"kind": "member",
		"scope": "global"
	},
	{
		"comment": "/**\n\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t *  for more info. \n\t *  @memberOf Tone.OmniOscillator#\n\t *  @signal\n\t *  @type {Positive}\n\t *  @name harmonicity\n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 348,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n A harmonicity of 1 gives both oscillators the same frequency. \n Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n for more info.",
		"memberof": "Tone.OmniOscillator",
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "harmonicity",
		"longname": "Tone.OmniOscillator#harmonicity",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The modulationFrequency Signal of the oscillator \n\t * (only if the oscillator type is set to pwm). See \n\t * Tone.PWMOscillator for more info. \n\t * @memberOf Tone.OmniOscillator#\n\t * @type {Frequency}\n\t * @signal\n\t * @name modulationFrequency\n\t * @example\n\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t * omniOsc.modulationFrequency.value = 0.2; \n\t */",
		"meta": {
			"filename": "OmniOscillator.js",
			"lineno": 366,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The modulationFrequency Signal of the oscillator \n(only if the oscillator type is set to pwm). See \nTone.PWMOscillator for more info.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "modulationFrequency",
		"examples": [
			"var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n//can access the modulationFrequency attribute only if type === \"pwm\"\nomniOsc.modulationFrequency.value = 0.2; "
		],
		"longname": "Tone.OmniOscillator#modulationFrequency",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.OmniOscillator} this\n\t */",
		"meta": {
			"range": [
				11320,
				11660
			],
			"filename": "OmniOscillator.js",
			"lineno": 391,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059524",
				"name": "Tone.OmniOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this.detune": "Tone.OmniOscillator#detune",
				"this.frequency": "Tone.OmniOscillator#frequency",
				"this._oscillator": "Tone.OmniOscillator#_oscillator",
				"this._sourceType": "Tone.OmniOscillator#_sourceType"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.OmniOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.OmniOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.Oscillator supports a number of features including\n\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {Frequency} [frequency] Starting frequency\n\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t *  @example\n\t * //make and start a 440hz sine tone\n\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t */",
		"meta": {
			"range": [
				1198,
				2359
			],
			"filename": "Oscillator.js",
			"lineno": 34,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059697",
				"name": "Tone.Oscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.Oscillator~options",
				"this._oscillator": "Tone.Oscillator#_oscillator",
				"this.frequency": "Tone.Oscillator#frequency",
				"this.detune": "Tone.Oscillator#detune",
				"this._wave": "Tone.Oscillator#_wave",
				"this._partials": "Tone.Oscillator#_partials",
				"this._phase": "Tone.Oscillator#_phase",
				"this._type": "Tone.Oscillator#_type",
				"this.type": "Tone.Oscillator#type",
				"this.phase": "Tone.Oscillator#phase"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Oscillator supports a number of features including\n        phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n        and Transport syncing (see Tone.Oscillator.syncFrequency).",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "Starting frequency",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"string"
					]
				},
				"optional": true,
				"description": "The oscillator type. Read more about type below.",
				"name": "type"
			}
		],
		"examples": [
			"//make and start a 440hz sine tone\nvar osc = new Tone.Oscillator(440, \"sine\").toMaster().start();"
		],
		"name": "Oscillator",
		"longname": "Tone.Oscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1542,
				1614
			],
			"filename": "Oscillator.js",
			"lineno": 51,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059733",
				"name": "this.frequency",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.Oscillator#frequency",
		"kind": "member",
		"memberof": "Tone.Oscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune control signal.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1698,
				1760
			],
			"filename": "Oscillator.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059750",
				"name": "this.detune",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The detune control signal.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.Oscillator#detune",
		"kind": "member",
		"memberof": "Tone.Oscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2466,
				2586
			],
			"filename": "Oscillator.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059836",
				"name": "Tone.Oscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":\"\"}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Oscillator.defaults",
		"kind": "member",
		"memberof": "Tone.Oscillator",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2497,
				2512
			],
			"filename": "Oscillator.js",
			"lineno": 102,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059843",
				"name": "type",
				"type": "Literal",
				"value": "sine"
			}
		},
		"undocumented": true,
		"name": "type",
		"longname": "Tone.Oscillator.defaults.type",
		"kind": "member",
		"memberof": "Tone.Oscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2516,
				2533
			],
			"filename": "Oscillator.js",
			"lineno": 103,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059845",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.Oscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.Oscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2537,
				2549
			],
			"filename": "Oscillator.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059847",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.Oscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.Oscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2553,
				2564
			],
			"filename": "Oscillator.js",
			"lineno": 105,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059849",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.Oscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.Oscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2568,
				2583
			],
			"filename": "Oscillator.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059851",
				"name": "partials",
				"type": "ArrayExpression",
				"value": "[]"
			}
		},
		"undocumented": true,
		"name": "partials",
		"longname": "Tone.Oscillator.defaults.partials",
		"kind": "member",
		"memberof": "Tone.Oscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  The Oscillator types\n\t *  @enum {String}\n\t */",
		"meta": {
			"range": [
				2646,
				2781
			],
			"filename": "Oscillator.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059854",
				"name": "Tone.Oscillator.Type",
				"type": "ObjectExpression",
				"value": "{\"Sine\":\"sine\",\"Triangle\":\"triangle\",\"Sawtooth\":\"sawtooth\",\"Square\":\"square\",\"Custom\":\"custom\"}",
				"paramnames": []
			}
		},
		"description": "The Oscillator types",
		"kind": "member",
		"isEnum": true,
		"type": {
			"names": [
				"String"
			]
		},
		"name": "Type",
		"longname": "Tone.Oscillator.Type",
		"memberof": "Tone.Oscillator",
		"scope": "static",
		"properties": [
			{
				"comment": "",
				"meta": {
					"range": [
						2673,
						2686
					],
					"filename": "Oscillator.js",
					"lineno": 114,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
					"code": {
						"id": "astnode100059861",
						"name": "Sine",
						"type": "Literal",
						"value": "sine"
					}
				},
				"name": "Sine",
				"longname": "Tone.Oscillator.Type.Sine",
				"kind": "member",
				"memberof": "Tone.Oscillator.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "sine"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						2690,
						2711
					],
					"filename": "Oscillator.js",
					"lineno": 115,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
					"code": {
						"id": "astnode100059863",
						"name": "Triangle",
						"type": "Literal",
						"value": "triangle"
					}
				},
				"name": "Triangle",
				"longname": "Tone.Oscillator.Type.Triangle",
				"kind": "member",
				"memberof": "Tone.Oscillator.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "triangle"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						2715,
						2736
					],
					"filename": "Oscillator.js",
					"lineno": 116,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
					"code": {
						"id": "astnode100059865",
						"name": "Sawtooth",
						"type": "Literal",
						"value": "sawtooth"
					}
				},
				"name": "Sawtooth",
				"longname": "Tone.Oscillator.Type.Sawtooth",
				"kind": "member",
				"memberof": "Tone.Oscillator.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "sawtooth"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						2740,
						2757
					],
					"filename": "Oscillator.js",
					"lineno": 117,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
					"code": {
						"id": "astnode100059867",
						"name": "Square",
						"type": "Literal",
						"value": "square"
					}
				},
				"name": "Square",
				"longname": "Tone.Oscillator.Type.Square",
				"kind": "member",
				"memberof": "Tone.Oscillator.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "square"
			},
			{
				"comment": "",
				"meta": {
					"range": [
						2761,
						2778
					],
					"filename": "Oscillator.js",
					"lineno": 118,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
					"code": {
						"id": "astnode100059869",
						"name": "Custom",
						"type": "Literal",
						"value": "custom"
					}
				},
				"name": "Custom",
				"longname": "Tone.Oscillator.Type.Custom",
				"kind": "member",
				"memberof": "Tone.Oscillator.Type",
				"scope": "static",
				"type": {
					"names": [
						"String"
					]
				},
				"defaultvalue": "custom"
			}
		]
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2673,
				2686
			],
			"filename": "Oscillator.js",
			"lineno": 114,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059861",
				"name": "Sine",
				"type": "Literal",
				"value": "sine"
			}
		},
		"name": "Sine",
		"longname": "Tone.Oscillator.Type.Sine",
		"kind": "member",
		"memberof": "Tone.Oscillator.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "sine"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2690,
				2711
			],
			"filename": "Oscillator.js",
			"lineno": 115,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059863",
				"name": "Triangle",
				"type": "Literal",
				"value": "triangle"
			}
		},
		"name": "Triangle",
		"longname": "Tone.Oscillator.Type.Triangle",
		"kind": "member",
		"memberof": "Tone.Oscillator.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "triangle"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2715,
				2736
			],
			"filename": "Oscillator.js",
			"lineno": 116,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059865",
				"name": "Sawtooth",
				"type": "Literal",
				"value": "sawtooth"
			}
		},
		"name": "Sawtooth",
		"longname": "Tone.Oscillator.Type.Sawtooth",
		"kind": "member",
		"memberof": "Tone.Oscillator.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "sawtooth"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2740,
				2757
			],
			"filename": "Oscillator.js",
			"lineno": 117,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059867",
				"name": "Square",
				"type": "Literal",
				"value": "square"
			}
		},
		"name": "Square",
		"longname": "Tone.Oscillator.Type.Square",
		"kind": "member",
		"memberof": "Tone.Oscillator.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "square"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2761,
				2778
			],
			"filename": "Oscillator.js",
			"lineno": 118,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059869",
				"name": "Custom",
				"type": "Literal",
				"value": "custom"
			}
		},
		"name": "Custom",
		"longname": "Tone.Oscillator.Type.Custom",
		"kind": "member",
		"memberof": "Tone.Oscillator.Type",
		"scope": "static",
		"type": {
			"names": [
				"String"
			]
		},
		"defaultvalue": "custom"
	},
	{
		"comment": "/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency. \n\t *  @returns {Tone.Oscillator} this\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240; \n\t * // the frequency of the oscillator is doubled to 880\n\t */",
		"meta": {
			"range": [
				4118,
				4234
			],
			"filename": "Oscillator.js",
			"lineno": 164,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059988",
				"name": "Tone.Oscillator.prototype.syncFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Oscillator"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
		],
		"name": "syncFrequency",
		"longname": "Tone.Oscillator#syncFrequency",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Unsync the oscillator's frequency from the Transport. \n\t *  See Tone.Oscillator.syncFrequency\n\t *  @returns {Tone.Oscillator} this\n\t */",
		"meta": {
			"range": [
				4384,
				4504
			],
			"filename": "Oscillator.js",
			"lineno": 174,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060011",
				"name": "Tone.Oscillator.prototype.unsyncFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Oscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "unsyncFrequency",
		"longname": "Tone.Oscillator#unsyncFrequency",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t * 8 partials of the triangle wave.\n\t * <br><br> \n\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t * PeriodicWave equations are from the \n\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t *  \n\t * @memberOf Tone.Oscillator#\n\t * @type {string}\n\t * @name type\n\t * @example\n\t * //set it to a square wave\n\t * osc.type = \"square\";\n\t * @example\n\t * //set the first 6 partials of a sawtooth wave\n\t * osc.type = \"sawtooth6\";\n\t */",
		"meta": {
			"filename": "Oscillator.js",
			"lineno": 179,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\nsetting the first x number of partials of the oscillator. For example: \"sine4\" would\nset be the first 4 partials of the sine wave and \"triangle8\" would set the first\n8 partials of the triangle wave.\n<br><br> \nUses PeriodicWave internally even for native types so that it can set the phase. \nPeriodicWave equations are from the \n[Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"examples": [
			"//set it to a square wave\nosc.type = \"square\";",
			"//set the first 6 partials of a sawtooth wave\nosc.type = \"sawtooth6\";"
		],
		"longname": "Tone.Oscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The partials of the waveform. A partial represents \n\t * the amplitude at a harmonic. The first harmonic is the \n\t * fundamental frequency, the second is the octave and so on\n\t * following the harmonic series. \n\t * Setting this value will automatically set the type to \"custom\". \n\t * The value is an empty array when the type is not \"custom\". \n\t * @memberOf Tone.Oscillator#\n\t * @type {Array}\n\t * @name partials\n\t * @example\n\t * osc.partials = [1, 0.2, 0.01];\n\t */",
		"meta": {
			"filename": "Oscillator.js",
			"lineno": 313,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The partials of the waveform. A partial represents \nthe amplitude at a harmonic. The first harmonic is the \nfundamental frequency, the second is the octave and so on\nfollowing the harmonic series. \nSetting this value will automatically set the type to \"custom\". \nThe value is an empty array when the type is not \"custom\".",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "partials",
		"examples": [
			"osc.partials = [1, 0.2, 0.01];"
		],
		"longname": "Tone.Oscillator#partials",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees. \n\t * @memberOf Tone.Oscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t * @example\n\t * osc.phase = 180; //flips the phase of the oscillator\n\t */",
		"meta": {
			"filename": "Oscillator.js",
			"lineno": 340,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "phase",
		"examples": [
			"osc.phase = 180; //flips the phase of the oscillator"
		],
		"longname": "Tone.Oscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Oscillator} this\n\t */",
		"meta": {
			"range": [
				9744,
				10142
			],
			"filename": "Oscillator.js",
			"lineno": 363,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060676",
				"name": "Tone.Oscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._oscillator": "Tone.Oscillator#_oscillator",
				"this._wave": "Tone.Oscillator#_wave",
				"this.frequency": "Tone.Oscillator#frequency",
				"this.detune": "Tone.Oscillator#detune",
				"this._partials": "Tone.Oscillator#_partials"
			}
		},
		"description": "Dispose and disconnect.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Oscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Oscillator#dispose",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t *  \n\t *  @constructor\n\t *  @extends {Tone.Source} \n\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t *                                  which to load the AudioBuffer\n\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t *  @example\n\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t * //play as soon as the buffer is loaded\n\t * player.autostart = true;\n\t */",
		"meta": {
			"range": [
				744,
				2779
			],
			"filename": "Player.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060786",
				"name": "Tone.Player",
				"type": "FunctionExpression",
				"paramnames": [
					"url"
				]
			},
			"vars": {
				"options": "Tone.Player~options",
				"url": "Tone.Player~url",
				"this._source": "Tone.Player#_source",
				"this.autostart": "Tone.Player#autostart",
				"this._buffer": "Tone.Player#_buffer",
				"this._loop": "Tone.Player#_loop",
				"this._loopStart": "Tone.Player#_loopStart",
				"this._loopEnd": "Tone.Player#_loopEnd",
				"this._playbackRate": "Tone.Player#_playbackRate",
				"this.retrigger": "Tone.Player#retrigger",
				"this.fadeIn": "Tone.Player#fadeIn",
				"this.fadeOut": "Tone.Player#fadeOut"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Player is an audio file player with start, loop, and stop functions.",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"string",
						"AudioBuffer"
					]
				},
				"description": "Either the AudioBuffer or the url from\n                                 which to load the AudioBuffer",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The function to invoke when the buffer is loaded. \n                           Recommended to use Tone.Buffer.on('load') instead.",
				"name": "onload"
			}
		],
		"examples": [
			"var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n//play as soon as the buffer is loaded\nplayer.autostart = true;"
		],
		"name": "Player",
		"longname": "Tone.Player",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  If the file should play as soon\n\t\t *  as the buffer is loaded. \n\t\t *  @type {boolean}\n\t\t *  @example\n\t\t * //will play as soon as it's loaded\n\t\t * var player = new Tone.Player({\n\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t * \t\"autostart\" : true,\n\t\t * }).toMaster();\n\t\t */",
		"meta": {
			"range": [
				1371,
				1405
			],
			"filename": "Player.js",
			"lineno": 47,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060849",
				"name": "this.autostart",
				"type": "MemberExpression",
				"value": "options.autostart",
				"paramnames": []
			}
		},
		"description": "If the file should play as soon\n as the buffer is loaded.",
		"type": {
			"names": [
				"boolean"
			]
		},
		"examples": [
			"//will play as soon as it's loaded\nvar player = new Tone.Player({\n\t\"url\" : \"./path/to/sample.mp3\",\n\t\"autostart\" : true,\n}).toMaster();"
		],
		"name": "autostart",
		"longname": "Tone.Player#autostart",
		"kind": "member",
		"memberof": "Tone.Player",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t *  successive calls to Tone.Player.start will only start\n\t\t *  the sample if it had played all the way through. \n\t\t *  @type {boolean}\n\t\t */",
		"meta": {
			"range": [
				2512,
				2546
			],
			"filename": "Player.js",
			"lineno": 98,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060931",
				"name": "this.retrigger",
				"type": "MemberExpression",
				"value": "options.retrigger",
				"paramnames": []
			}
		},
		"description": "Enabling retrigger will allow a player to be restarted\n before the the previous 'start' is done playing. Otherwise, \n successive calls to Tone.Player.start will only start\n the sample if it had played all the way through.",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "retrigger",
		"longname": "Tone.Player#retrigger",
		"kind": "member",
		"memberof": "Tone.Player",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The fadeIn time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2631,
				2659
			],
			"filename": "Player.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060939",
				"name": "this.fadeIn",
				"type": "MemberExpression",
				"value": "options.fadeIn",
				"paramnames": []
			}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.Player#fadeIn",
		"kind": "member",
		"memberof": "Tone.Player",
		"scope": "instance",
		"overrides": "Tone.Source#fadeIn"
	},
	{
		"comment": "/**\n\t\t *  The fadeOut time of the amplitude envelope.\n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2745,
				2775
			],
			"filename": "Player.js",
			"lineno": 110,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060947",
				"name": "this.fadeOut",
				"type": "MemberExpression",
				"value": "options.fadeOut",
				"paramnames": []
			}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.Player#fadeOut",
		"kind": "member",
		"memberof": "Tone.Player",
		"scope": "instance",
		"overrides": "Tone.Source#fadeOut"
	},
	{
		"comment": "/**\n\t *  the default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2908,
				3134
			],
			"filename": "Player.js",
			"lineno": 121,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060966",
				"name": "Tone.Player.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Player.defaults",
		"memberof": "Tone.Player"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2935,
				2955
			],
			"filename": "Player.js",
			"lineno": 122,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060973",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.Player.defaults.onload",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2959,
				2977
			],
			"filename": "Player.js",
			"lineno": 123,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060977",
				"name": "playbackRate",
				"type": "Literal",
				"value": 1
			}
		},
		"undocumented": true,
		"name": "playbackRate",
		"longname": "Tone.Player.defaults.playbackRate",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2981,
				2995
			],
			"filename": "Player.js",
			"lineno": 124,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060979",
				"name": "loop",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "loop",
		"longname": "Tone.Player.defaults.loop",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2999,
				3018
			],
			"filename": "Player.js",
			"lineno": 125,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060981",
				"name": "autostart",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "autostart",
		"longname": "Tone.Player.defaults.autostart",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3022,
				3037
			],
			"filename": "Player.js",
			"lineno": 126,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060983",
				"name": "loopStart",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopStart",
		"longname": "Tone.Player.defaults.loopStart",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3041,
				3054
			],
			"filename": "Player.js",
			"lineno": 127,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060985",
				"name": "loopEnd",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "loopEnd",
		"longname": "Tone.Player.defaults.loopEnd",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3058,
				3077
			],
			"filename": "Player.js",
			"lineno": 128,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060987",
				"name": "retrigger",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "retrigger",
		"longname": "Tone.Player.defaults.retrigger",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3081,
				3098
			],
			"filename": "Player.js",
			"lineno": 129,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060989",
				"name": "reverse",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "reverse",
		"longname": "Tone.Player.defaults.reverse",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3102,
				3114
			],
			"filename": "Player.js",
			"lineno": 130,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060991",
				"name": "fadeIn",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeIn",
		"longname": "Tone.Player.defaults.fadeIn",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				3118,
				3131
			],
			"filename": "Player.js",
			"lineno": 131,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060993",
				"name": "fadeOut",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeOut",
		"longname": "Tone.Player.defaults.fadeOut",
		"kind": "member",
		"memberof": "Tone.Player.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Load the audio file as an audio buffer.\n\t *  Decodes the audio asynchronously and invokes\n\t *  the callback once the audio buffer loads. \n\t *  Note: this does not need to be called if a url\n\t *  was passed in to the constructor. Only use this\n\t *  if you want to manually load a new url. \n\t * @param {string} url The url of the buffer to load.\n\t *                     Filetype support depends on the\n\t *                     browser.\n\t *  @param  {function=} callback The function to invoke once\n\t *                               the sample is loaded.\n\t *  @returns {Promise}\n\t */",
		"meta": {
			"range": [
				3728,
				3852
			],
			"filename": "Player.js",
			"lineno": 148,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060996",
				"name": "Tone.Player.prototype.load",
				"type": "FunctionExpression",
				"paramnames": [
					"url",
					"callback"
				]
			}
		},
		"description": "Load the audio file as an audio buffer.\n Decodes the audio asynchronously and invokes\n the callback once the audio buffer loads. \n Note: this does not need to be called if a url\n was passed in to the constructor. Only use this\n if you want to manually load a new url.",
		"params": [
			{
				"type": {
					"names": [
						"string"
					]
				},
				"description": "The url of the buffer to load.\n                    Filetype support depends on the\n                    browser.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The function to invoke once\n                              the sample is loaded.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				}
			}
		],
		"name": "load",
		"longname": "Tone.Player#load",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Play the buffer at the given startTime. Optionally add an offset\n\t *  and/or duration which will play the buffer from a position\n\t *  within the buffer for the given duration. \n\t *  \n\t *  @param  {Time} [startTime=now] When the player should start.\n\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t *                                 to start at. \n\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t *                                is given, it will default to the full length \n\t *                                of the sample (minus any offset)\n\t *  @returns {Tone.Player} this\n\t *  @memberOf Tone.Player#\n\t *  @method start\n\t *  @name start\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 164,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Play the buffer at the given startTime. Optionally add an offset\n and/or duration which will play the buffer from a position\n within the buffer for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the player should start.",
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The offset from the beginning of the sample\n                                to start at.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "How long the sample should play. If no duration\n                               is given, it will default to the full length \n                               of the sample (minus any offset)",
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Player"
					]
				},
				"description": "this"
			}
		],
		"memberof": "Tone.Player",
		"kind": "function",
		"name": "start",
		"longname": "Tone.Player#start",
		"scope": "instance",
		"overrides": "Tone.Source#start"
	},
	{
		"comment": "/**\n\t *  Seek to a specific time in the player's buffer. If the \n\t *  source is no longer playing at that time, it will stop.\n\t *  If you seek to a time that \n\t *  @param {Time} offset The time to seek to.\n\t *  @param {Time=} time The time for the seek event to occur.\n\t *  @return {Tone.Player} this\n\t *  @example\n\t * source.start(0.2);\n\t * source.stop(0.4);\n\t */",
		"meta": {
			"range": [
				6693,
				7024
			],
			"filename": "Player.js",
			"lineno": 251,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061274",
				"name": "Tone.Player.prototype.seek",
				"type": "FunctionExpression",
				"paramnames": [
					"offset",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Player#seek~time",
				"offset": "Tone.Player#seek~offset"
			}
		},
		"description": "Seek to a specific time in the player's buffer. If the \n source is no longer playing at that time, it will stop.\n If you seek to a time that",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to seek to.",
				"name": "offset"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The time for the seek event to occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Player"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(0.2);\nsource.stop(0.4);"
		],
		"name": "seek",
		"longname": "Tone.Player#seek",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Set the loop start and end. Will only loop if loop is \n\t *  set to true. \n\t *  @param {Time} loopStart The loop end time\n\t *  @param {Time} loopEnd The loop end time\n\t *  @returns {Tone.Player} this\n\t *  @example\n\t * //loop 0.1 seconds of the file. \n\t * player.setLoopPoints(0.2, 0.3);\n\t * player.loop = true;\n\t */",
		"meta": {
			"range": [
				7353,
				7494
			],
			"filename": "Player.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061333",
				"name": "Tone.Player.prototype.setLoopPoints",
				"type": "FunctionExpression",
				"paramnames": [
					"loopStart",
					"loopEnd"
				]
			},
			"vars": {
				"this.loopStart": "Tone.Player#loopStart",
				"this.loopEnd": "Tone.Player#loopEnd"
			}
		},
		"description": "Set the loop start and end. Will only loop if loop is \n set to true.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The loop end time",
				"name": "loopStart"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The loop end time",
				"name": "loopEnd"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Player"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//loop 0.1 seconds of the file. \nplayer.setLoopPoints(0.2, 0.3);\nplayer.loop = true;"
		],
		"name": "setLoopPoints",
		"longname": "Tone.Player#setLoopPoints",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If loop is true, the loop will start at this position. \n\t * @memberOf Tone.Player#\n\t * @type {Time}\n\t * @name loopStart\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 280,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If loop is true, the loop will start at this position.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopStart",
		"longname": "Tone.Player#loopStart",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * If loop is true, the loop will end at this position.\n\t * @memberOf Tone.Player#\n\t * @type {Time}\n\t * @name loopEnd\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 298,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If loop is true, the loop will end at this position.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.Player#loopEnd",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The audio buffer belonging to the player. \n\t * @memberOf Tone.Player#\n\t * @type {Tone.Buffer}\n\t * @name buffer\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 316,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The audio buffer belonging to the player.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"Tone.Buffer"
			]
		},
		"name": "buffer",
		"longname": "Tone.Player#buffer",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * If the buffer should loop once it's over. \n\t * @memberOf Tone.Player#\n\t * @type {boolean}\n\t * @name loop\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 331,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If the buffer should loop once it's over.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "loop",
		"longname": "Tone.Player#loop",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The playback speed. 1 is normal speed. This is not a signal because\n\t * Safari and iOS currently don't support playbackRate as a signal.\n\t * @memberOf Tone.Player#\n\t * @type {number}\n\t * @name playbackRate\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 349,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The playback speed. 1 is normal speed. This is not a signal because\nSafari and iOS currently don't support playbackRate as a signal.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.Player#playbackRate",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The direction the buffer should play in\n\t * @memberOf Tone.Player#\n\t * @type {boolean}\n\t * @name reverse\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 368,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The direction the buffer should play in",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "reverse",
		"longname": "Tone.Player#reverse",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * If all the buffer is loaded\n\t * @memberOf Tone.Player#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Player.js",
			"lineno": 383,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If all the buffer is loaded",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loaded",
		"readonly": true,
		"longname": "Tone.Player#loaded",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Player} this\n\t */",
		"meta": {
			"range": [
				10003,
				10245
			],
			"filename": "Player.js",
			"lineno": 400,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061623",
				"name": "Tone.Player.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._source": "Tone.Player#_source",
				"this._buffer": "Tone.Player#_buffer"
			}
		},
		"description": "Dispose and disconnect.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Player"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Player#dispose",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Tone.Players combines multiple [Tone.Player](Player) objects. \n\t *  \n\t *  @constructor\n\t *  @extends {Tone} \n\t *  @param {Object} urls An object mapping a name to a url.\n\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t */",
		"meta": {
			"range": [
				384,
				1714
			],
			"filename": "Players.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061699",
				"name": "Tone.Players",
				"type": "FunctionExpression",
				"paramnames": [
					"urls"
				]
			},
			"vars": {
				"args": "Tone.Players~args",
				"options": "Tone.Players~options",
				"this._volume": "Tone.Players#_volume",
				"this.output": "Tone.Players#output",
				"this.volume": "Tone.Players#volume",
				"this._volume.output.output.channelCount": "Tone.Players#_volume.output.output.channelCount",
				"this._volume.output.output.channelCountMode": "Tone.Players#_volume.output.output.channelCountMode",
				"this.mute": "Tone.Players#mute",
				"this._players": "Tone.Players#_players",
				"this._loadingCount": "Tone.Players#_loadingCount",
				"this._fadeIn": "Tone.Players#_fadeIn",
				"this._fadeOut": "Tone.Players#_fadeOut",
				"name": "Tone.Players~name"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Players combines multiple [Tone.Player](Player) objects.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "An object mapping a name to a url.",
				"name": "urls"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The function to invoke when the buffer is loaded.",
				"name": "onload"
			}
		],
		"name": "Players",
		"longname": "Tone.Players",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				852,
				885
			],
			"filename": "Players.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061759",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Players#volume",
		"kind": "member",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * The default values\n\t * @type {Object}\n\t */",
		"meta": {
			"range": [
				1799,
				1917
			],
			"filename": "Players.js",
			"lineno": 84,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061873",
				"name": "Tone.Players.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0}",
				"paramnames": []
			}
		},
		"description": "The default values",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Players.defaults",
		"kind": "member",
		"memberof": "Tone.Players",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1827,
				1839
			],
			"filename": "Players.js",
			"lineno": 85,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061880",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.Players.defaults.volume",
		"kind": "member",
		"memberof": "Tone.Players.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1843,
				1857
			],
			"filename": "Players.js",
			"lineno": 86,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061882",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Players.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Players.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1861,
				1881
			],
			"filename": "Players.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061884",
				"name": "onload",
				"type": "MemberExpression",
				"value": "Tone.noOp"
			}
		},
		"undocumented": true,
		"name": "onload",
		"longname": "Tone.Players.defaults.onload",
		"kind": "member",
		"memberof": "Tone.Players.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1885,
				1897
			],
			"filename": "Players.js",
			"lineno": 88,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061888",
				"name": "fadeIn",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeIn",
		"longname": "Tone.Players.defaults.fadeIn",
		"kind": "member",
		"memberof": "Tone.Players.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1901,
				1914
			],
			"filename": "Players.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100061890",
				"name": "fadeOut",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "fadeOut",
		"longname": "Tone.Players.defaults.fadeOut",
		"kind": "member",
		"memberof": "Tone.Players.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Source",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.Source#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.Source",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.Source#fadeIn",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.Source",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.Source#fadeOut",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The state of the players object. Returns \"started\" if any of the players are playing.\n\t * @memberOf Tone.Players#\n\t * @type {String}\n\t * @name state\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 158,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The state of the players object. Returns \"started\" if any of the players are playing.",
		"memberof": "Tone.Players",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "state",
		"readonly": true,
		"longname": "Tone.Players#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  True if the buffers object has a buffer by that name.\n\t *  @param  {String|Number}  name  The key or index of the \n\t *                                 buffer.\n\t *  @return  {Boolean}\n\t */",
		"meta": {
			"range": [
				3893,
				3985
			],
			"filename": "Players.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062096",
				"name": "Tone.Players.prototype.has",
				"type": "FunctionExpression",
				"paramnames": [
					"name"
				]
			}
		},
		"description": "True if the buffers object has a buffer by that name.",
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"description": "The key or index of the \n                                buffer.",
				"name": "name"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Boolean"
					]
				}
			}
		],
		"name": "has",
		"longname": "Tone.Players#has",
		"kind": "function",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Get a player by name. \n\t *  @param  {String}  name  The players name as defined in \n\t *                          the constructor object or `add` method. \n\t *  @return  {Tone.Player}\n\t */",
		"meta": {
			"range": [
				4186,
				4361
			],
			"filename": "Players.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062116",
				"name": "Tone.Players.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"name"
				]
			}
		},
		"description": "Get a player by name.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The players name as defined in \n                         the constructor object or `add` method.",
				"name": "name"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Player"
					]
				}
			}
		],
		"name": "get",
		"longname": "Tone.Players#get",
		"kind": "function",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * If all the buffers are loaded or not\n\t * @memberOf Tone.Players#\n\t * @type {Boolean}\n\t * @name loaded\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 212,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If all the buffers are loaded or not",
		"memberof": "Tone.Players",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "loaded",
		"readonly": true,
		"longname": "Tone.Players#loaded",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Add a player by name and url to the Players\n\t *  @param  {String}    name      A unique name to give the player\n\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t *                                                 or a buffer which will be added\n\t *                                                 with the given name.\n\t *  @param  {Function=}  callback  The callback to invoke \n\t *                                 when the url is loaded.\n\t */",
		"meta": {
			"range": [
				5504,
				5750
			],
			"filename": "Players.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062216",
				"name": "Tone.Players.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"name",
					"url",
					"callback"
				]
			},
			"vars": {
				"this._players[undefined]": "Tone.Players#_players[undefined]",
				"this._players[undefined].fadeIn": "Tone.Players#_players[undefined].fadeIn",
				"this._players[undefined].fadeOut": "Tone.Players#_players[undefined].fadeOut"
			}
		},
		"description": "Add a player by name and url to the Players",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "A unique name to give the player",
				"name": "name"
			},
			{
				"type": {
					"names": [
						"String",
						"Tone.Buffer",
						"Audiobuffer"
					]
				},
				"description": "Either the url of the bufer, \n                                                or a buffer which will be added\n                                                with the given name.",
				"name": "url"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback to invoke \n                                when the url is loaded.",
				"name": "callback"
			}
		],
		"name": "add",
		"longname": "Tone.Players#add",
		"kind": "function",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * Stop all of the players at the given time\n\t * @param {Time} time The time to stop all of the players.\n\t * @return {Tone.Players} this\n\t */",
		"meta": {
			"range": [
				5902,
				6015
			],
			"filename": "Players.js",
			"lineno": 250,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062275",
				"name": "Tone.Players.prototype.stopAll",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Stop all of the players at the given time",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time to stop all of the players.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Players"
					]
				},
				"description": "this"
			}
		],
		"name": "stopAll",
		"longname": "Tone.Players#stopAll",
		"kind": "function",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Dispose and disconnect.\n\t *  @return {Tone.Players} this\n\t */",
		"meta": {
			"range": [
				6091,
				6396
			],
			"filename": "Players.js",
			"lineno": 260,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062301",
				"name": "Tone.Players.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._volume": "Tone.Players#_volume",
				"this.volume": "Tone.Players#volume",
				"this.output": "Tone.Players#output",
				"": null,
				"this._players": "Tone.Players#_players"
			}
		},
		"description": "Dispose and disconnect.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Players"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Players#dispose",
		"kind": "function",
		"memberof": "Tone.Players",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t *         even-numbered harmonics are present. Read more \n\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t *\n\t *  @constructor\n\t *  @extends {Tone.Source}\n\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t *  @param {NormalRange} [width] The width of the pulse\n\t *  @example\n\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t */",
		"meta": {
			"range": [
				864,
				2176
			],
			"filename": "PulseOscillator.js",
			"lineno": 21,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062395",
				"name": "Tone.PulseOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PulseOscillator~options",
				"this.width": "Tone.PulseOscillator#width",
				"this._widthGate": "Tone.PulseOscillator#_widthGate",
				"this._sawtooth": "Tone.PulseOscillator#_sawtooth",
				"this.frequency": "Tone.PulseOscillator#frequency",
				"this.detune": "Tone.PulseOscillator#detune",
				"this._thresh": "Tone.PulseOscillator#_thresh",
				"": null
			}
		},
		"kind": "class",
		"classdesc": "Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n        also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n        a square and only odd-numbered harmonics are present. At all other widths \n        even-numbered harmonics are present. Read more \n        [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"optional": true,
				"description": "The frequency of the oscillator",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"description": "The width of the pulse",
				"name": "width"
			}
		],
		"examples": [
			"var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();"
		],
		"name": "PulseOscillator",
		"longname": "Tone.PulseOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The width of the pulse. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1104,
				1170
			],
			"filename": "PulseOscillator.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062425",
				"name": "this.width",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The width of the pulse.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "width",
		"longname": "Tone.PulseOscillator#width",
		"kind": "member",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1615,
				1656
			],
			"filename": "PulseOscillator.js",
			"lineno": 57,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062475",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._sawtooth.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.PulseOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune in cents. \n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1735,
				1770
			],
			"filename": "PulseOscillator.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062485",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this._sawtooth.detune",
				"paramnames": []
			}
		},
		"description": "The detune in cents.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.PulseOscillator#detune",
		"kind": "member",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The default parameters.\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				2314,
				2419
			],
			"filename": "PulseOscillator.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062564",
				"name": "Tone.PulseOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.2}",
				"paramnames": []
			}
		},
		"description": "The default parameters.",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.PulseOscillator.defaults",
		"memberof": "Tone.PulseOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2350,
				2367
			],
			"filename": "PulseOscillator.js",
			"lineno": 94,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062571",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.PulseOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.PulseOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2371,
				2383
			],
			"filename": "PulseOscillator.js",
			"lineno": 95,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062573",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.PulseOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.PulseOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2387,
				2398
			],
			"filename": "PulseOscillator.js",
			"lineno": 96,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062575",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.PulseOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.PulseOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2402,
				2415
			],
			"filename": "PulseOscillator.js",
			"lineno": 97,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062577",
				"name": "width",
				"type": "Literal",
				"value": 0.2
			}
		},
		"undocumented": true,
		"name": "width",
		"longname": "Tone.PulseOscillator.defaults.width",
		"kind": "member",
		"memberof": "Tone.PulseOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {Degrees}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "PulseOscillator.js",
			"lineno": 124,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.PulseOscillator",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "phase",
		"longname": "Tone.PulseOscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The type of the oscillator. Always returns \"pulse\".\n\t * @readOnly\n\t * @memberOf Tone.PulseOscillator#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "PulseOscillator.js",
			"lineno": 139,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the oscillator. Always returns \"pulse\".",
		"readonly": true,
		"memberof": "Tone.PulseOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.PulseOscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up method.\n\t *  @return {Tone.PulseOscillator} this\n\t */",
		"meta": {
			"range": [
				3938,
				4353
			],
			"filename": "PulseOscillator.js",
			"lineno": 169,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062725",
				"name": "Tone.PulseOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._sawtooth": "Tone.PulseOscillator#_sawtooth",
				"this.width": "Tone.PulseOscillator#width",
				"this._widthGate": "Tone.PulseOscillator#_widthGate",
				"this._thresh": "Tone.PulseOscillator#_thresh",
				"this.frequency": "Tone.PulseOscillator#frequency",
				"this.detune": "Tone.PulseOscillator#detune"
			}
		},
		"description": "Clean up method.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PulseOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PulseOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t *         at the modulationFrequency. This has the effect of continuously\n\t *         changing the timbre of the oscillator by altering the harmonics \n\t *         generated.\n\t *\n\t *  @extends {Tone.Source}\n\t *  @constructor\n\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t *  @example\n\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t */",
		"meta": {
			"range": [
				737,
				2113
			],
			"filename": "PWMOscillator.js",
			"lineno": 19,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062843",
				"name": "Tone.PWMOscillator",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.PWMOscillator~options",
				"this._pulse": "Tone.PWMOscillator#_pulse",
				"this._pulse._sawtooth.type": "Tone.PWMOscillator#_pulse._sawtooth.type",
				"this._modulator": "Tone.PWMOscillator#_modulator",
				"this._scale": "Tone.PWMOscillator#_scale",
				"this.frequency": "Tone.PWMOscillator#frequency",
				"this.detune": "Tone.PWMOscillator#detune",
				"this.modulationFrequency": "Tone.PWMOscillator#modulationFrequency"
			}
		},
		"kind": "class",
		"classdesc": "Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n        at the modulationFrequency. This has the effect of continuously\n        changing the timbre of the oscillator by altering the harmonics \n        generated.",
		"augments": [
			"Tone.Source"
		],
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The starting frequency of the oscillator.",
				"name": "frequency"
			},
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The modulation frequency of the width of the pulse.",
				"name": "modulationFrequency"
			}
		],
		"examples": [
			"var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();"
		],
		"name": "PWMOscillator",
		"longname": "Tone.PWMOscillator",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t *  The frequency control.\n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1618,
				1660
			],
			"filename": "PWMOscillator.js",
			"lineno": 56,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062927",
				"name": "this.frequency",
				"type": "MemberExpression",
				"value": "this._modulator.frequency",
				"paramnames": []
			}
		},
		"description": "The frequency control.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "frequency",
		"longname": "Tone.PWMOscillator#frequency",
		"kind": "member",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The detune of the oscillator.\n\t\t *  @type {Cents}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1747,
				1783
			],
			"filename": "PWMOscillator.js",
			"lineno": 63,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062937",
				"name": "this.detune",
				"type": "MemberExpression",
				"value": "this._modulator.detune",
				"paramnames": []
			}
		},
		"description": "The detune of the oscillator.",
		"type": {
			"names": [
				"Cents"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "detune",
		"longname": "Tone.PWMOscillator#detune",
		"kind": "member",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t\t *  The modulation rate of the oscillator. \n\t\t *  @type {Frequency}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				1884,
				1932
			],
			"filename": "PWMOscillator.js",
			"lineno": 70,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100062947",
				"name": "this.modulationFrequency",
				"type": "MemberExpression",
				"value": "this._pulse.frequency",
				"paramnames": []
			}
		},
		"description": "The modulation rate of the oscillator.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "modulationFrequency",
		"longname": "Tone.PWMOscillator#modulationFrequency",
		"kind": "member",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  default values\n\t *  @static\n\t *  @type {Object}\n\t *  @const\n\t */",
		"meta": {
			"range": [
				2240,
				2357
			],
			"filename": "PWMOscillator.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063002",
				"name": "Tone.PWMOscillator.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":0.4}",
				"paramnames": []
			}
		},
		"description": "default values",
		"scope": "static",
		"type": {
			"names": [
				"Object"
			]
		},
		"kind": "constant",
		"name": "defaults",
		"longname": "Tone.PWMOscillator.defaults",
		"memberof": "Tone.PWMOscillator"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2274,
				2291
			],
			"filename": "PWMOscillator.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063009",
				"name": "frequency",
				"type": "Literal",
				"value": 440
			}
		},
		"undocumented": true,
		"name": "frequency",
		"longname": "Tone.PWMOscillator.defaults.frequency",
		"kind": "member",
		"memberof": "Tone.PWMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2295,
				2307
			],
			"filename": "PWMOscillator.js",
			"lineno": 88,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063011",
				"name": "detune",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "detune",
		"longname": "Tone.PWMOscillator.defaults.detune",
		"kind": "member",
		"memberof": "Tone.PWMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2311,
				2322
			],
			"filename": "PWMOscillator.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063013",
				"name": "phase",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "phase",
		"longname": "Tone.PWMOscillator.defaults.phase",
		"kind": "member",
		"memberof": "Tone.PWMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2326,
				2353
			],
			"filename": "PWMOscillator.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063015",
				"name": "modulationFrequency",
				"type": "Literal",
				"value": 0.4
			}
		},
		"undocumented": true,
		"name": "modulationFrequency",
		"longname": "Tone.PWMOscillator.defaults.modulationFrequency",
		"kind": "member",
		"memberof": "Tone.PWMOscillator.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t * The type of the oscillator. Always returns \"pwm\".\n\t * @readOnly\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {string}\n\t * @name type\n\t */",
		"meta": {
			"filename": "PWMOscillator.js",
			"lineno": 115,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The type of the oscillator. Always returns \"pwm\".",
		"readonly": true,
		"memberof": "Tone.PWMOscillator",
		"type": {
			"names": [
				"string"
			]
		},
		"name": "type",
		"longname": "Tone.PWMOscillator#type",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * The phase of the oscillator in degrees.\n\t * @memberOf Tone.PWMOscillator#\n\t * @type {number}\n\t * @name phase\n\t */",
		"meta": {
			"filename": "PWMOscillator.js",
			"lineno": 141,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The phase of the oscillator in degrees.",
		"memberof": "Tone.PWMOscillator",
		"type": {
			"names": [
				"number"
			]
		},
		"name": "phase",
		"longname": "Tone.PWMOscillator#phase",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.PWMOscillator} this\n\t */",
		"meta": {
			"range": [
				3756,
				4165
			],
			"filename": "PWMOscillator.js",
			"lineno": 160,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063157",
				"name": "Tone.PWMOscillator.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._pulse": "Tone.PWMOscillator#_pulse",
				"this._scale": "Tone.PWMOscillator#_scale",
				"this._modulator": "Tone.PWMOscillator#_modulator",
				"this.frequency": "Tone.PWMOscillator#frequency",
				"this.detune": "Tone.PWMOscillator#detune",
				"this.modulationFrequency": "Tone.PWMOscillator#modulationFrequency"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.PWMOscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.PWMOscillator#dispose",
		"kind": "function",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"overrides": "Tone.Source#dispose"
	},
	{
		"comment": "/**\n\t *  @class  Base class for sources. Sources have start/stop methods\n\t *          and the ability to be synced to the \n\t *          start/stop of Tone.Transport. \n\t *\n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @example\n\t * //Multiple state change events can be chained together,\n\t * //but must be set in the correct order and with ascending times\n\t * \n\t * // OK\n\t * state.start().stop(\"+0.2\");\n\t * // AND\n\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t *\n\t * // BAD\n\t * state.stop(\"+0.2\").start();\n\t * // OR\n\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t * \n\t */",
		"meta": {
			"range": [
				774,
				1881
			],
			"filename": "Source.js",
			"lineno": 29,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063270",
				"name": "Tone.Source",
				"type": "FunctionExpression",
				"paramnames": [
					"options"
				]
			},
			"vars": {
				"options": "Tone.Source~options",
				"this._volume": "Tone.Source#_volume",
				"this.output": "Tone.Source#output",
				"this.volume": "Tone.Source#volume",
				"this._state": "Tone.Source#_state",
				"this._state.memory": "Tone.Source#_state.memory",
				"this._synced": "Tone.Source#_synced",
				"this._scheduled": "Tone.Source#_scheduled",
				"this._volume.output.output.channelCount": "Tone.Source#_volume.output.output.channelCount",
				"this._volume.output.output.channelCountMode": "Tone.Source#_volume.output.output.channelCountMode",
				"this.mute": "Tone.Source#mute"
			}
		},
		"kind": "class",
		"classdesc": "Base class for sources. Sources have start/stop methods\n         and the ability to be synced to the \n         start/stop of Tone.Transport.",
		"augments": [
			"Tone"
		],
		"examples": [
			"//Multiple state change events can be chained together,\n//but must be set in the correct order and with ascending times\n\n// OK\nstate.start().stop(\"+0.2\");\n// AND\nstate.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\n// BAD\nstate.stop(\"+0.2\").start();\n// OR\nstate.start(\"+0.3\").stop(\"+0.2\");"
		],
		"name": "Source",
		"longname": "Tone.Source",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Source#volume",
		"kind": "member",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  The default parameters\n\t *  @static\n\t *  @const\n\t *  @type {Object}\n\t */",
		"meta": {
			"range": [
				1996,
				2056
			],
			"filename": "Source.js",
			"lineno": 88,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063403",
				"name": "Tone.Source.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "The default parameters",
		"scope": "static",
		"kind": "constant",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.Source.defaults",
		"memberof": "Tone.Source"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2023,
				2035
			],
			"filename": "Source.js",
			"lineno": 89,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063410",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.Source.defaults.volume",
		"kind": "member",
		"memberof": "Tone.Source.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				2039,
				2053
			],
			"filename": "Source.js",
			"lineno": 90,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063412",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.Source.defaults.mute",
		"kind": "member",
		"memberof": "Tone.Source.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Source",
		"name": "state",
		"longname": "Tone.Source#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 114,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Source",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.Source#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.Source#start",
		"kind": "function",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.Source#stop",
		"kind": "function",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.Source#sync",
		"kind": "function",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.Source#unsync",
		"kind": "function",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *\tClean up.\n\t *  @return {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				7089,
				7361
			],
			"filename": "Source.js",
			"lineno": 266,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064062",
				"name": "Tone.Source.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._scheduled": "Tone.Source#_scheduled",
				"this._volume": "Tone.Source#_volume",
				"this.volume": "Tone.Source#volume",
				"this._state": "Tone.Source#_state"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Source#dispose",
		"kind": "function",
		"memberof": "Tone.Source",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t *          and external microphone or audio input. Check \n\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t *          to see which browsers are supported. Access to an external input\n\t *          is limited to secure (HTTPS) connections.\n\t *         \n\t *  @constructor\n\t *  @extends {Tone}\n\t *  @param {Decibels=} volume The level of the input\n\t *  @example\n\t * //list the inputs and open the third one\n\t * var motu = new Tone.UserMedia();\n\t * \n\t * //opening the input asks the user to activate their mic\n\t * motu.open().then(function(){\n\t * \t//opening is activates the microphone\n\t * \t//starting lets audio through\n\t * \tmotu.start(10);\n\t * });\n\t */",
		"meta": {
			"range": [
				883,
				1741
			],
			"filename": "UserMedia.js",
			"lineno": 27,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064149",
				"name": "Tone.UserMedia",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"options": "Tone.UserMedia~options",
				"this._mediaStream": "Tone.UserMedia#_mediaStream",
				"this._stream": "Tone.UserMedia#_stream",
				"this._device": "Tone.UserMedia#_device",
				"this._volume": "Tone.UserMedia#_volume",
				"this.output": "Tone.UserMedia#output",
				"this.volume": "Tone.UserMedia#volume",
				"this.mute": "Tone.UserMedia#mute"
			}
		},
		"kind": "class",
		"classdesc": "Tone.UserMedia uses MediaDevices.getUserMedia to open up\n         and external microphone or audio input. Check \n         [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n         to see which browsers are supported. Access to an external input\n         is limited to secure (HTTPS) connections.",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Decibels"
					]
				},
				"optional": true,
				"description": "The level of the input",
				"name": "volume"
			}
		],
		"examples": [
			"//list the inputs and open the third one\nvar motu = new Tone.UserMedia();\n\n//opening the input asks the user to activate their mic\nmotu.open().then(function(){\n\t//opening is activates the microphone\n\t//starting lets audio through\n\tmotu.start(10);\n});"
		],
		"name": "UserMedia",
		"longname": "Tone.UserMedia",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * input.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1647,
				1680
			],
			"filename": "UserMedia.js",
			"lineno": 67,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064209",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"input.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.UserMedia#volume",
		"kind": "member",
		"memberof": "Tone.UserMedia",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t * the default parameters\n\t * @type {Object}\n\t */",
		"meta": {
			"range": [
				1832,
				1895
			],
			"filename": "UserMedia.js",
			"lineno": 79,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064241",
				"name": "Tone.UserMedia.defaults",
				"type": "ObjectExpression",
				"value": "{\"undefined\":false}",
				"paramnames": []
			}
		},
		"description": "the default parameters",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "defaults",
		"longname": "Tone.UserMedia.defaults",
		"kind": "member",
		"memberof": "Tone.UserMedia",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1862,
				1874
			],
			"filename": "UserMedia.js",
			"lineno": 80,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064248",
				"name": "volume",
				"type": "Literal",
				"value": 0
			}
		},
		"undocumented": true,
		"name": "volume",
		"longname": "Tone.UserMedia.defaults.volume",
		"kind": "member",
		"memberof": "Tone.UserMedia.defaults",
		"scope": "static"
	},
	{
		"comment": "",
		"meta": {
			"range": [
				1878,
				1892
			],
			"filename": "UserMedia.js",
			"lineno": 81,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064250",
				"name": "mute",
				"type": "Literal",
				"value": false
			}
		},
		"undocumented": true,
		"name": "mute",
		"longname": "Tone.UserMedia.defaults.mute",
		"kind": "member",
		"memberof": "Tone.UserMedia.defaults",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Open the media stream. If a string is passed in, it is assumed\n\t *  to be the label or id of the stream, if a number is passed in,\n\t *  it is the input number of the stream.\n\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t *                                                With no argument, the default stream is opened.\n\t *  @return {Promise} The promise is resolved when the stream is open.\n\t */",
		"meta": {
			"range": [
				2360,
				3593
			],
			"filename": "UserMedia.js",
			"lineno": 92,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064253",
				"name": "Tone.UserMedia.prototype.open",
				"type": "FunctionExpression",
				"paramnames": [
					"labelOrId"
				]
			},
			"vars": {
				"labelOrId": "Tone.UserMedia#open~labelOrId",
				"": null
			}
		},
		"description": "Open the media stream. If a string is passed in, it is assumed\n to be the label or id of the stream, if a number is passed in,\n it is the input number of the stream.",
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"optional": true,
				"defaultvalue": "\"default\"",
				"description": "The label or id of the audio input media device. \n                                               With no argument, the default stream is opened.",
				"name": "labelOrId"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				},
				"description": "The promise is resolved when the stream is open."
			}
		],
		"name": "open",
		"longname": "Tone.UserMedia#open",
		"kind": "function",
		"memberof": "Tone.UserMedia",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Close the media stream\n\t *  @return {Tone.UserMedia} this\n\t */",
		"meta": {
			"range": [
				3670,
				3983
			],
			"filename": "UserMedia.js",
			"lineno": 134,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064418",
				"name": "Tone.UserMedia.prototype.close",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null,
				"this._stream": "Tone.UserMedia#_stream",
				"this._mediaStream": "Tone.UserMedia#_mediaStream",
				"this._device": "Tone.UserMedia#_device"
			}
		},
		"description": "Close the media stream",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.UserMedia"
					]
				},
				"description": "this"
			}
		],
		"name": "close",
		"longname": "Tone.UserMedia#close",
		"kind": "function",
		"memberof": "Tone.UserMedia",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Returns a promise which resolves with the list of audio input devices available.\n\t *  @return {Promise} The promise that is resolved with the devices\n\t *  @static\n\t *  @example\n\t * Tone.UserMedia.enumerateDevices().then(function(devices){\n\t * \tconsole.log(devices)\n\t * })\n\t */",
		"meta": {
			"range": [
				4274,
				4494
			],
			"filename": "UserMedia.js",
			"lineno": 157,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064479",
				"name": "Tone.UserMedia.enumerateDevices",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null
			}
		},
		"description": "Returns a promise which resolves with the list of audio input devices available.",
		"returns": [
			{
				"type": {
					"names": [
						"Promise"
					]
				},
				"description": "The promise that is resolved with the devices"
			}
		],
		"scope": "static",
		"examples": [
			"Tone.UserMedia.enumerateDevices().then(function(devices){\n\tconsole.log(devices)\n})"
		],
		"name": "enumerateDevices",
		"longname": "Tone.UserMedia.enumerateDevices",
		"kind": "function",
		"memberof": "Tone.UserMedia"
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t *  and \"stopped\" when the mic is closed.\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 165,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, \"started\" when the microphone is open\n and \"stopped\" when the mic is closed.",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.UserMedia",
		"name": "state",
		"longname": "Tone.UserMedia#state",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * \tReturns an identifier for the represented device that is \n\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t * \tunique to the origin of the calling application. It is reset when the \n\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t * \tused that is not persisted across sessions). Returns undefined when the \n\t * \tdevice is not open.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name deviceId\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 179,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns an identifier for the represented device that is \n\tpersisted across sessions. It is un-guessable by other applications and \n\tunique to the origin of the calling application. It is reset when the \n\tuser clears cookies (for Private Browsing, a different identifier is \n\tused that is not persisted across sessions). Returns undefined when the \n\tdevice is not open.",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.UserMedia",
		"name": "deviceId",
		"longname": "Tone.UserMedia#deviceId",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * \tReturns a group identifier. Two devices have the \n\t * \tsame group identifier if they belong to the same physical device.\n\t * \tReturns undefined when the device is not open.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name groupId\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 199,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns a group identifier. Two devices have the \n\tsame group identifier if they belong to the same physical device.\n\tReturns undefined when the device is not open.",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.UserMedia",
		"name": "groupId",
		"longname": "Tone.UserMedia#groupId",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t * \tReturns undefined when the device is not open or label is not available\n\t * \tbecause of permissions.\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.UserMedia#\n\t *  @name groupId\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 216,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns a label describing this device (for example \"Built-in Microphone\"). \n\tReturns undefined when the device is not open or label is not available\n\tbecause of permissions.",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.UserMedia",
		"name": "groupId",
		"longname": "Tone.UserMedia#groupId",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.UserMedia#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * userMedia.mute = true;\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 233,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.UserMedia",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nuserMedia.mute = true;"
		],
		"longname": "Tone.UserMedia#mute",
		"scope": "instance",
		"kind": "member"
	},
	{
		"comment": "/**\n\t * Clean up.\n\t * @return {Tone.UserMedia} this\n\t */",
		"meta": {
			"range": [
				6797,
				7013
			],
			"filename": "UserMedia.js",
			"lineno": 255,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100064662",
				"name": "Tone.UserMedia.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._volume": "Tone.UserMedia#_volume",
				"this.volume": "Tone.UserMedia#volume"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.UserMedia"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.UserMedia#dispose",
		"kind": "function",
		"memberof": "Tone.UserMedia",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  If getUserMedia is supported by the browser.\n\t *  @type  {Boolean}\n\t *  @memberOf Tone.UserMedia#\n\t *  @name supported\n\t *  @static\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "UserMedia.js",
			"lineno": 265,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "If getUserMedia is supported by the browser.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"memberof": "Tone.UserMedia",
		"name": "supported",
		"scope": "instance",
		"readonly": true,
		"longname": "Tone.UserMedia#supported",
		"kind": "member"
	},
	{
		"comment": "/**\n\t *  @class Tone.Frequency is a primitive type for encoding Frequency values.\n\t *         Eventually all time values are evaluated to hertz\n\t *         using the `eval` method.\n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * Tone.Frequency(\"C3\") // 261\n\t * Tone.Frequency(38, \"midi\") //\n\t * Tone.Frequency(\"C3\").transpose(4);\n\t */",
		"meta": {
			"range": [
				531,
				711
			],
			"filename": "Frequency.js",
			"lineno": 16,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100064762",
				"name": "Tone.Frequency",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"kind": "class",
		"classdesc": "Tone.Frequency is a primitive type for encoding Frequency values.\n        Eventually all time values are evaluated to hertz\n        using the `eval` method.",
		"augments": [
			"Tone.TimeBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"description": "The time value.",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "The units of the value.",
				"name": "units"
			}
		],
		"examples": [
			"Tone.Frequency(\"C3\") // 261\nTone.Frequency(38, \"midi\") //\nTone.Frequency(\"C3\").transpose(4);"
		],
		"name": "Frequency",
		"longname": "Tone.Frequency",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Transposes the frequency by the given number of semitones.\n\t *  @param  {Interval}  interval\n\t *  @return  {Tone.Frequency} this\n\t *  @example\n\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t */",
		"meta": {
			"range": [
				2682,
				2913
			],
			"filename": "Frequency.js",
			"lineno": 95,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100064981",
				"name": "Tone.Frequency.prototype.transpose",
				"type": "FunctionExpression",
				"paramnames": [
					"interval"
				]
			},
			"vars": {
				"this._expr": "Tone.Frequency#_expr",
				"": null
			}
		},
		"description": "Transposes the frequency by the given number of semitones.",
		"params": [
			{
				"type": {
					"names": [
						"Interval"
					]
				},
				"name": "interval"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Frequency"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Frequency(\"A4\").transpose(3); //\"C5\""
		],
		"name": "transpose",
		"longname": "Tone.Frequency#transpose",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Takes an array of semitone intervals and returns\n\t *  an array of frequencies transposed by those intervals.\n\t *  @param  {Array}  intervals\n\t *  @return  {Tone.Frequency} this\n\t *  @example\n\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t */",
		"meta": {
			"range": [
				3191,
				3516
			],
			"filename": "Frequency.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065025",
				"name": "Tone.Frequency.prototype.harmonize",
				"type": "FunctionExpression",
				"paramnames": [
					"intervals"
				]
			},
			"vars": {
				"this._expr": "Tone.Frequency#_expr",
				"": null
			}
		},
		"description": "Takes an array of semitone intervals and returns\n an array of frequencies transposed by those intervals.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "intervals"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Frequency"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]"
		],
		"name": "harmonize",
		"longname": "Tone.Frequency#harmonize",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the value of the frequency as a MIDI note\n\t *  @return  {MIDI}\n\t *  @example\n\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t */",
		"meta": {
			"range": [
				3835,
				3930
			],
			"filename": "Frequency.js",
			"lineno": 133,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065094",
				"name": "Tone.Frequency.prototype.toMidi",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the value of the frequency as a MIDI note",
		"returns": [
			{
				"type": {
					"names": [
						"MIDI"
					]
				}
			}
		],
		"examples": [
			"Tone.Frequency(\"C4\").toMidi(); //60"
		],
		"name": "toMidi",
		"longname": "Tone.Frequency#toMidi",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the value of the frequency in Scientific Pitch Notation\n\t *  @return  {Note}\n\t *  @example\n\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t */",
		"meta": {
			"range": [
				4095,
				4463
			],
			"filename": "Frequency.js",
			"lineno": 143,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065114",
				"name": "Tone.Frequency.prototype.toNote",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"freq": "Tone.Frequency#toNote~freq",
				"log": "Tone.Frequency#toNote~log",
				"noteNumber": "Tone.Frequency#toNote~noteNumber",
				"octave": "Tone.Frequency#toNote~octave",
				"noteName": "Tone.Frequency#toNote~noteName"
			}
		},
		"description": "Return the value of the frequency in Scientific Pitch Notation",
		"returns": [
			{
				"type": {
					"names": [
						"Note"
					]
				}
			}
		],
		"examples": [
			"Tone.Frequency(69, \"midi\").toNote(); //\"A4\""
		],
		"name": "toNote",
		"longname": "Tone.Frequency#toNote",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the duration of one cycle in seconds.\n\t *  @return  {Seconds}\n\t */",
		"meta": {
			"range": [
				4551,
				4631
			],
			"filename": "Frequency.js",
			"lineno": 159,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065199",
				"name": "Tone.Frequency.prototype.toSeconds",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the duration of one cycle in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "toSeconds",
		"longname": "Tone.Frequency#toSeconds",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toSeconds"
	},
	{
		"comment": "/**\n\t *  Return the value in Hertz\n\t *  @return  {Frequency}\n\t */",
		"meta": {
			"range": [
				4702,
				4780
			],
			"filename": "Frequency.js",
			"lineno": 167,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065217",
				"name": "Tone.Frequency.prototype.toFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the value in Hertz",
		"returns": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				}
			}
		],
		"name": "toFrequency",
		"longname": "Tone.Frequency#toFrequency",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toFrequency"
	},
	{
		"comment": "/**\n\t *  Return the duration of one cycle in ticks\n\t *  @return  {Ticks}\n\t */",
		"meta": {
			"range": [
				4863,
				5054
			],
			"filename": "Frequency.js",
			"lineno": 175,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065233",
				"name": "Tone.Frequency.prototype.toTicks",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"quarterTime": "Tone.Frequency#toTicks~quarterTime",
				"quarters": "Tone.Frequency#toTicks~quarters"
			}
		},
		"description": "Return the duration of one cycle in ticks",
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				}
			}
		],
		"name": "toTicks",
		"longname": "Tone.Frequency#toTicks",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toTicks"
	},
	{
		"comment": "/**\n\t *  Note to scale index\n\t *  @type  {Object}\n\t */",
		"meta": {
			"range": [
				6577,
				6994
			],
			"filename": "Frequency.js",
			"lineno": 239,
			"columnno": 5,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065372",
				"name": "noteToScaleIndex",
				"type": "ObjectExpression",
				"value": "{\"undefined\":13}"
			}
		},
		"description": "Note to scale index",
		"type": {
			"names": [
				"Object"
			]
		},
		"name": "noteToScaleIndex",
		"longname": "<anonymous>~noteToScaleIndex",
		"kind": "member",
		"memberof": "<anonymous>",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "/**\n\t *  scale index to note (sharps)\n\t *  @type  {Array}\n\t */",
		"meta": {
			"range": [
				7066,
				7150
			],
			"filename": "Frequency.js",
			"lineno": 253,
			"columnno": 5,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065448",
				"name": "scaleIndexToNote",
				"type": "ArrayExpression",
				"value": "[\"C\",\"C#\",\"D\",\"D#\",\"E\",\"F\",\"F#\",\"G\",\"G#\",\"A\",\"A#\",\"B\"]"
			}
		},
		"description": "scale index to note (sharps)",
		"type": {
			"names": [
				"Array"
			]
		},
		"name": "scaleIndexToNote",
		"longname": "<anonymous>~scaleIndexToNote",
		"kind": "member",
		"memberof": "<anonymous>",
		"scope": "inner",
		"params": []
	},
	{
		"comment": "/**\n\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t *  A4's values in Hertz.\n\t *  @type {Frequency}\n\t *  @static\n\t */",
		"meta": {
			"range": [
				7297,
				7320
			],
			"filename": "Frequency.js",
			"lineno": 261,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065464",
				"name": "Tone.Frequency.A4",
				"type": "Literal",
				"value": 440,
				"paramnames": []
			}
		},
		"description": "The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n A4's values in Hertz.",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"scope": "static",
		"name": "A4",
		"longname": "Tone.Frequency.A4",
		"kind": "member",
		"memberof": "Tone.Frequency"
	},
	{
		"comment": "/**\n\t *  Convert a MIDI note to frequency value.\n\t *  @param  {MIDI} midi The midi number to convert.\n\t *  @return {Frequency} the corresponding frequency value\n\t *  @example\n\t * tone.midiToFrequency(69); // returns 440\n\t */",
		"meta": {
			"range": [
				7550,
				7671
			],
			"filename": "Frequency.js",
			"lineno": 270,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065472",
				"name": "Tone.Frequency.prototype.midiToFrequency",
				"type": "FunctionExpression",
				"paramnames": [
					"midi"
				]
			}
		},
		"description": "Convert a MIDI note to frequency value.",
		"params": [
			{
				"type": {
					"names": [
						"MIDI"
					]
				},
				"description": "The midi number to convert.",
				"name": "midi"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "the corresponding frequency value"
			}
		],
		"examples": [
			"tone.midiToFrequency(69); // returns 440"
		],
		"name": "midiToFrequency",
		"longname": "Tone.Frequency#midiToFrequency",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Convert a frequency value to a MIDI note.\n\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t *  @returns  {MIDI}\n\t *  @example\n\t * tone.midiToFrequency(440); // returns 69\n\t */",
		"meta": {
			"range": [
				7888,
				8037
			],
			"filename": "Frequency.js",
			"lineno": 281,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065501",
				"name": "Tone.Frequency.prototype.frequencyToMidi",
				"type": "FunctionExpression",
				"paramnames": [
					"frequency"
				]
			}
		},
		"description": "Convert a frequency value to a MIDI note.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The value to frequency value to convert.",
				"name": "frequency"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"MIDI"
					]
				}
			}
		],
		"examples": [
			"tone.midiToFrequency(440); // returns 69"
		],
		"name": "frequencyToMidi",
		"longname": "Tone.Frequency#frequencyToMidi",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t *         Eventually all time values are evaluated to seconds\n\t *         using the `eval` method. Tone.Time can be constructed\n\t *         with or without the `new` keyword. Tone.Time can be passed\n\t *         into the parameter of any method which takes time as an argument. \n\t *  @constructor\n\t *  @extends {Tone.TimeBase}\n\t *  @param  {String|Number}  val    The time value.\n\t *  @param  {String=}  units  The units of the value.\n\t *  @example\n\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t * t.mult(4); // multiply that value by 4\n\t * t.toNotation(); //returns \"1m\"\n\t */",
		"meta": {
			"range": [
				729,
				1048
			],
			"filename": "Time.js",
			"lineno": 18,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065552",
				"name": "Tone.Time",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			},
			"vars": {
				"this._plusNow": "Tone.Time#_plusNow"
			}
		},
		"kind": "class",
		"classdesc": "Tone.Time is a primitive type for encoding Time values. \n        Eventually all time values are evaluated to seconds\n        using the `eval` method. Tone.Time can be constructed\n        with or without the `new` keyword. Tone.Time can be passed\n        into the parameter of any method which takes time as an argument.",
		"augments": [
			"Tone.TimeBase"
		],
		"params": [
			{
				"type": {
					"names": [
						"String",
						"Number"
					]
				},
				"description": "The time value.",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "The units of the value.",
				"name": "units"
			}
		],
		"examples": [
			"var t = Tone.Time(\"4n\");//encodes a quarter note\nt.mult(4); // multiply that value by 4\nt.toNotation(); //returns \"1m\""
		],
		"name": "Time",
		"longname": "Tone.Time",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Quantize the time by the given subdivision. Optionally add a\n\t *  percentage which will move the time value towards the ideal\n\t *  quantized value by that percentage. \n\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t *                                   towards the quantized value by\n\t *                                   a percentage.\n\t *  @return  {Tone.Time}  this\n\t *  @example\n\t * Tone.Time(21).quantize(2) //returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */",
		"meta": {
			"range": [
				2402,
				2848
			],
			"filename": "Time.js",
			"lineno": 82,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065677",
				"name": "Tone.Time.prototype.quantize",
				"type": "FunctionExpression",
				"paramnames": [
					"subdiv",
					"percent"
				]
			},
			"vars": {
				"percent": "Tone.Time#quantize~percent",
				"this._expr": "Tone.Time#_expr",
				"": null
			}
		},
		"description": "Quantize the time by the given subdivision. Optionally add a\n percentage which will move the time value towards the ideal\n quantized value by that percentage.",
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"Time"
					]
				},
				"description": "The subdivision to quantize to",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "Move the time value\n                                  towards the quantized value by\n                                  a percentage.",
				"name": "percent"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Time(21).quantize(2) //returns 22\nTone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55"
		],
		"name": "quantize",
		"longname": "Tone.Time#quantize",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Adds the clock time to the time expression at the \n\t *  moment of evaluation. \n\t *  @return  {Tone.Time}  this\n\t */",
		"meta": {
			"range": [
				2978,
				3060
			],
			"filename": "Time.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065764",
				"name": "Tone.Time.prototype.addNow",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._plusNow": "Tone.Time#_plusNow"
			}
		},
		"description": "Adds the clock time to the time expression at the \n moment of evaluation.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"description": "this"
			}
		],
		"name": "addNow",
		"longname": "Tone.Time#addNow",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Copies the value of time to this Time\n\t *  @param {Tone.Time} time\n\t *  @return  {Time}\n\t */",
		"meta": {
			"range": [
				3408,
				3550
			],
			"filename": "Time.js",
			"lineno": 121,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065804",
				"name": "Tone.Time.prototype.copy",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"this._plusNow": "Tone.Time#_plusNow"
			}
		},
		"description": "Copies the value of time to this Time",
		"params": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Time"
					]
				}
			}
		],
		"name": "copy",
		"longname": "Tone.Time#copy",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"overrides": "Tone.TimeBase#copy"
	},
	{
		"comment": "/**\n\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t *  @return {Notation} \n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t */",
		"meta": {
			"range": [
				3851,
				4505
			],
			"filename": "Time.js",
			"lineno": 136,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065839",
				"name": "Tone.Time.prototype.toNotation",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"time": "Tone.Time#toNotation~time",
				"testNotations": "Tone.Time#toNotation~testNotations",
				"retNotation": "Tone.Time#toNotation~retNotation",
				"testTripletNotations": "Tone.Time#toNotation~testTripletNotations",
				"retTripletNotation": "Tone.Time#toNotation~retTripletNotation"
			}
		},
		"description": "Convert a Time to Notation. Values will be thresholded to the nearest 128th note.",
		"returns": [
			{
				"type": {
					"names": [
						"Notation"
					]
				}
			}
		],
		"examples": [
			"//if the Transport is at 120bpm:\nTone.Time(2).toNotation();//returns \"1m\""
		],
		"name": "toNotation",
		"longname": "Tone.Time#toNotation",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t *  @return  {BarsBeatsSixteenths}\n\t */",
		"meta": {
			"range": [
				6276,
				6872
			],
			"filename": "Time.js",
			"lineno": 213,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066144",
				"name": "Tone.Time.prototype.toBarsBeatsSixteenths",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"quarterTime": "Tone.Time#toBarsBeatsSixteenths~quarterTime",
				"quarters": "Tone.Time#toBarsBeatsSixteenths~quarters",
				"measures": "Tone.Time#toBarsBeatsSixteenths~measures",
				"sixteenths": "Tone.Time#toBarsBeatsSixteenths~sixteenths",
				"progress": "Tone.Time#toBarsBeatsSixteenths~progress"
			}
		},
		"description": "Return the time encoded as Bars:Beats:Sixteenths.",
		"returns": [
			{
				"type": {
					"names": [
						"BarsBeatsSixteenths"
					]
				}
			}
		],
		"name": "toBarsBeatsSixteenths",
		"longname": "Tone.Time#toBarsBeatsSixteenths",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */",
		"meta": {
			"range": [
				6939,
				7125
			],
			"filename": "Time.js",
			"lineno": 232,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066245",
				"name": "Tone.Time.prototype.toTicks",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"quarterTime": "Tone.Time#toTicks~quarterTime",
				"quarters": "Tone.Time#toTicks~quarters"
			}
		},
		"description": "Return the time in ticks.",
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				}
			}
		],
		"name": "toTicks",
		"longname": "Tone.Time#toTicks",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toTicks"
	},
	{
		"comment": "/**\n\t *  Return the time in samples\n\t *  @return  {Samples}  \n\t */",
		"meta": {
			"range": [
				7197,
				7296
			],
			"filename": "Time.js",
			"lineno": 242,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066285",
				"name": "Tone.Time.prototype.toSamples",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in samples",
		"returns": [
			{
				"type": {
					"names": [
						"Samples"
					]
				}
			}
		],
		"name": "toSamples",
		"longname": "Tone.Time#toSamples",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the time as a frequency value\n\t *  @return  {Frequency} \n\t *  @example\n\t * Tone.Time(2).toFrequency(); //0.5\n\t */",
		"meta": {
			"range": [
				7431,
				7508
			],
			"filename": "Time.js",
			"lineno": 252,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066307",
				"name": "Tone.Time.prototype.toFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time as a frequency value",
		"returns": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				}
			}
		],
		"examples": [
			"Tone.Time(2).toFrequency(); //0.5"
		],
		"name": "toFrequency",
		"longname": "Tone.Time#toFrequency",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toFrequency"
	},
	{
		"comment": "/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds} \n\t */",
		"meta": {
			"range": [
				7580,
				7651
			],
			"filename": "Time.js",
			"lineno": 260,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066325",
				"name": "Tone.Time.prototype.toSeconds",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "toSeconds",
		"longname": "Tone.Time#toSeconds",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"overrides": "Tone.TimeBase#toSeconds"
	},
	{
		"comment": "/**\n\t *  Return the time in milliseconds.\n\t *  @return  {Milliseconds} \n\t */",
		"meta": {
			"range": [
				7733,
				7818
			],
			"filename": "Time.js",
			"lineno": 268,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066341",
				"name": "Tone.Time.prototype.toMilliseconds",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in milliseconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Milliseconds"
					]
				}
			}
		],
		"name": "toMilliseconds",
		"longname": "Tone.Time#toMilliseconds",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds} \n\t */",
		"meta": {
			"range": [
				7890,
				8005
			],
			"filename": "Time.js",
			"lineno": 276,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066359",
				"name": "Tone.Time.prototype.valueOf",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"val": "Tone.Time#valueOf~val"
			}
		},
		"description": "Return the time in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "valueOf",
		"longname": "Tone.Time#valueOf",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"overrides": "Tone.TimeBase#valueOf"
	},
	{
		"comment": "/**\n\t *  @class Tone.TimeBase is a flexible encoding of time\n\t *         which can be evaluated to and from a string.\n\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t *  @extends {Tone}\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @example\n\t * Tone.TimeBase(4, \"n\")\n\t * Tone.TimeBase(2, \"t\")\n\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t * Tone.TimeBase(\"2t + 1m\");\n\t */",
		"meta": {
			"range": [
				568,
				1332
			],
			"filename": "TimeBase.js",
			"lineno": 17,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066403",
				"name": "Tone.TimeBase",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr",
				"units": "Tone.TimeBase~units",
				"method": "Tone.TimeBase~method"
			}
		},
		"kind": "class",
		"classdesc": "Tone.TimeBase is a flexible encoding of time\n        which can be evaluated to and from a string.\n        Parsing code modified from https://code.google.com/p/tapdigit/\n        Copyright 2011 2012 Ariya Hidayat, New BSD License",
		"augments": [
			"Tone"
		],
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time value as a number or string",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Unit values",
				"name": "units"
			}
		],
		"examples": [
			"Tone.TimeBase(4, \"n\")\nTone.TimeBase(2, \"t\")\nTone.TimeBase(\"2t\").add(\"1m\")\nTone.TimeBase(\"2t + 1m\");"
		],
		"name": "TimeBase",
		"longname": "Tone.TimeBase",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Repalce the current time value with the value\n\t *  given by the expression string.\n\t *  @param  {String}  exprString\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				1532,
				1651
			],
			"filename": "TimeBase.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066531",
				"name": "Tone.TimeBase.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"exprString"
				]
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Repalce the current time value with the value\n given by the expression string.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"name": "exprString"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.TimeBase#set",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Return a clone of the TimeBase object.\n\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t */",
		"meta": {
			"range": [
				1768,
				1897
			],
			"filename": "TimeBase.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066555",
				"name": "Tone.TimeBase.prototype.clone",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"instance": "Tone.TimeBase#clone~instance"
			}
		},
		"description": "Return a clone of the TimeBase object.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "The new cloned Tone.TimeBase"
			}
		],
		"name": "clone",
		"longname": "Tone.TimeBase#clone",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Copies the value of time to this Time\n\t *  @param {Tone.TimeBase} time\n\t *  @return  {TimeBase}\n\t */",
		"meta": {
			"range": [
				2012,
				2111
			],
			"filename": "TimeBase.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066581",
				"name": "Tone.TimeBase.prototype.copy",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"val": "Tone.TimeBase#copy~val"
			}
		},
		"description": "Copies the value of time to this Time",
		"params": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"TimeBase"
					]
				}
			}
		],
		"name": "copy",
		"longname": "Tone.TimeBase#copy",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Add to the current value.\n\t *  @param  {Time}  val    The value to add\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t */",
		"meta": {
			"range": [
				11983,
				12079
			],
			"filename": "TimeBase.js",
			"lineno": 495,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067764",
				"name": "Tone.TimeBase.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Add to the current value.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to add",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
		],
		"name": "add",
		"longname": "Tone.TimeBase#add",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Subtract the value from the current time.\n\t *  @param  {Time}  val    The value to subtract\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t */",
		"meta": {
			"range": [
				12351,
				12447
			],
			"filename": "TimeBase.js",
			"lineno": 507,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067785",
				"name": "Tone.TimeBase.prototype.sub",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Subtract the value from the current time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to subtract",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
		],
		"name": "sub",
		"longname": "Tone.TimeBase#sub",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Multiply the current value by the given time.\n\t *  @param  {Time}  val    The value to multiply\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t */",
		"meta": {
			"range": [
				12723,
				12820
			],
			"filename": "TimeBase.js",
			"lineno": 519,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067806",
				"name": "Tone.TimeBase.prototype.mult",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Multiply the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to multiply",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
		],
		"name": "mult",
		"longname": "Tone.TimeBase#mult",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Divide the current value by the given time.\n\t *  @param  {Time}  val    The value to divide by\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t */",
		"meta": {
			"range": [
				13092,
				13188
			],
			"filename": "TimeBase.js",
			"lineno": 531,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067827",
				"name": "Tone.TimeBase.prototype.div",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Divide the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to divide by",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").div(2); //\"1m\""
		],
		"name": "div",
		"longname": "Tone.TimeBase#div",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Evaluate the time value. Returns the time\n\t *  in seconds.\n\t *  @return  {Seconds} \n\t */",
		"meta": {
			"range": [
				13291,
				13362
			],
			"filename": "TimeBase.js",
			"lineno": 540,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067848",
				"name": "Tone.TimeBase.prototype.valueOf",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Evaluate the time value. Returns the time\n in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "valueOf",
		"longname": "Tone.TimeBase#valueOf",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				13424,
				13493
			],
			"filename": "TimeBase.js",
			"lineno": 548,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067864",
				"name": "Tone.TimeBase.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.TimeBase#dispose",
		"kind": "function",
		"memberof": "Tone.TimeBase",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  @class Tone.TransportTime is a the time along the Transport's\n\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t *         against the AudioContext's clock, it is evaluated against\n\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t *  @constructor\n\t *  @param  {Time}  val    The time value as a number or string\n\t *  @param  {String=}  units  Unit values\n\t *  @extends {Tone.Time}\n\t */",
		"meta": {
			"range": [
				558,
				749
			],
			"filename": "TransportTime.js",
			"lineno": 13,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067896",
				"name": "Tone.TransportTime",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"kind": "class",
		"classdesc": "Tone.TransportTime is a the time along the Transport's\n        timeline. It is similar to Tone.Time, but instead of evaluating\n        against the AudioContext's clock, it is evaluated against\n        the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time value as a number or string",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Unit values",
				"name": "units"
			}
		],
		"augments": [
			"Tone.Time"
		],
		"name": "TransportTime",
		"longname": "Tone.TransportTime",
		"memberof": "Tone",
		"scope": "static"
	},
	{
		"comment": "/**\n\t *  Evaluate the time expression. Returns values in ticks\n\t *  @return {Ticks}\n\t */",
		"meta": {
			"range": [
				1810,
				1970
			],
			"filename": "TransportTime.js",
			"lineno": 60,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068048",
				"name": "Tone.TransportTime.prototype.valueOf",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"val": "Tone.TransportTime#valueOf~val"
			}
		},
		"description": "Evaluate the time expression. Returns values in ticks",
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				}
			}
		],
		"name": "valueOf",
		"longname": "Tone.TransportTime#valueOf",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"overrides": "Tone.Time#valueOf"
	},
	{
		"comment": "/**\n\t *  Return the time in ticks.\n\t *  @return  {Ticks}\n\t */",
		"meta": {
			"range": [
				2037,
				2115
			],
			"filename": "TransportTime.js",
			"lineno": 69,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068083",
				"name": "Tone.TransportTime.prototype.toTicks",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in ticks.",
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				}
			}
		],
		"name": "toTicks",
		"longname": "Tone.TransportTime#toTicks",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"overrides": "Tone.Time#toTicks"
	},
	{
		"comment": "/**\n\t *  Return the time in seconds.\n\t *  @return  {Seconds}\n\t */",
		"meta": {
			"range": [
				2186,
				2328
			],
			"filename": "TransportTime.js",
			"lineno": 77,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068099",
				"name": "Tone.TransportTime.prototype.toSeconds",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"val": "Tone.TransportTime#toSeconds~val"
			}
		},
		"description": "Return the time in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "toSeconds",
		"longname": "Tone.TransportTime#toSeconds",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"overrides": "Tone.Time#toSeconds"
	},
	{
		"comment": "/**\n\t *  Return the time as a frequency value\n\t *  @return  {Frequency} \n\t */",
		"meta": {
			"range": [
				2411,
				2497
			],
			"filename": "TransportTime.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068130",
				"name": "Tone.TransportTime.prototype.toFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time as a frequency value",
		"returns": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				}
			}
		],
		"name": "toFrequency",
		"longname": "Tone.TransportTime#toFrequency",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"overrides": "Tone.Time#toFrequency"
	},
	{
		"comment": "/**\n\t * Units which a value can take on.\n\t * @enum {String}\n\t */",
		"meta": {
			"range": [
				367,
				5159
			],
			"filename": "Type.js",
			"lineno": 12,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068166",
				"name": "Tone.Type",
				"type": "ObjectExpression",
				"value": "{\"Default\":\"number\",\"Time\":\"time\",\"Frequency\":\"frequency\",\"TransportTime\":\"transportTime\",\"Ticks\":\"ticks\",\"NormalRange\":\"normalRange\",\"AudioRange\":\"audioRange\",\"Decibels\":\"db\",\"Interval\":\"interval\",\"BPM\":\"bpm\",\"Positive\":\"positive\",\"Gain\":\"gain\",\"Cents\":\"cents\",\"Degrees\":\"degrees\",\"MIDI\":\"midi\",\"BarsBeatsSixteenths\":\"barsBeatsSixteenths\",\"Samples\":\"samples\",\"Hertz\":\"hertz\",\"Note\":\"note\",\"Milliseconds\":\"milliseconds\",\"Seconds\":\"seconds\",\"Notation\":\"notation\"}",
				"paramnames": []
			}
		},
		"description": "Units which a value can take on.",
		"kind": "member",
		"isEnum": true,
		"type": {
			"names": [
				"String"
			]
		},
		"name": "Type",
		"longname": "Tone.Type",
		"memberof": "Tone",
		"scope": "static",
		"properties": [
			{
				"comment": "/**\n\t\t *  Default units\n\t\t *  @typedef {Default}\n\t\t */",
				"meta": {
					"range": [
						440,
						458
					],
					"filename": "Type.js",
					"lineno": 17,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068171",
						"name": "Default",
						"type": "Literal",
						"value": "number"
					}
				},
				"description": "Default units",
				"kind": "typedef",
				"type": {
					"names": [
						"Default"
					]
				},
				"name": "Default",
				"longname": "Tone.Type.Default",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "number"
			},
			{
				"comment": "/**\n\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t *\n\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t *  \"the current time plus whatever expression follows\".\n\t\t *  * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t *  \"now\" (i.e. the currentTime).\n\t\t *\n\t\t *  @typedef {Time}\n\t\t */",
				"meta": {
					"range": [
						1440,
						1453
					],
					"filename": "Type.js",
					"lineno": 35,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068173",
						"name": "Time",
						"type": "Literal",
						"value": "time"
					}
				},
				"description": "Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\n * Numbers, which will be taken literally as the time (in seconds).\n * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n in the form BARS:QUARTERS:SIXTEENTHS.\n * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n \"the current time plus whatever expression follows\".\n * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n into a mathematical expression which will be evaluated to compute the desired time.\n * No Argument, for methods which accept time, no argument will be interpreted as\n \"now\" (i.e. the currentTime).",
				"kind": "typedef",
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "Time",
				"longname": "Tone.Type.Time",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "time"
			},
			{
				"comment": "/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t *  Time encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t *  frequency value.\n\t\t *  @typedef {Frequency}\n\t\t */",
				"meta": {
					"range": [
						1861,
						1884
					],
					"filename": "Type.js",
					"lineno": 45,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068175",
						"name": "Frequency",
						"type": "Literal",
						"value": "frequency"
					}
				},
				"description": "Frequency can be described similar to time, except ultimately the\n values are converted to frequency instead of seconds. A number\n is taken literally as the value in hertz. Additionally any of the\n Time encodings can be used. Note names in the form\n of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n frequency value.",
				"kind": "typedef",
				"type": {
					"names": [
						"Frequency"
					]
				},
				"name": "Frequency",
				"longname": "Tone.Type.Frequency",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "frequency"
			},
			{
				"comment": "/**\n\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t *  @typedef {TransportTime}\n\t\t */",
				"meta": {
					"range": [
						2274,
						2305
					],
					"filename": "Type.js",
					"lineno": 53,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068177",
						"name": "TransportTime",
						"type": "Literal",
						"value": "transportTime"
					}
				},
				"description": "TransportTime describes a position along the Transport's timeline. It is\n similar to Time in that it uses all the same encodings, but TransportTime specifically\n pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)",
				"kind": "typedef",
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"name": "TransportTime",
				"longname": "Tone.Type.TransportTime",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "transportTime"
			},
			{
				"comment": "/**\n\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t *  the smallest unit of time that the Transport supports.\n\t\t *  @typedef {Ticks}\n\t\t */",
				"meta": {
					"range": [
						2466,
						2481
					],
					"filename": "Type.js",
					"lineno": 59,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068179",
						"name": "Ticks",
						"type": "Literal",
						"value": "ticks"
					}
				},
				"description": "Ticks are the basic subunit of the Transport. They are\n the smallest unit of time that the Transport supports.",
				"kind": "typedef",
				"type": {
					"names": [
						"Ticks"
					]
				},
				"name": "Ticks",
				"longname": "Tone.Type.Ticks",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "ticks"
			},
			{
				"comment": "/**\n\t\t *  Normal values are within the range [0, 1].\n\t\t *  @typedef {NormalRange}\n\t\t */",
				"meta": {
					"range": [
						2575,
						2602
					],
					"filename": "Type.js",
					"lineno": 64,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068181",
						"name": "NormalRange",
						"type": "Literal",
						"value": "normalRange"
					}
				},
				"description": "Normal values are within the range [0, 1].",
				"kind": "typedef",
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"name": "NormalRange",
				"longname": "Tone.Type.NormalRange",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "normalRange"
			},
			{
				"comment": "/**\n\t\t *  AudioRange values are between [-1, 1].\n\t\t *  @typedef {AudioRange}\n\t\t */",
				"meta": {
					"range": [
						2691,
						2716
					],
					"filename": "Type.js",
					"lineno": 69,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068183",
						"name": "AudioRange",
						"type": "Literal",
						"value": "audioRange"
					}
				},
				"description": "AudioRange values are between [-1, 1].",
				"kind": "typedef",
				"type": {
					"names": [
						"AudioRange"
					]
				},
				"name": "AudioRange",
				"longname": "Tone.Type.AudioRange",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "audioRange"
			},
			{
				"comment": "/**\n\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t *  is twice is loud.\n\t\t *  @typedef {Decibels}\n\t\t */",
				"meta": {
					"range": [
						3015,
						3030
					],
					"filename": "Type.js",
					"lineno": 77,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068185",
						"name": "Decibels",
						"type": "Literal",
						"value": "db"
					}
				},
				"description": "Decibels are a logarithmic unit of measurement which is useful for volume\n because of the logarithmic way that we perceive loudness. 0 decibels\n means no change in volume. -10db is approximately half as loud and 10db\n is twice is loud.",
				"kind": "typedef",
				"type": {
					"names": [
						"Decibels"
					]
				},
				"name": "Decibels",
				"longname": "Tone.Type.Decibels",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "db"
			},
			{
				"comment": "/**\n\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t *  @typedef {Interval}\n\t\t */",
				"meta": {
					"range": [
						3167,
						3188
					],
					"filename": "Type.js",
					"lineno": 82,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068187",
						"name": "Interval",
						"type": "Literal",
						"value": "interval"
					}
				},
				"description": "Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.",
				"kind": "typedef",
				"type": {
					"names": [
						"Interval"
					]
				},
				"name": "Interval",
				"longname": "Tone.Type.Interval",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "interval"
			},
			{
				"comment": "/**\n\t\t *  Beats per minute.\n\t\t *  @typedef {BPM}\n\t\t */",
				"meta": {
					"range": [
						3249,
						3260
					],
					"filename": "Type.js",
					"lineno": 87,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068189",
						"name": "BPM",
						"type": "Literal",
						"value": "bpm"
					}
				},
				"description": "Beats per minute.",
				"kind": "typedef",
				"type": {
					"names": [
						"BPM"
					]
				},
				"name": "BPM",
				"longname": "Tone.Type.BPM",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "bpm"
			},
			{
				"comment": "/**\n\t\t *  The value must be greater than or equal to 0.\n\t\t *  @typedef {Positive}\n\t\t */",
				"meta": {
					"range": [
						3354,
						3375
					],
					"filename": "Type.js",
					"lineno": 92,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068191",
						"name": "Positive",
						"type": "Literal",
						"value": "positive"
					}
				},
				"description": "The value must be greater than or equal to 0.",
				"kind": "typedef",
				"type": {
					"names": [
						"Positive"
					]
				},
				"name": "Positive",
				"longname": "Tone.Type.Positive",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "positive"
			},
			{
				"comment": "/**\n\t\t *  Gain is the ratio between input and output of a signal.\n\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t *  1, causes no change to the incoming signal.\n\t\t *  @typedef {Gain}\n\t\t */",
				"meta": {
					"range": [
						3590,
						3603
					],
					"filename": "Type.js",
					"lineno": 99,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068193",
						"name": "Gain",
						"type": "Literal",
						"value": "gain"
					}
				},
				"description": "Gain is the ratio between input and output of a signal.\n A gain of 0 is the same as silencing the signal. A gain of\n 1, causes no change to the incoming signal.",
				"kind": "typedef",
				"type": {
					"names": [
						"Gain"
					]
				},
				"name": "Gain",
				"longname": "Tone.Type.Gain",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "gain"
			},
			{
				"comment": "/**\n\t\t *  A cent is a hundredth of a semitone.\n\t\t *  @typedef {Cents}\n\t\t */",
				"meta": {
					"range": [
						3685,
						3700
					],
					"filename": "Type.js",
					"lineno": 104,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068195",
						"name": "Cents",
						"type": "Literal",
						"value": "cents"
					}
				},
				"description": "A cent is a hundredth of a semitone.",
				"kind": "typedef",
				"type": {
					"names": [
						"Cents"
					]
				},
				"name": "Cents",
				"longname": "Tone.Type.Cents",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "cents"
			},
			{
				"comment": "/**\n\t\t *  Angle between 0 and 360.\n\t\t *  @typedef {Degrees}\n\t\t */",
				"meta": {
					"range": [
						3772,
						3791
					],
					"filename": "Type.js",
					"lineno": 109,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068197",
						"name": "Degrees",
						"type": "Literal",
						"value": "degrees"
					}
				},
				"description": "Angle between 0 and 360.",
				"kind": "typedef",
				"type": {
					"names": [
						"Degrees"
					]
				},
				"name": "Degrees",
				"longname": "Tone.Type.Degrees",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "degrees"
			},
			{
				"comment": "/**\n\t\t *  A number representing a midi note.\n\t\t *  @typedef {MIDI}\n\t\t */",
				"meta": {
					"range": [
						3870,
						3883
					],
					"filename": "Type.js",
					"lineno": 114,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068199",
						"name": "MIDI",
						"type": "Literal",
						"value": "midi"
					}
				},
				"description": "A number representing a midi note.",
				"kind": "typedef",
				"type": {
					"names": [
						"MIDI"
					]
				},
				"name": "MIDI",
				"longname": "Tone.Type.MIDI",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "midi"
			},
			{
				"comment": "/**\n\t\t *  A colon-separated representation of time in the form of\n\t\t *  Bars:Beats:Sixteenths.\n\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t */",
				"meta": {
					"range": [
						4027,
						4070
					],
					"filename": "Type.js",
					"lineno": 120,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068201",
						"name": "BarsBeatsSixteenths",
						"type": "Literal",
						"value": "barsBeatsSixteenths"
					}
				},
				"description": "A colon-separated representation of time in the form of\n Bars:Beats:Sixteenths.",
				"kind": "typedef",
				"type": {
					"names": [
						"BarsBeatsSixteenths"
					]
				},
				"name": "BarsBeatsSixteenths",
				"longname": "Tone.Type.BarsBeatsSixteenths",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "barsBeatsSixteenths"
			},
			{
				"comment": "/**\n\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t *  Audio is typically sampled 44100 times per second.\n\t\t *  @typedef {Samples}\n\t\t */",
				"meta": {
					"range": [
						4245,
						4264
					],
					"filename": "Type.js",
					"lineno": 126,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068203",
						"name": "Samples",
						"type": "Literal",
						"value": "samples"
					}
				},
				"description": "Sampling is the reduction of a continuous signal to a discrete signal.\n Audio is typically sampled 44100 times per second.",
				"kind": "typedef",
				"type": {
					"names": [
						"Samples"
					]
				},
				"name": "Samples",
				"longname": "Tone.Type.Samples",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "samples"
			},
			{
				"comment": "/**\n\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t *  @typedef {Hertz}\n\t\t */",
				"meta": {
					"range": [
						4379,
						4394
					],
					"filename": "Type.js",
					"lineno": 131,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068205",
						"name": "Hertz",
						"type": "Literal",
						"value": "hertz"
					}
				},
				"description": "Hertz are a frequency representation defined as one cycle per second.",
				"kind": "typedef",
				"type": {
					"names": [
						"Hertz"
					]
				},
				"name": "Hertz",
				"longname": "Tone.Type.Hertz",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "hertz"
			},
			{
				"comment": "/**\n\t\t *  A frequency represented by a letter name,\n\t\t *  accidental and octave. This system is known as\n\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t *  @typedef {Note}\n\t\t */",
				"meta": {
					"range": [
						4625,
						4638
					],
					"filename": "Type.js",
					"lineno": 138,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068207",
						"name": "Note",
						"type": "Literal",
						"value": "note"
					}
				},
				"description": "A frequency represented by a letter name,\n accidental and octave. This system is known as\n [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).",
				"kind": "typedef",
				"type": {
					"names": [
						"Note"
					]
				},
				"name": "Note",
				"longname": "Tone.Type.Note",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "note"
			},
			{
				"comment": "/**\n\t\t *  One millisecond is a thousandth of a second.\n\t\t *  @typedef {Milliseconds}\n\t\t */",
				"meta": {
					"range": [
						4735,
						4764
					],
					"filename": "Type.js",
					"lineno": 143,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068209",
						"name": "Milliseconds",
						"type": "Literal",
						"value": "milliseconds"
					}
				},
				"description": "One millisecond is a thousandth of a second.",
				"kind": "typedef",
				"type": {
					"names": [
						"Milliseconds"
					]
				},
				"name": "Milliseconds",
				"longname": "Tone.Type.Milliseconds",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "milliseconds"
			},
			{
				"comment": "/**\n\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t *  all values need to be evaluated to seconds.\n\t\t *  @typedef {Seconds}\n\t\t */",
				"meta": {
					"range": [
						4920,
						4939
					],
					"filename": "Type.js",
					"lineno": 149,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068211",
						"name": "Seconds",
						"type": "Literal",
						"value": "seconds"
					}
				},
				"description": "Seconds are the time unit of the AudioContext. In the end,\n all values need to be evaluated to seconds.",
				"kind": "typedef",
				"type": {
					"names": [
						"Seconds"
					]
				},
				"name": "Seconds",
				"longname": "Tone.Type.Seconds",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "seconds"
			},
			{
				"comment": "/**\n\t\t *  A string representing a duration relative to a measure.\n\t\t *  * \"4n\" = quarter note\n\t\t *  * \"2m\" = two measures\n\t\t *  * \"8t\" = eighth-note triplet\n\t\t *  @typedef {Notation}\n\t\t */",
				"meta": {
					"range": [
						5134,
						5155
					],
					"filename": "Type.js",
					"lineno": 157,
					"columnno": 2,
					"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
					"code": {
						"id": "astnode100068213",
						"name": "Notation",
						"type": "Literal",
						"value": "notation"
					}
				},
				"description": "A string representing a duration relative to a measure.\n * \"4n\" = quarter note\n * \"2m\" = two measures\n * \"8t\" = eighth-note triplet",
				"kind": "typedef",
				"type": {
					"names": [
						"Notation"
					]
				},
				"name": "Notation",
				"longname": "Tone.Type.Notation",
				"memberof": "Tone.Type",
				"scope": "static",
				"defaultvalue": "notation"
			}
		]
	},
	{
		"comment": "/**\n\t\t *  Default units\n\t\t *  @typedef {Default}\n\t\t */",
		"meta": {
			"range": [
				440,
				458
			],
			"filename": "Type.js",
			"lineno": 17,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068171",
				"name": "Default",
				"type": "Literal",
				"value": "number"
			}
		},
		"description": "Default units",
		"kind": "typedef",
		"type": {
			"names": [
				"Default"
			]
		},
		"name": "Default",
		"longname": "Tone.Type.Default",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "number"
	},
	{
		"comment": "/**\n\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t *\n\t\t *  * Numbers, which will be taken literally as the time (in seconds).\n\t\t *  * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n\t\t *  * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.\n\t\t *  * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n\t\t *  * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n\t\t *  \"the current time plus whatever expression follows\".\n\t\t *  * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n\t\t *  into a mathematical expression which will be evaluated to compute the desired time.\n\t\t *  * No Argument, for methods which accept time, no argument will be interpreted as\n\t\t *  \"now\" (i.e. the currentTime).\n\t\t *\n\t\t *  @typedef {Time}\n\t\t */",
		"meta": {
			"range": [
				1440,
				1453
			],
			"filename": "Type.js",
			"lineno": 35,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068173",
				"name": "Time",
				"type": "Literal",
				"value": "time"
			}
		},
		"description": "Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\n * Numbers, which will be taken literally as the time (in seconds).\n * Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.\n * TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times\n in the form BARS:QUARTERS:SIXTEENTHS.\n * Frequency, (\"8hz\") is converted to the length of the cycle in seconds.\n * Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as\n \"the current time plus whatever expression follows\".\n * Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined\n into a mathematical expression which will be evaluated to compute the desired time.\n * No Argument, for methods which accept time, no argument will be interpreted as\n \"now\" (i.e. the currentTime).",
		"kind": "typedef",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "Time",
		"longname": "Tone.Type.Time",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "time"
	},
	{
		"comment": "/**\n\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t *  values are converted to frequency instead of seconds. A number\n\t\t *  is taken literally as the value in hertz. Additionally any of the\n\t\t *  Time encodings can be used. Note names in the form\n\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t *  frequency value.\n\t\t *  @typedef {Frequency}\n\t\t */",
		"meta": {
			"range": [
				1861,
				1884
			],
			"filename": "Type.js",
			"lineno": 45,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068175",
				"name": "Frequency",
				"type": "Literal",
				"value": "frequency"
			}
		},
		"description": "Frequency can be described similar to time, except ultimately the\n values are converted to frequency instead of seconds. A number\n is taken literally as the value in hertz. Additionally any of the\n Time encodings can be used. Note names in the form\n of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n frequency value.",
		"kind": "typedef",
		"type": {
			"names": [
				"Frequency"
			]
		},
		"name": "Frequency",
		"longname": "Tone.Type.Frequency",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "frequency"
	},
	{
		"comment": "/**\n\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t *  @typedef {TransportTime}\n\t\t */",
		"meta": {
			"range": [
				2274,
				2305
			],
			"filename": "Type.js",
			"lineno": 53,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068177",
				"name": "TransportTime",
				"type": "Literal",
				"value": "transportTime"
			}
		},
		"description": "TransportTime describes a position along the Transport's timeline. It is\n similar to Time in that it uses all the same encodings, but TransportTime specifically\n pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.\n [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)",
		"kind": "typedef",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "TransportTime",
		"longname": "Tone.Type.TransportTime",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "transportTime"
	},
	{
		"comment": "/**\n\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t *  the smallest unit of time that the Transport supports.\n\t\t *  @typedef {Ticks}\n\t\t */",
		"meta": {
			"range": [
				2466,
				2481
			],
			"filename": "Type.js",
			"lineno": 59,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068179",
				"name": "Ticks",
				"type": "Literal",
				"value": "ticks"
			}
		},
		"description": "Ticks are the basic subunit of the Transport. They are\n the smallest unit of time that the Transport supports.",
		"kind": "typedef",
		"type": {
			"names": [
				"Ticks"
			]
		},
		"name": "Ticks",
		"longname": "Tone.Type.Ticks",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "ticks"
	},
	{
		"comment": "/**\n\t\t *  Normal values are within the range [0, 1].\n\t\t *  @typedef {NormalRange}\n\t\t */",
		"meta": {
			"range": [
				2575,
				2602
			],
			"filename": "Type.js",
			"lineno": 64,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068181",
				"name": "NormalRange",
				"type": "Literal",
				"value": "normalRange"
			}
		},
		"description": "Normal values are within the range [0, 1].",
		"kind": "typedef",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "NormalRange",
		"longname": "Tone.Type.NormalRange",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "normalRange"
	},
	{
		"comment": "/**\n\t\t *  AudioRange values are between [-1, 1].\n\t\t *  @typedef {AudioRange}\n\t\t */",
		"meta": {
			"range": [
				2691,
				2716
			],
			"filename": "Type.js",
			"lineno": 69,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068183",
				"name": "AudioRange",
				"type": "Literal",
				"value": "audioRange"
			}
		},
		"description": "AudioRange values are between [-1, 1].",
		"kind": "typedef",
		"type": {
			"names": [
				"AudioRange"
			]
		},
		"name": "AudioRange",
		"longname": "Tone.Type.AudioRange",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "audioRange"
	},
	{
		"comment": "/**\n\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels\n\t\t *  means no change in volume. -10db is approximately half as loud and 10db\n\t\t *  is twice is loud.\n\t\t *  @typedef {Decibels}\n\t\t */",
		"meta": {
			"range": [
				3015,
				3030
			],
			"filename": "Type.js",
			"lineno": 77,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068185",
				"name": "Decibels",
				"type": "Literal",
				"value": "db"
			}
		},
		"description": "Decibels are a logarithmic unit of measurement which is useful for volume\n because of the logarithmic way that we perceive loudness. 0 decibels\n means no change in volume. -10db is approximately half as loud and 10db\n is twice is loud.",
		"kind": "typedef",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"name": "Decibels",
		"longname": "Tone.Type.Decibels",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "db"
	},
	{
		"comment": "/**\n\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t *  @typedef {Interval}\n\t\t */",
		"meta": {
			"range": [
				3167,
				3188
			],
			"filename": "Type.js",
			"lineno": 82,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068187",
				"name": "Interval",
				"type": "Literal",
				"value": "interval"
			}
		},
		"description": "Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.",
		"kind": "typedef",
		"type": {
			"names": [
				"Interval"
			]
		},
		"name": "Interval",
		"longname": "Tone.Type.Interval",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "interval"
	},
	{
		"comment": "/**\n\t\t *  Beats per minute.\n\t\t *  @typedef {BPM}\n\t\t */",
		"meta": {
			"range": [
				3249,
				3260
			],
			"filename": "Type.js",
			"lineno": 87,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068189",
				"name": "BPM",
				"type": "Literal",
				"value": "bpm"
			}
		},
		"description": "Beats per minute.",
		"kind": "typedef",
		"type": {
			"names": [
				"BPM"
			]
		},
		"name": "BPM",
		"longname": "Tone.Type.BPM",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "bpm"
	},
	{
		"comment": "/**\n\t\t *  The value must be greater than or equal to 0.\n\t\t *  @typedef {Positive}\n\t\t */",
		"meta": {
			"range": [
				3354,
				3375
			],
			"filename": "Type.js",
			"lineno": 92,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068191",
				"name": "Positive",
				"type": "Literal",
				"value": "positive"
			}
		},
		"description": "The value must be greater than or equal to 0.",
		"kind": "typedef",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "Positive",
		"longname": "Tone.Type.Positive",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "positive"
	},
	{
		"comment": "/**\n\t\t *  Gain is the ratio between input and output of a signal.\n\t\t *  A gain of 0 is the same as silencing the signal. A gain of\n\t\t *  1, causes no change to the incoming signal.\n\t\t *  @typedef {Gain}\n\t\t */",
		"meta": {
			"range": [
				3590,
				3603
			],
			"filename": "Type.js",
			"lineno": 99,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068193",
				"name": "Gain",
				"type": "Literal",
				"value": "gain"
			}
		},
		"description": "Gain is the ratio between input and output of a signal.\n A gain of 0 is the same as silencing the signal. A gain of\n 1, causes no change to the incoming signal.",
		"kind": "typedef",
		"type": {
			"names": [
				"Gain"
			]
		},
		"name": "Gain",
		"longname": "Tone.Type.Gain",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "gain"
	},
	{
		"comment": "/**\n\t\t *  A cent is a hundredth of a semitone.\n\t\t *  @typedef {Cents}\n\t\t */",
		"meta": {
			"range": [
				3685,
				3700
			],
			"filename": "Type.js",
			"lineno": 104,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068195",
				"name": "Cents",
				"type": "Literal",
				"value": "cents"
			}
		},
		"description": "A cent is a hundredth of a semitone.",
		"kind": "typedef",
		"type": {
			"names": [
				"Cents"
			]
		},
		"name": "Cents",
		"longname": "Tone.Type.Cents",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "cents"
	},
	{
		"comment": "/**\n\t\t *  Angle between 0 and 360.\n\t\t *  @typedef {Degrees}\n\t\t */",
		"meta": {
			"range": [
				3772,
				3791
			],
			"filename": "Type.js",
			"lineno": 109,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068197",
				"name": "Degrees",
				"type": "Literal",
				"value": "degrees"
			}
		},
		"description": "Angle between 0 and 360.",
		"kind": "typedef",
		"type": {
			"names": [
				"Degrees"
			]
		},
		"name": "Degrees",
		"longname": "Tone.Type.Degrees",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "degrees"
	},
	{
		"comment": "/**\n\t\t *  A number representing a midi note.\n\t\t *  @typedef {MIDI}\n\t\t */",
		"meta": {
			"range": [
				3870,
				3883
			],
			"filename": "Type.js",
			"lineno": 114,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068199",
				"name": "MIDI",
				"type": "Literal",
				"value": "midi"
			}
		},
		"description": "A number representing a midi note.",
		"kind": "typedef",
		"type": {
			"names": [
				"MIDI"
			]
		},
		"name": "MIDI",
		"longname": "Tone.Type.MIDI",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "midi"
	},
	{
		"comment": "/**\n\t\t *  A colon-separated representation of time in the form of\n\t\t *  Bars:Beats:Sixteenths.\n\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t */",
		"meta": {
			"range": [
				4027,
				4070
			],
			"filename": "Type.js",
			"lineno": 120,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068201",
				"name": "BarsBeatsSixteenths",
				"type": "Literal",
				"value": "barsBeatsSixteenths"
			}
		},
		"description": "A colon-separated representation of time in the form of\n Bars:Beats:Sixteenths.",
		"kind": "typedef",
		"type": {
			"names": [
				"BarsBeatsSixteenths"
			]
		},
		"name": "BarsBeatsSixteenths",
		"longname": "Tone.Type.BarsBeatsSixteenths",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "barsBeatsSixteenths"
	},
	{
		"comment": "/**\n\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t *  Audio is typically sampled 44100 times per second.\n\t\t *  @typedef {Samples}\n\t\t */",
		"meta": {
			"range": [
				4245,
				4264
			],
			"filename": "Type.js",
			"lineno": 126,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068203",
				"name": "Samples",
				"type": "Literal",
				"value": "samples"
			}
		},
		"description": "Sampling is the reduction of a continuous signal to a discrete signal.\n Audio is typically sampled 44100 times per second.",
		"kind": "typedef",
		"type": {
			"names": [
				"Samples"
			]
		},
		"name": "Samples",
		"longname": "Tone.Type.Samples",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "samples"
	},
	{
		"comment": "/**\n\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t *  @typedef {Hertz}\n\t\t */",
		"meta": {
			"range": [
				4379,
				4394
			],
			"filename": "Type.js",
			"lineno": 131,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068205",
				"name": "Hertz",
				"type": "Literal",
				"value": "hertz"
			}
		},
		"description": "Hertz are a frequency representation defined as one cycle per second.",
		"kind": "typedef",
		"type": {
			"names": [
				"Hertz"
			]
		},
		"name": "Hertz",
		"longname": "Tone.Type.Hertz",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "hertz"
	},
	{
		"comment": "/**\n\t\t *  A frequency represented by a letter name,\n\t\t *  accidental and octave. This system is known as\n\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t *  @typedef {Note}\n\t\t */",
		"meta": {
			"range": [
				4625,
				4638
			],
			"filename": "Type.js",
			"lineno": 138,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068207",
				"name": "Note",
				"type": "Literal",
				"value": "note"
			}
		},
		"description": "A frequency represented by a letter name,\n accidental and octave. This system is known as\n [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).",
		"kind": "typedef",
		"type": {
			"names": [
				"Note"
			]
		},
		"name": "Note",
		"longname": "Tone.Type.Note",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "note"
	},
	{
		"comment": "/**\n\t\t *  One millisecond is a thousandth of a second.\n\t\t *  @typedef {Milliseconds}\n\t\t */",
		"meta": {
			"range": [
				4735,
				4764
			],
			"filename": "Type.js",
			"lineno": 143,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068209",
				"name": "Milliseconds",
				"type": "Literal",
				"value": "milliseconds"
			}
		},
		"description": "One millisecond is a thousandth of a second.",
		"kind": "typedef",
		"type": {
			"names": [
				"Milliseconds"
			]
		},
		"name": "Milliseconds",
		"longname": "Tone.Type.Milliseconds",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "milliseconds"
	},
	{
		"comment": "/**\n\t\t *  Seconds are the time unit of the AudioContext. In the end,\n\t\t *  all values need to be evaluated to seconds.\n\t\t *  @typedef {Seconds}\n\t\t */",
		"meta": {
			"range": [
				4920,
				4939
			],
			"filename": "Type.js",
			"lineno": 149,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068211",
				"name": "Seconds",
				"type": "Literal",
				"value": "seconds"
			}
		},
		"description": "Seconds are the time unit of the AudioContext. In the end,\n all values need to be evaluated to seconds.",
		"kind": "typedef",
		"type": {
			"names": [
				"Seconds"
			]
		},
		"name": "Seconds",
		"longname": "Tone.Type.Seconds",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "seconds"
	},
	{
		"comment": "/**\n\t\t *  A string representing a duration relative to a measure.\n\t\t *  * \"4n\" = quarter note\n\t\t *  * \"2m\" = two measures\n\t\t *  * \"8t\" = eighth-note triplet\n\t\t *  @typedef {Notation}\n\t\t */",
		"meta": {
			"range": [
				5134,
				5155
			],
			"filename": "Type.js",
			"lineno": 157,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068213",
				"name": "Notation",
				"type": "Literal",
				"value": "notation"
			}
		},
		"description": "A string representing a duration relative to a measure.\n * \"4n\" = quarter note\n * \"2m\" = two measures\n * \"8t\" = eighth-note triplet",
		"kind": "typedef",
		"type": {
			"names": [
				"Notation"
			]
		},
		"name": "Notation",
		"longname": "Tone.Type.Notation",
		"memberof": "Tone.Type",
		"scope": "static",
		"defaultvalue": "notation"
	},
	{
		"comment": "/**\n\t *  Convert Time into seconds.\n\t *\n\t *  Unlike the method which it overrides, this takes into account\n\t *  transporttime and musical notation.\n\t *\n\t *  Time : 1.40\n\t *  Notation: 4n or 1m or 2t\n\t *  Now Relative: +3n\n\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t *\n\t *  @param  {Time} time\n\t *  @return {Seconds}\n\t */",
		"meta": {
			"range": [
				5692,
				5994
			],
			"filename": "Type.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068216",
				"name": "Tone.prototype.toSeconds",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Convert Time into seconds.\n\n Unlike the method which it overrides, this takes into account\n transporttime and musical notation.\n\n Time : 1.40\n Notation: 4n or 1m or 2t\n Now Relative: +3n\n Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "toSeconds",
		"longname": "Tone#toSeconds",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Convert a frequency representation into a number.\n\t *  @param  {Frequency} freq\n\t *  @return {Hertz}      the frequency in hertz\n\t */",
		"meta": {
			"range": [
				6142,
				6417
			],
			"filename": "Type.js",
			"lineno": 195,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068275",
				"name": "Tone.prototype.toFrequency",
				"type": "FunctionExpression",
				"paramnames": [
					"freq"
				]
			}
		},
		"description": "Convert a frequency representation into a number.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"name": "freq"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Hertz"
					]
				},
				"description": "the frequency in hertz"
			}
		],
		"name": "toFrequency",
		"longname": "Tone#toFrequency",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"comment": "/**\n\t *  Convert a time representation into ticks.\n\t *  @param  {Time} time\n\t *  @return {Ticks}  the time in ticks\n\t */",
		"meta": {
			"range": [
				6543,
				6830
			],
			"filename": "Type.js",
			"lineno": 210,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100068328",
				"name": "Tone.prototype.toTicks",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Convert a time representation into ticks.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Ticks"
					]
				},
				"description": "the time in ticks"
			}
		],
		"name": "toTicks",
		"longname": "Tone#toTicks",
		"kind": "function",
		"memberof": "Tone",
		"scope": "instance"
	},
	{
		"kind": "package",
		"longname": "package:undefined",
		"files": [
			"/home/travis/build/Tonejs/Tone.js/Tone/component/AmplitudeEnvelope.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Analyser.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Compressor.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/CrossFade.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Envelope.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/EQ3.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/FeedbackCombFilter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Filter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Follower.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/FrequencyEnvelope.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Gate.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/LFO.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Limiter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/LowpassCombFilter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Merge.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Meter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/MidSideCompressor.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/MidSideMerge.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/MidSideSplit.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Mono.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/MultibandCompressor.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/MultibandSplit.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Panner.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Panner3D.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/PanVol.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/ScaledEnvelope.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Solo.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Split.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/component/Volume.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/control/CtrlInterpolate.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/control/CtrlMarkov.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/control/CtrlPattern.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/control/CtrlRandom.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Buffer.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Buffers.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Bus.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Clock.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Context.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Delay.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Draw.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Emitter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Gain.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/IntervalTimeline.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Listener.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Master.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Offline.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/OfflineContext.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Param.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Timeline.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/TimelineState.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Tone.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/core/Transport.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/AutoFilter.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/AutoPanner.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/AutoWah.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/BitCrusher.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Chebyshev.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Chorus.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Convolver.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Distortion.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Effect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/FeedbackDelay.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/FeedbackEffect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Freeverb.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/JCReverb.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/MidSideEffect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Phaser.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/PingPongDelay.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/PitchShift.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/StereoEffect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/StereoFeedbackEffect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/StereoWidener.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/StereoXFeedbackEffect.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Tremolo.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/effect/Vibrato.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/event/Event.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/event/Loop.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/event/Part.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/event/Pattern.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/event/Sequence.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/AMSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/DuoSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/FMSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/Instrument.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/MembraneSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/MetalSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/Monophonic.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/MonoSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/NoiseSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/PluckSynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/PolySynth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/Sampler.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/instrument/Synth.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Abs.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Add.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/AudioToGain.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/EqualPowerGain.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Expr.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/GainToAudio.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/GreaterThan.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/GreaterThanZero.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Modulo.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Multiply.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Negate.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Normalize.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Pow.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Scale.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/ScaleExp.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Signal.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/SignalBase.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Subtract.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/TickSignal.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/TimelineSignal.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/WaveShaper.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/signal/Zero.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/AMOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/BufferSource.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/FatOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/FMOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/GrainPlayer.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/MultiPlayer.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/Noise.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/OmniOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/Oscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/Player.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/Players.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/PulseOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/PWMOscillator.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/Source.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/source/UserMedia.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/type/Frequency.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/type/Time.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/type/TimeBase.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/type/TransportTime.js",
			"/home/travis/build/Tonejs/Tone.js/Tone/type/Type.js"
		]
	},
	{
		"comment": "/** \n\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1662,
				1690
			],
			"filename": "Envelope.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001189",
				"name": "this.attack",
				"type": "MemberExpression",
				"value": "options.attack",
				"paramnames": []
			}
		},
		"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.AmplitudeEnvelope#attack",
		"kind": "member",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#attack",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After the attack portion of the envelope, the value will fall\n\t\t *  over the duration of the decay time to it's sustain value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1860,
				1886
			],
			"filename": "Envelope.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001197",
				"name": "this.decay",
				"type": "MemberExpression",
				"value": "options.decay",
				"paramnames": []
			}
		},
		"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "decay",
		"longname": "Tone.AmplitudeEnvelope#decay",
		"kind": "member",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#decay",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * \tThe sustain value is the value \n\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t *  @type {NormalRange}\n\t\t */",
		"meta": {
			"range": [
				2079,
				2109
			],
			"filename": "Envelope.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001205",
				"name": "this.sustain",
				"type": "MemberExpression",
				"value": "options.sustain",
				"paramnames": []
			}
		},
		"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "sustain",
		"longname": "Tone.AmplitudeEnvelope#sustain",
		"kind": "member",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#sustain",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After triggerRelease is called, the envelope's\n\t\t *  value will fall to it's miminum value over the\n\t\t *  duration of the release time. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2288,
				2318
			],
			"filename": "Envelope.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001213",
				"name": "this.release",
				"type": "MemberExpression",
				"value": "options.release",
				"paramnames": []
			}
		},
		"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.AmplitudeEnvelope#release",
		"kind": "member",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#release",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Read the current value of the envelope. Useful for \n\t * syncronizing visual output to the envelope. \n\t * @memberOf Tone.Envelope#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
		"memberof": "Tone.AmplitudeEnvelope",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.AmplitudeEnvelope#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the attack. \n\t * Can be any of these strings:\n\t * <ul>\n\t *   <li>linear</li>\n\t *   <li>exponential</li>\n\t *   <li>sine</li>\n\t *   <li>cosine</li>\n\t *   <li>bounce</li>\n\t *   <li>ripple</li>\n\t *   <li>step</li>\n\t * </ul>\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 125,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>cosine</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
		"memberof": "Tone.AmplitudeEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "attackCurve",
		"examples": [
			"env.attackCurve = \"linear\";",
			"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
		],
		"longname": "Tone.AmplitudeEnvelope#attackCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#attackCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the release. See the attack curve types. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the release. See the attack curve types.",
		"memberof": "Tone.AmplitudeEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "releaseCurve",
		"examples": [
			"env.releaseCurve = \"linear\";"
		],
		"longname": "Tone.AmplitudeEnvelope#releaseCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#releaseCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t *  @param  {Time} [time=now] When the attack should start.\n\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t *                               number between 0-1\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t */",
		"meta": {
			"range": [
				6502,
				7919
			],
			"filename": "Envelope.js",
			"lineno": 231,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001593",
				"name": "Tone.Envelope.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttack~time",
				"originalAttack": "Tone.Envelope#triggerAttack~originalAttack",
				"attack": "Tone.Envelope#triggerAttack~attack",
				"decay": "Tone.Envelope#triggerAttack~decay",
				"velocity": "Tone.Envelope#triggerAttack~velocity",
				"currentValue": "Tone.Envelope#triggerAttack~currentValue",
				"attackRate": "Tone.Envelope#triggerAttack~attackRate",
				"remainingDistance": "Tone.Envelope#triggerAttack~remainingDistance",
				"curve": "Tone.Envelope#triggerAttack~curve",
				"percentComplete": "Tone.Envelope#triggerAttack~percentComplete",
				"sliceIndex": "Tone.Envelope#triggerAttack~sliceIndex",
				"curve[0]": "Tone.Envelope#triggerAttack~curve.0]"
			}
		},
		"description": "Trigger the attack/decay portion of the ADSR envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
		],
		"name": "triggerAttack",
		"longname": "Tone.AmplitudeEnvelope#triggerAttack",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Triggers the release of the envelope.\n\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */",
		"meta": {
			"range": [
				8175,
				8800
			],
			"filename": "Envelope.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001803",
				"name": "Tone.Envelope.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerRelease~time",
				"currentValue": "Tone.Envelope#triggerRelease~currentValue",
				"release": "Tone.Envelope#triggerRelease~release",
				"curve": "Tone.Envelope#triggerRelease~curve"
			}
		},
		"description": "Triggers the release of the envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the release portion of the envelope should start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger release immediately\n env.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.AmplitudeEnvelope#triggerRelease",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9026,
				9126
			],
			"filename": "Envelope.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001915",
				"name": "Tone.Envelope.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.AmplitudeEnvelope#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#getValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease. \n\t *  @param {Time} duration The duration of the sustain.\n\t *  @param {Time} [time=now] When the attack should be triggered.\n\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */",
		"meta": {
			"range": [
				9591,
				9817
			],
			"filename": "Envelope.js",
			"lineno": 318,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001935",
				"name": "Tone.Envelope.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttackRelease~time"
			}
		},
		"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration of the sustain.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.AmplitudeEnvelope#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t *  @param  {Time} after\n\t *  @returns {Tone.Envelope} this\n\t */",
		"meta": {
			"range": [
				9958,
				10069
			],
			"filename": "Envelope.js",
			"lineno": 330,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001978",
				"name": "Tone.Envelope.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			}
		},
		"description": "Cancels all scheduled envelope changes after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.AmplitudeEnvelope#cancel",
		"kind": "function",
		"memberof": "Tone.AmplitudeEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#cancel",
		"inherited": true
	},
	{
		"comment": "/** \n\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1662,
				1690
			],
			"filename": "Envelope.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001189",
				"name": "this.attack",
				"type": "MemberExpression",
				"value": "options.attack",
				"paramnames": []
			}
		},
		"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.FrequencyEnvelope#attack",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#attack",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After the attack portion of the envelope, the value will fall\n\t\t *  over the duration of the decay time to it's sustain value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1860,
				1886
			],
			"filename": "Envelope.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001197",
				"name": "this.decay",
				"type": "MemberExpression",
				"value": "options.decay",
				"paramnames": []
			}
		},
		"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "decay",
		"longname": "Tone.FrequencyEnvelope#decay",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#decay",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * \tThe sustain value is the value \n\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t *  @type {NormalRange}\n\t\t */",
		"meta": {
			"range": [
				2079,
				2109
			],
			"filename": "Envelope.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001205",
				"name": "this.sustain",
				"type": "MemberExpression",
				"value": "options.sustain",
				"paramnames": []
			}
		},
		"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "sustain",
		"longname": "Tone.FrequencyEnvelope#sustain",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#sustain",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After triggerRelease is called, the envelope's\n\t\t *  value will fall to it's miminum value over the\n\t\t *  duration of the release time. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2288,
				2318
			],
			"filename": "Envelope.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001213",
				"name": "this.release",
				"type": "MemberExpression",
				"value": "options.release",
				"paramnames": []
			}
		},
		"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.FrequencyEnvelope#release",
		"kind": "member",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#release",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Read the current value of the envelope. Useful for \n\t * syncronizing visual output to the envelope. \n\t * @memberOf Tone.Envelope#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.FrequencyEnvelope#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the attack. \n\t * Can be any of these strings:\n\t * <ul>\n\t *   <li>linear</li>\n\t *   <li>exponential</li>\n\t *   <li>sine</li>\n\t *   <li>cosine</li>\n\t *   <li>bounce</li>\n\t *   <li>ripple</li>\n\t *   <li>step</li>\n\t * </ul>\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 125,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>cosine</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "attackCurve",
		"examples": [
			"env.attackCurve = \"linear\";",
			"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
		],
		"longname": "Tone.FrequencyEnvelope#attackCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#attackCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the release. See the attack curve types. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the release. See the attack curve types.",
		"memberof": "Tone.FrequencyEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "releaseCurve",
		"examples": [
			"env.releaseCurve = \"linear\";"
		],
		"longname": "Tone.FrequencyEnvelope#releaseCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#releaseCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t *  @param  {Time} [time=now] When the attack should start.\n\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t *                               number between 0-1\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t */",
		"meta": {
			"range": [
				6502,
				7919
			],
			"filename": "Envelope.js",
			"lineno": 231,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001593",
				"name": "Tone.Envelope.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttack~time",
				"originalAttack": "Tone.Envelope#triggerAttack~originalAttack",
				"attack": "Tone.Envelope#triggerAttack~attack",
				"decay": "Tone.Envelope#triggerAttack~decay",
				"velocity": "Tone.Envelope#triggerAttack~velocity",
				"currentValue": "Tone.Envelope#triggerAttack~currentValue",
				"attackRate": "Tone.Envelope#triggerAttack~attackRate",
				"remainingDistance": "Tone.Envelope#triggerAttack~remainingDistance",
				"curve": "Tone.Envelope#triggerAttack~curve",
				"percentComplete": "Tone.Envelope#triggerAttack~percentComplete",
				"sliceIndex": "Tone.Envelope#triggerAttack~sliceIndex",
				"curve[0]": "Tone.Envelope#triggerAttack~curve.0]"
			}
		},
		"description": "Trigger the attack/decay portion of the ADSR envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
		],
		"name": "triggerAttack",
		"longname": "Tone.FrequencyEnvelope#triggerAttack",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Triggers the release of the envelope.\n\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */",
		"meta": {
			"range": [
				8175,
				8800
			],
			"filename": "Envelope.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001803",
				"name": "Tone.Envelope.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerRelease~time",
				"currentValue": "Tone.Envelope#triggerRelease~currentValue",
				"release": "Tone.Envelope#triggerRelease~release",
				"curve": "Tone.Envelope#triggerRelease~curve"
			}
		},
		"description": "Triggers the release of the envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the release portion of the envelope should start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger release immediately\n env.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.FrequencyEnvelope#triggerRelease",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9026,
				9126
			],
			"filename": "Envelope.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001915",
				"name": "Tone.Envelope.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.FrequencyEnvelope#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#getValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease. \n\t *  @param {Time} duration The duration of the sustain.\n\t *  @param {Time} [time=now] When the attack should be triggered.\n\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */",
		"meta": {
			"range": [
				9591,
				9817
			],
			"filename": "Envelope.js",
			"lineno": 318,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001935",
				"name": "Tone.Envelope.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttackRelease~time"
			}
		},
		"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration of the sustain.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.FrequencyEnvelope#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t *  @param  {Time} after\n\t *  @returns {Tone.Envelope} this\n\t */",
		"meta": {
			"range": [
				9958,
				10069
			],
			"filename": "Envelope.js",
			"lineno": 330,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001978",
				"name": "Tone.Envelope.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			}
		},
		"description": "Cancels all scheduled envelope changes after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.FrequencyEnvelope#cancel",
		"kind": "function",
		"memberof": "Tone.FrequencyEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#cancel",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.MidSideMerge#wet",
		"kind": "member",
		"memberof": "Tone.MidSideMerge",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/** \n\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1662,
				1690
			],
			"filename": "Envelope.js",
			"lineno": 43,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001189",
				"name": "this.attack",
				"type": "MemberExpression",
				"value": "options.attack",
				"paramnames": []
			}
		},
		"description": "When triggerAttack is called, the attack time is the amount of\n time it takes for the envelope to reach it's maximum value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "attack",
		"longname": "Tone.ScaledEnvelope#attack",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#attack",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After the attack portion of the envelope, the value will fall\n\t\t *  over the duration of the decay time to it's sustain value. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				1860,
				1886
			],
			"filename": "Envelope.js",
			"lineno": 50,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001197",
				"name": "this.decay",
				"type": "MemberExpression",
				"value": "options.decay",
				"paramnames": []
			}
		},
		"description": "After the attack portion of the envelope, the value will fall\n over the duration of the decay time to it's sustain value.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "decay",
		"longname": "Tone.ScaledEnvelope#decay",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#decay",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * \tThe sustain value is the value \n\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t *  @type {NormalRange}\n\t\t */",
		"meta": {
			"range": [
				2079,
				2109
			],
			"filename": "Envelope.js",
			"lineno": 58,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001205",
				"name": "this.sustain",
				"type": "MemberExpression",
				"value": "options.sustain",
				"paramnames": []
			}
		},
		"description": "The sustain value is the value \n\twhich the envelope rests at after triggerAttack is\n\tcalled, but before triggerRelease is invoked.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "sustain",
		"longname": "Tone.ScaledEnvelope#sustain",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#sustain",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  After triggerRelease is called, the envelope's\n\t\t *  value will fall to it's miminum value over the\n\t\t *  duration of the release time. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				2288,
				2318
			],
			"filename": "Envelope.js",
			"lineno": 66,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001213",
				"name": "this.release",
				"type": "MemberExpression",
				"value": "options.release",
				"paramnames": []
			}
		},
		"description": "After triggerRelease is called, the envelope's\n value will fall to it's miminum value over the\n duration of the release time.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "release",
		"longname": "Tone.ScaledEnvelope#release",
		"kind": "member",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#release",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Read the current value of the envelope. Useful for \n\t * syncronizing visual output to the envelope. \n\t * @memberOf Tone.Envelope#\n\t * @type {Number}\n\t * @name value\n\t * @readOnly\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 111,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "Read the current value of the envelope. Useful for \nsyncronizing visual output to the envelope.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"readonly": true,
		"longname": "Tone.ScaledEnvelope#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the attack. \n\t * Can be any of these strings:\n\t * <ul>\n\t *   <li>linear</li>\n\t *   <li>exponential</li>\n\t *   <li>sine</li>\n\t *   <li>cosine</li>\n\t *   <li>bounce</li>\n\t *   <li>ripple</li>\n\t *   <li>step</li>\n\t * </ul>\n\t * Can also be an array which describes the curve. Values\n\t * in the array are evenly subdivided and linearly\n\t * interpolated over the duration of the attack. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name attackCurve\n\t * @example\n\t * env.attackCurve = \"linear\";\n\t * @example\n\t * //can also be an array\n\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 125,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the attack. \nCan be any of these strings:\n<ul>\n  <li>linear</li>\n  <li>exponential</li>\n  <li>sine</li>\n  <li>cosine</li>\n  <li>bounce</li>\n  <li>ripple</li>\n  <li>step</li>\n</ul>\nCan also be an array which describes the curve. Values\nin the array are evenly subdivided and linearly\ninterpolated over the duration of the attack.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "attackCurve",
		"examples": [
			"env.attackCurve = \"linear\";",
			"//can also be an array\nenv.attackCurve = [0, 0.2, 0.3, 0.4, 1]"
		],
		"longname": "Tone.ScaledEnvelope#attackCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#attackCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The shape of the release. See the attack curve types. \n\t * @memberOf Tone.Envelope#\n\t * @type {String|Array}\n\t * @name releaseCurve\n\t * @example\n\t * env.releaseCurve = \"linear\";\n\t */",
		"meta": {
			"filename": "Envelope.js",
			"lineno": 181,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {}
		},
		"description": "The shape of the release. See the attack curve types.",
		"memberof": "Tone.ScaledEnvelope",
		"type": {
			"names": [
				"String",
				"Array"
			]
		},
		"name": "releaseCurve",
		"examples": [
			"env.releaseCurve = \"linear\";"
		],
		"longname": "Tone.ScaledEnvelope#releaseCurve",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Envelope#releaseCurve",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t *  @param  {Time} [time=now] When the attack should start.\n\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t *                               number between 0-1\n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t */",
		"meta": {
			"range": [
				6502,
				7919
			],
			"filename": "Envelope.js",
			"lineno": 231,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001593",
				"name": "Tone.Envelope.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttack~time",
				"originalAttack": "Tone.Envelope#triggerAttack~originalAttack",
				"attack": "Tone.Envelope#triggerAttack~attack",
				"decay": "Tone.Envelope#triggerAttack~decay",
				"velocity": "Tone.Envelope#triggerAttack~velocity",
				"currentValue": "Tone.Envelope#triggerAttack~currentValue",
				"attackRate": "Tone.Envelope#triggerAttack~attackRate",
				"remainingDistance": "Tone.Envelope#triggerAttack~remainingDistance",
				"curve": "Tone.Envelope#triggerAttack~curve",
				"percentComplete": "Tone.Envelope#triggerAttack~percentComplete",
				"sliceIndex": "Tone.Envelope#triggerAttack~sliceIndex",
				"curve[0]": "Tone.Envelope#triggerAttack~curve.0]"
			}
		},
		"description": "Trigger the attack/decay portion of the ADSR envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope scales the vales.\n                              number between 0-1",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack 0.5 seconds from now with a velocity of 0.2\n env.triggerAttack(\"+0.5\", 0.2);"
		],
		"name": "triggerAttack",
		"longname": "Tone.ScaledEnvelope#triggerAttack",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Triggers the release of the envelope.\n\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t *  //trigger release immediately\n\t *  env.triggerRelease();\n\t */",
		"meta": {
			"range": [
				8175,
				8800
			],
			"filename": "Envelope.js",
			"lineno": 277,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001803",
				"name": "Tone.Envelope.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerRelease~time",
				"currentValue": "Tone.Envelope#triggerRelease~currentValue",
				"release": "Tone.Envelope#triggerRelease~release",
				"curve": "Tone.Envelope#triggerRelease~curve"
			}
		},
		"description": "Triggers the release of the envelope.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the release portion of the envelope should start.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger release immediately\n env.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.ScaledEnvelope#triggerRelease",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9026,
				9126
			],
			"filename": "Envelope.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001915",
				"name": "Tone.Envelope.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.ScaledEnvelope#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#getValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t *  some duration, then triggerRelease. \n\t *  @param {Time} duration The duration of the sustain.\n\t *  @param {Time} [time=now] When the attack should be triggered.\n\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t *  @returns {Tone.Envelope} this\n\t *  @example\n\t * //trigger the attack and then the release after 0.6 seconds.\n\t * env.triggerAttackRelease(0.6);\n\t */",
		"meta": {
			"range": [
				9591,
				9817
			],
			"filename": "Envelope.js",
			"lineno": 318,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001935",
				"name": "Tone.Envelope.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Envelope#triggerAttackRelease~time"
			}
		},
		"description": "triggerAttackRelease is shorthand for triggerAttack, then waiting\n some duration, then triggerRelease.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The duration of the sustain.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the attack should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity of the envelope.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger the attack and then the release after 0.6 seconds.\nenv.triggerAttackRelease(0.6);"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.ScaledEnvelope#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled envelope changes after the given time.\n\t *  @param  {Time} after\n\t *  @returns {Tone.Envelope} this\n\t */",
		"meta": {
			"range": [
				9958,
				10069
			],
			"filename": "Envelope.js",
			"lineno": 330,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/component",
			"code": {
				"id": "astnode100001978",
				"name": "Tone.Envelope.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			}
		},
		"description": "Cancels all scheduled envelope changes after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Envelope"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.ScaledEnvelope#cancel",
		"kind": "function",
		"memberof": "Tone.ScaledEnvelope",
		"scope": "instance",
		"inherits": "Tone.Envelope#cancel",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				846,
				1181
			],
			"filename": "Emitter.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017592",
				"name": "Tone.Emitter.prototype.on",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#on~events",
				"i": "Tone.Emitter#on~i",
				"eventName": "Tone.Emitter#on~eventName",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]"
			}
		},
		"description": "Bind a callback to a specific event.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event to listen for.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the\n                               event is emitted",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "on",
		"longname": "Tone.Clock#on",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance",
		"inherits": "Tone.Emitter#on",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				1596,
				2084
			],
			"filename": "Emitter.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017662",
				"name": "Tone.Emitter.prototype.off",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#off~events",
				"ev": "Tone.Emitter#off~ev",
				"event": "Tone.Emitter#off~event",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]",
				"eventList": "Tone.Emitter#off~eventList",
				"i": "Tone.Emitter#off~i"
			}
		},
		"description": "Remove the event listener.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The event to stop listening to.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "off",
		"longname": "Tone.Clock#off",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance",
		"inherits": "Tone.Emitter#off",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				2348,
				2682
			],
			"filename": "Emitter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017764",
				"name": "Tone.Emitter.prototype.emit",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"args": "Tone.Emitter#emit~args",
				"eventList": "Tone.Emitter#emit~eventList",
				"i": "Tone.Emitter#emit~i",
				"len": "Tone.Emitter#emit~len"
			}
		},
		"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The arguments to pass to the functions listening.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "emit",
		"longname": "Tone.Clock#emit",
		"kind": "function",
		"memberof": "Tone.Clock",
		"scope": "instance",
		"inherits": "Tone.Emitter#emit",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				846,
				1181
			],
			"filename": "Emitter.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017592",
				"name": "Tone.Emitter.prototype.on",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#on~events",
				"i": "Tone.Emitter#on~i",
				"eventName": "Tone.Emitter#on~eventName",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]"
			}
		},
		"description": "Bind a callback to a specific event.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event to listen for.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the\n                               event is emitted",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "on",
		"longname": "Tone.Context#on",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance",
		"inherits": "Tone.Emitter#on",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				1596,
				2084
			],
			"filename": "Emitter.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017662",
				"name": "Tone.Emitter.prototype.off",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#off~events",
				"ev": "Tone.Emitter#off~ev",
				"event": "Tone.Emitter#off~event",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]",
				"eventList": "Tone.Emitter#off~eventList",
				"i": "Tone.Emitter#off~i"
			}
		},
		"description": "Remove the event listener.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The event to stop listening to.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "off",
		"longname": "Tone.Context#off",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance",
		"inherits": "Tone.Emitter#off",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				2348,
				2682
			],
			"filename": "Emitter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017764",
				"name": "Tone.Emitter.prototype.emit",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"args": "Tone.Emitter#emit~args",
				"eventList": "Tone.Emitter#emit~eventList",
				"i": "Tone.Emitter#emit~i",
				"len": "Tone.Emitter#emit~len"
			}
		},
		"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The arguments to pass to the functions listening.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "emit",
		"longname": "Tone.Context#emit",
		"kind": "function",
		"memberof": "Tone.Context",
		"scope": "instance",
		"inherits": "Tone.Emitter#emit",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Generate a looped buffer at some constant value.\n\t *  @param  {Number}  val\n\t *  @return  {BufferSourceNode}\n\t */",
		"meta": {
			"range": [
				3285,
				3855
			],
			"filename": "Context.js",
			"lineno": 145,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100015960",
				"name": "Tone.Context.prototype.getConstant",
				"type": "FunctionExpression",
				"paramnames": [
					"val"
				]
			},
			"vars": {
				"buffer": "Tone.Context#getConstant~buffer",
				"arr": "Tone.Context#getConstant~arr",
				"i": "Tone.Context#getConstant~i",
				"arr[undefined]": "Tone.Context#getConstant~arr.undefined]",
				"constant": "Tone.Context#getConstant~constant",
				"constant.channelCount": "Tone.Context#getConstant~constant.channelCount",
				"constant.channelCountMode": "Tone.Context#getConstant~constant.channelCountMode",
				"constant.buffer": "Tone.Context#getConstant~constant.buffer",
				"constant.loop": "Tone.Context#getConstant~constant.loop",
				"this._constants[undefined]": "Tone.Context#_constants[undefined]"
			}
		},
		"description": "Generate a looped buffer at some constant value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"name": "val"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"BufferSourceNode"
					]
				}
			}
		],
		"name": "getConstant",
		"longname": "Tone.OfflineContext#getConstant",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Context#getConstant",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  A setTimeout which is gaurenteed by the clock source. \n\t *  Also runs in the offline context.\n\t *  @param  {Function}  fn       The callback to invoke\n\t *  @param  {Seconds}    timeout  The timeout in seconds\n\t *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout\n\t */",
		"meta": {
			"range": [
				4501,
				4733
			],
			"filename": "Context.js",
			"lineno": 184,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016128",
				"name": "Tone.Context.prototype.setTimeout",
				"type": "FunctionExpression",
				"paramnames": [
					"fn",
					"timeout"
				]
			},
			"vars": {
				"now": "Tone.Context#setTimeout~now"
			}
		},
		"description": "A setTimeout which is gaurenteed by the clock source. \n Also runs in the offline context.",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke",
				"name": "fn"
			},
			{
				"type": {
					"names": [
						"Seconds"
					]
				},
				"description": "The timeout in seconds",
				"name": "timeout"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "ID to use when invoking Tone.Context.clearTimeout"
			}
		],
		"name": "setTimeout",
		"longname": "Tone.OfflineContext#setTimeout",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Context#setTimeout",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clears a previously scheduled timeout with Tone.context.setTimeout\n\t *  @param  {Number}  id  The ID returned from setTimeout\n\t *  @return  {Tone.Context}  this\n\t */",
		"meta": {
			"range": [
				4913,
				5084
			],
			"filename": "Context.js",
			"lineno": 200,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016175",
				"name": "Tone.Context.prototype.clearTimeout",
				"type": "FunctionExpression",
				"paramnames": [
					"id"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Clears a previously scheduled timeout with Tone.context.setTimeout",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The ID returned from setTimeout",
				"name": "id"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Context"
					]
				},
				"description": "this"
			}
		],
		"name": "clearTimeout",
		"longname": "Tone.OfflineContext#clearTimeout",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Context#clearTimeout",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  How often the Web Worker callback is invoked.\n\t *  This number corresponds to how responsive the scheduling\n\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t *  total latency between scheduling an event and hearing it.\n\t *  @type {Number}\n\t *  @memberOf Tone.Context#\n\t *  @name updateInterval\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 209,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "How often the Web Worker callback is invoked.\n This number corresponds to how responsive the scheduling\n can be. Context.updateInterval + Context.lookAhead gives you the\n total latency between scheduling an event and hearing it.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.OfflineContext",
		"name": "updateInterval",
		"longname": "Tone.OfflineContext#updateInterval",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Context#updateInterval",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  What the source of the clock is, either \"worker\" (Web Worker [default]), \n\t *  \"timeout\" (setTimeout), or \"offline\" (none). \n\t *  @type {String}\n\t *  @memberOf Tone.Context#\n\t *  @name clockSource\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 227,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "What the source of the clock is, either \"worker\" (Web Worker [default]), \n \"timeout\" (setTimeout), or \"offline\" (none).",
		"type": {
			"names": [
				"String"
			]
		},
		"memberof": "Tone.OfflineContext",
		"name": "clockSource",
		"longname": "Tone.OfflineContext#clockSource",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Context#clockSource",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The type of playback, which affects tradeoffs between audio \n\t *  output latency and responsiveness. \n\t *  \n\t *  In addition to setting the value in seconds, the latencyHint also\n\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t *  @type {String|Seconds}\n\t *  @memberOf Tone.Context#\n\t *  @name latencyHint\n\t *  @example\n\t * //set the lookAhead to 0.3 seconds\n\t * Tone.context.latencyHint = 0.3;\n\t */",
		"meta": {
			"filename": "Context.js",
			"lineno": 243,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The type of playback, which affects tradeoffs between audio \n output latency and responsiveness. \n \n In addition to setting the value in seconds, the latencyHint also\n accepts the strings \"interactive\" (prioritizes low latency), \n \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n latency and performance), and \"fastest\" (lowest latency, might glitch more often).",
		"type": {
			"names": [
				"String",
				"Seconds"
			]
		},
		"memberof": "Tone.OfflineContext",
		"name": "latencyHint",
		"examples": [
			"//set the lookAhead to 0.3 seconds\nTone.context.latencyHint = 0.3;"
		],
		"longname": "Tone.OfflineContext#latencyHint",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Context#latencyHint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @returns {Tone.Context} this\n\t */",
		"meta": {
			"range": [
				7414,
				7778
			],
			"filename": "Context.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100016394",
				"name": "Tone.Context.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._ticker": "Tone.Context#_ticker",
				"this._timeouts": "Tone.Context#_timeouts",
				"con": "Tone.Context#dispose~con",
				"this._constants": "Tone.Context#_constants"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Context"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.OfflineContext#dispose",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Context#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				846,
				1181
			],
			"filename": "Emitter.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017592",
				"name": "Tone.Emitter.prototype.on",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#on~events",
				"i": "Tone.Emitter#on~i",
				"eventName": "Tone.Emitter#on~eventName",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]"
			}
		},
		"description": "Bind a callback to a specific event.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event to listen for.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the\n                               event is emitted",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "on",
		"longname": "Tone.OfflineContext#on",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Emitter#on",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				1596,
				2084
			],
			"filename": "Emitter.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017662",
				"name": "Tone.Emitter.prototype.off",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#off~events",
				"ev": "Tone.Emitter#off~ev",
				"event": "Tone.Emitter#off~event",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]",
				"eventList": "Tone.Emitter#off~eventList",
				"i": "Tone.Emitter#off~i"
			}
		},
		"description": "Remove the event listener.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The event to stop listening to.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "off",
		"longname": "Tone.OfflineContext#off",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Emitter#off",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				2348,
				2682
			],
			"filename": "Emitter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017764",
				"name": "Tone.Emitter.prototype.emit",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"args": "Tone.Emitter#emit~args",
				"eventList": "Tone.Emitter#emit~eventList",
				"i": "Tone.Emitter#emit~i",
				"len": "Tone.Emitter#emit~len"
			}
		},
		"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The arguments to pass to the functions listening.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "emit",
		"longname": "Tone.OfflineContext#emit",
		"kind": "function",
		"memberof": "Tone.OfflineContext",
		"scope": "instance",
		"inherits": "Tone.Emitter#emit",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The memory of the timeline, i.e.\n\t\t *  how many events in the past it will retain\n\t\t *  @type {Positive}\n\t\t */",
		"meta": {
			"range": [
				1012,
				1040
			],
			"filename": "Timeline.js",
			"lineno": 44,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022687",
				"name": "this.memory",
				"type": "MemberExpression",
				"value": "options.memory",
				"paramnames": []
			}
		},
		"description": "The memory of the timeline, i.e.\n how many events in the past it will retain",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "memory",
		"longname": "Tone.TimelineState#memory",
		"kind": "member",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#memory",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The number of items in the timeline.\n\t *  @type {Number}\n\t *  @memberOf Tone.Timeline#\n\t *  @name length\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Timeline.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The number of items in the timeline.",
		"type": {
			"names": [
				"Number"
			]
		},
		"memberof": "Tone.TimelineState",
		"name": "length",
		"readonly": true,
		"longname": "Tone.TimelineState#length",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Timeline#length",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t *  @param  {Object}  event  The event object to insert into the \n\t *                           timeline. \n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				1691,
				2258
			],
			"filename": "Timeline.js",
			"lineno": 77,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022734",
				"name": "Tone.Timeline.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#add~index",
				"diff": "Tone.Timeline#add~diff"
			}
		},
		"description": "Insert an event object onto the timeline. Events must have a \"time\" attribute.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object to insert into the \n                          timeline.",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "add",
		"longname": "Tone.TimelineState#add",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#add",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove an event from the timeline.\n\t *  @param  {Object}  event  The event object to remove from the list.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				2419,
				2666
			],
			"filename": "Timeline.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022827",
				"name": "Tone.Timeline.prototype.remove",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#remove~index"
			}
		},
		"description": "Remove an event from the timeline.",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object to remove from the list.",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "remove",
		"longname": "Tone.TimelineState#remove",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#remove",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the nearest event whose time is less than or equal to the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object set after that time.\n\t */",
		"meta": {
			"range": [
				2939,
				3182
			],
			"filename": "Timeline.js",
			"lineno": 119,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022880",
				"name": "Tone.Timeline.prototype.get",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#get~comparitor",
				"index": "Tone.Timeline#get~index"
			}
		},
		"description": "Get the nearest event whose time is less than or equal to the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object set after that time."
			}
		],
		"name": "get",
		"longname": "Tone.TimelineState#get",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#get",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return the first event in the timeline without removing it\n\t *  @returns {Object} The first event object\n\t */",
		"meta": {
			"range": [
				3306,
				3379
			],
			"filename": "Timeline.js",
			"lineno": 133,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022926",
				"name": "Tone.Timeline.prototype.peek",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the first event in the timeline without removing it",
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The first event object"
			}
		],
		"name": "peek",
		"longname": "Tone.TimelineState#peek",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#peek",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return the first event in the timeline and remove it\n\t *  @returns {Object} The first event object\n\t */",
		"meta": {
			"range": [
				3497,
				3576
			],
			"filename": "Timeline.js",
			"lineno": 141,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022943",
				"name": "Tone.Timeline.prototype.shift",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the first event in the timeline and remove it",
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The first event object"
			}
		],
		"name": "shift",
		"longname": "Tone.TimelineState#shift",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#shift",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the event which is scheduled after the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object after the given time\n\t */",
		"meta": {
			"range": [
				3830,
				4103
			],
			"filename": "Timeline.js",
			"lineno": 151,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022961",
				"name": "Tone.Timeline.prototype.getAfter",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#getAfter~comparitor",
				"index": "Tone.Timeline#getAfter~index"
			}
		},
		"description": "Get the event which is scheduled after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object after the given time"
			}
		],
		"name": "getAfter",
		"longname": "Tone.TimelineState#getAfter",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#getAfter",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the event before the event at the given time.\n\t *  @param  {Number}  time  The time to query.\n\t *  @param  {String}  comparitor Which value in the object to compare\n\t *  @returns {Object} The event object before the given time\n\t */",
		"meta": {
			"range": [
				4353,
				4798
			],
			"filename": "Timeline.js",
			"lineno": 167,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023014",
				"name": "Tone.Timeline.prototype.getBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"comparitor"
				]
			},
			"vars": {
				"comparitor": "Tone.Timeline#getBefore~comparitor",
				"len": "Tone.Timeline#getBefore~len",
				"index": "Tone.Timeline#getBefore~index"
			}
		},
		"description": "Get the event before the event at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "Which value in the object to compare",
				"name": "comparitor"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event object before the given time"
			}
		],
		"name": "getBefore",
		"longname": "Tone.TimelineState#getBefore",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#getBefore",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancel events after the given time\n\t *  @param  {Number}  time  The time to query.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				4935,
				5644
			],
			"filename": "Timeline.js",
			"lineno": 187,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023096",
				"name": "Tone.Timeline.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"index": "Tone.Timeline#cancel~index",
				"i": "Tone.Timeline#cancel~i",
				"this._timeline": "Tone.Timeline#_timeline"
			}
		},
		"description": "Cancel events after the given time",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to query.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.TimelineState#cancel",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#cancel",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancel events before or equal to the given time.\n\t *  @param  {Number}  time  The time to cancel before.\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				5803,
				6023
			],
			"filename": "Timeline.js",
			"lineno": 221,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023233",
				"name": "Tone.Timeline.prototype.cancelBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"index": "Tone.Timeline#cancelBefore~index",
				"this._timeline": "Tone.Timeline#_timeline"
			}
		},
		"description": "Cancel events before or equal to the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to cancel before.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelBefore",
		"longname": "Tone.TimelineState#cancelBefore",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#cancelBefore",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Returns the previous event if there is one. null otherwise\n\t * @param  {Object} event The event to find the previous one of\n\t * @return {Object}       The event right before the given event\n\t */",
		"meta": {
			"range": [
				6231,
				6419
			],
			"filename": "Timeline.js",
			"lineno": 236,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023281",
				"name": "Tone.Timeline.prototype.previousEvent",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"index": "Tone.Timeline#previousEvent~index"
			}
		},
		"description": "Returns the previous event if there is one. null otherwise",
		"params": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event to find the previous one of",
				"name": "event"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Object"
					]
				},
				"description": "The event right before the given event"
			}
		],
		"name": "previousEvent",
		"longname": "Tone.TimelineState#previousEvent",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#previousEvent",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				8951,
				9049
			],
			"filename": "Timeline.js",
			"lineno": 322,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023625",
				"name": "Tone.Timeline.prototype.forEach",
				"type": "FunctionExpression",
				"paramnames": [
					"callback"
				]
			}
		},
		"description": "Iterate over everything in the array",
		"params": [
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEach",
		"longname": "Tone.TimelineState#forEach",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#forEach",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at or before the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				9308,
				9587
			],
			"filename": "Timeline.js",
			"lineno": 333,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023645",
				"name": "Tone.Timeline.prototype.forEachBefore",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"upperBound": "Tone.Timeline#forEachBefore~upperBound"
			}
		},
		"description": "Iterate over everything in the array at or before the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachBefore",
		"longname": "Tone.TimelineState#forEachBefore",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#forEachBefore",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array after the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				9839,
				10087
			],
			"filename": "Timeline.js",
			"lineno": 348,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023682",
				"name": "Tone.Timeline.prototype.forEachAfter",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"lowerBound": "Tone.Timeline#forEachAfter~lowerBound"
			}
		},
		"description": "Iterate over everything in the array after the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAfter",
		"longname": "Tone.TimelineState#forEachAfter",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#forEachAfter",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at or after the given time. Similar to \n\t *  forEachAfter, but includes the item(s) at the given time.\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				10420,
				10816
			],
			"filename": "Timeline.js",
			"lineno": 362,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023714",
				"name": "Tone.Timeline.prototype.forEachFrom",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"lowerBound": "Tone.Timeline#forEachFrom~lowerBound"
			}
		},
		"description": "Iterate over everything in the array at or after the given time. Similar to \n forEachAfter, but includes the item(s) at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachFrom",
		"longname": "Tone.TimelineState#forEachFrom",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#forEachFrom",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Iterate over everything in the array at the given time\n\t *  @param  {Number}  time The time to check if items are before\n\t *  @param  {Function}  callback The callback to invoke with every item\n\t *  @returns {Tone.Timeline} this\n\t */",
		"meta": {
			"range": [
				11064,
				11426
			],
			"filename": "Timeline.js",
			"lineno": 379,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023764",
				"name": "Tone.Timeline.prototype.forEachAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"callback"
				]
			},
			"vars": {
				"upperBound": "Tone.Timeline#forEachAtTime~upperBound",
				"": null
			}
		},
		"description": "Iterate over everything in the array at the given time",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time to check if items are before",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke with every item",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "forEachAtTime",
		"longname": "Tone.TimelineState#forEachAtTime",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#forEachAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return  {Tone.Timeline}  this\n\t */",
		"meta": {
			"range": [
				11491,
				11641
			],
			"filename": "Timeline.js",
			"lineno": 396,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100023817",
				"name": "Tone.Timeline.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._timeline": "Tone.Timeline#_timeline",
				"this._toRemove": "Tone.Timeline#_toRemove"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Timeline"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.TimelineState#dispose",
		"kind": "function",
		"memberof": "Tone.TimelineState",
		"scope": "instance",
		"inherits": "Tone.Timeline#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Bind a callback to a specific event.\n\t *  @param  {String}    event     The name of the event to listen for.\n\t *  @param  {Function}  callback  The callback to invoke when the\n\t *                                event is emitted\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				846,
				1181
			],
			"filename": "Emitter.js",
			"lineno": 32,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017592",
				"name": "Tone.Emitter.prototype.on",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#on~events",
				"i": "Tone.Emitter#on~i",
				"eventName": "Tone.Emitter#on~eventName",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]"
			}
		},
		"description": "Bind a callback to a specific event.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event to listen for.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"description": "The callback to invoke when the\n                               event is emitted",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "on",
		"longname": "Tone.Transport#on",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance",
		"inherits": "Tone.Emitter#on",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove the event listener.\n\t *  @param  {String}    event     The event to stop listening to.\n\t *  @param  {Function=}  callback  The callback which was bound to \n\t *                                the event with Tone.Emitter.on.\n\t *                                If no callback is given, all callbacks\n\t *                                events are removed.\n\t *  @return  {Tone.Emitter}    this\n\t */",
		"meta": {
			"range": [
				1596,
				2084
			],
			"filename": "Emitter.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017662",
				"name": "Tone.Emitter.prototype.off",
				"type": "FunctionExpression",
				"paramnames": [
					"event",
					"callback"
				]
			},
			"vars": {
				"events": "Tone.Emitter#off~events",
				"ev": "Tone.Emitter#off~ev",
				"event": "Tone.Emitter#off~event",
				"this._events[undefined]": "Tone.Emitter#_events[undefined]",
				"eventList": "Tone.Emitter#off~eventList",
				"i": "Tone.Emitter#off~i"
			}
		},
		"description": "Remove the event listener.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The event to stop listening to.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"function"
					]
				},
				"optional": true,
				"description": "The callback which was bound to \n                               the event with Tone.Emitter.on.\n                               If no callback is given, all callbacks\n                               events are removed.",
				"name": "callback"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "off",
		"longname": "Tone.Transport#off",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance",
		"inherits": "Tone.Emitter#off",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Invoke all of the callbacks bound to the event\n\t *  with any arguments passed in. \n\t *  @param  {String}  event  The name of the event.\n\t *  @param {*} args... The arguments to pass to the functions listening.\n\t *  @return  {Tone.Emitter}  this\n\t */",
		"meta": {
			"range": [
				2348,
				2682
			],
			"filename": "Emitter.js",
			"lineno": 81,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100017764",
				"name": "Tone.Emitter.prototype.emit",
				"type": "FunctionExpression",
				"paramnames": [
					"event"
				]
			},
			"vars": {
				"args": "Tone.Emitter#emit~args",
				"eventList": "Tone.Emitter#emit~eventList",
				"i": "Tone.Emitter#emit~i",
				"len": "Tone.Emitter#emit~len"
			}
		},
		"description": "Invoke all of the callbacks bound to the event\n with any arguments passed in.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"description": "The name of the event.",
				"name": "event"
			},
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The arguments to pass to the functions listening.",
				"name": "args..."
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Emitter"
					]
				},
				"description": "this"
			}
		],
		"name": "emit",
		"longname": "Tone.Transport#emit",
		"kind": "function",
		"memberof": "Tone.Transport",
		"scope": "instance",
		"inherits": "Tone.Emitter#emit",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.AutoFilter#wet",
		"kind": "member",
		"memberof": "Tone.AutoFilter",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.AutoPanner#wet",
		"kind": "member",
		"memberof": "Tone.AutoPanner",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.AutoWah#wet",
		"kind": "member",
		"memberof": "Tone.AutoWah",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.BitCrusher#wet",
		"kind": "member",
		"memberof": "Tone.BitCrusher",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Chebyshev#wet",
		"kind": "member",
		"memberof": "Tone.Chebyshev",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.StereoXFeedbackEffect#wet",
		"kind": "member",
		"memberof": "Tone.StereoXFeedbackEffect",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The amount of feedback from the output\n\t\t *  back into the input of the effect (routed\n\t\t *  across left and right channels).\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				687,
				759
			],
			"filename": "StereoXFeedbackEffect.js",
			"lineno": 25,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035368",
				"name": "this.feedback",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.Chorus#feedback",
		"kind": "member",
		"memberof": "Tone.Chorus",
		"scope": "instance",
		"inherits": "Tone.StereoXFeedbackEffect#feedback",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Chorus#wet",
		"kind": "member",
		"memberof": "Tone.Chorus",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Convolver#wet",
		"kind": "member",
		"memberof": "Tone.Convolver",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Distortion#wet",
		"kind": "member",
		"memberof": "Tone.Distortion",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.FeedbackEffect#wet",
		"kind": "member",
		"memberof": "Tone.FeedbackEffect",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The amount of signal which is fed back into the effect input. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				893,
				932
			],
			"filename": "FeedbackEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031566",
				"name": "this.feedback",
				"type": "MemberExpression",
				"value": "this._feedbackGain.gain",
				"paramnames": []
			}
		},
		"description": "The amount of signal which is fed back into the effect input.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.FeedbackDelay#feedback",
		"kind": "member",
		"memberof": "Tone.FeedbackDelay",
		"scope": "instance",
		"inherits": "Tone.FeedbackEffect#feedback",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.FeedbackDelay#wet",
		"kind": "member",
		"memberof": "Tone.FeedbackDelay",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Freeverb#wet",
		"kind": "member",
		"memberof": "Tone.Freeverb",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.JCReverb#wet",
		"kind": "member",
		"memberof": "Tone.JCReverb",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.MidSideEffect#wet",
		"kind": "member",
		"memberof": "Tone.MidSideEffect",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Phaser#wet",
		"kind": "member",
		"memberof": "Tone.Phaser",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The amount of feedback from the output\n\t\t *  back into the input of the effect (routed\n\t\t *  across left and right channels).\n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				687,
				759
			],
			"filename": "StereoXFeedbackEffect.js",
			"lineno": 25,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100035368",
				"name": "this.feedback",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The amount of feedback from the output\n back into the input of the effect (routed\n across left and right channels).",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.PingPongDelay#feedback",
		"kind": "member",
		"memberof": "Tone.PingPongDelay",
		"scope": "instance",
		"inherits": "Tone.StereoXFeedbackEffect#feedback",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.PingPongDelay#wet",
		"kind": "member",
		"memberof": "Tone.PingPongDelay",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The amount of signal which is fed back into the effect input. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				893,
				932
			],
			"filename": "FeedbackEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031566",
				"name": "this.feedback",
				"type": "MemberExpression",
				"value": "this._feedbackGain.gain",
				"paramnames": []
			}
		},
		"description": "The amount of signal which is fed back into the effect input.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "feedback",
		"longname": "Tone.PitchShift#feedback",
		"kind": "member",
		"memberof": "Tone.PitchShift",
		"scope": "instance",
		"inherits": "Tone.FeedbackEffect#feedback",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.PitchShift#wet",
		"kind": "member",
		"memberof": "Tone.PitchShift",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.StereoFeedbackEffect#wet",
		"kind": "member",
		"memberof": "Tone.StereoFeedbackEffect",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.StereoWidener#wet",
		"kind": "member",
		"memberof": "Tone.StereoWidener",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control, i.e. how much of the effected\n\t\t *  will pass through to the output. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				756,
				784
			],
			"filename": "StereoEffect.js",
			"lineno": 32,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100034595",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control, i.e. how much of the effected\n will pass through to the output.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Tremolo#wet",
		"kind": "member",
		"memberof": "Tone.Tremolo",
		"scope": "instance",
		"inherits": "Tone.StereoEffect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The wet control is how much of the effected\n\t\t *  will pass through to the output. 1 = 100% effected\n\t\t *  signal, 0 = 100% dry signal. \n\t\t *  @type {NormalRange}\n\t\t *  @signal\n\t\t */",
		"meta": {
			"range": [
				938,
				966
			],
			"filename": "Effect.js",
			"lineno": 34,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/effect",
			"code": {
				"id": "astnode100031145",
				"name": "this.wet",
				"type": "MemberExpression",
				"value": "this._dryWet.fade",
				"paramnames": []
			}
		},
		"description": "The wet control is how much of the effected\n will pass through to the output. 1 = 100% effected\n signal, 0 = 100% dry signal.",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"name": "wet",
		"longname": "Tone.Vibrato#wet",
		"kind": "member",
		"memberof": "Tone.Vibrato",
		"scope": "instance",
		"inherits": "Tone.Effect#wet",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke. \n\t\t *  @type  {Function}\n\t\t */",
		"meta": {
			"range": [
				1216,
				1248
			],
			"filename": "Event.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036450",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback to invoke.",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Part#callback",
		"kind": "member",
		"memberof": "Tone.Part",
		"scope": "instance",
		"inherits": "Tone.Event#callback",
		"inherited": true,
		"overrides": "Tone.Event#callback"
	},
	{
		"comment": "/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				2501,
				2525
			],
			"filename": "Event.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036532",
				"name": "this.mute",
				"type": "MemberExpression",
				"value": "options.mute",
				"paramnames": []
			}
		},
		"description": "If mute is true, the callback won't be\n invoked.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.Part#mute",
		"kind": "member",
		"memberof": "Tone.Part",
		"scope": "instance",
		"inherits": "Tone.Event#mute",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.Event#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 172,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.Part",
		"name": "state",
		"longname": "Tone.Part#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Event#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 395,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
		"memberof": "Tone.Part",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "progress",
		"readonly": true,
		"longname": "Tone.Part#progress",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Event#progress",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The event which produces the callbacks\n\t\t */",
		"meta": {
			"range": [
				793,
				999
			],
			"filename": "Loop.js",
			"lineno": 26,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037610",
				"name": "this._event",
				"type": "NewExpression",
				"value": "",
				"paramnames": []
			}
		},
		"description": "The event which produces the callbacks",
		"name": "_event",
		"longname": "Tone.Pattern#_event",
		"kind": "member",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"inherits": "Tone.Loop#_event",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke with the next event in the pattern\n\t\t *  @type {Function}\n\t\t */",
		"meta": {
			"range": [
				1103,
				1135
			],
			"filename": "Loop.js",
			"lineno": 38,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037642",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback to invoke with the next event in the pattern",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Pattern#callback",
		"kind": "member",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"inherits": "Tone.Loop#callback",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the loop at the specified time along the Transport's\n\t *  timeline.\n\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				1645,
				1733
			],
			"filename": "Loop.js",
			"lineno": 66,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037688",
				"name": "Tone.Loop.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Start the loop at the specified time along the Transport's\n timeline.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"description": "When to start the Loop.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Pattern#start",
		"kind": "function",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"inherits": "Tone.Loop#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the loop at the given time.\n\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				1883,
				1969
			],
			"filename": "Loop.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037710",
				"name": "Tone.Loop.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Stop the loop at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"description": "When to stop the Arpeggio",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Pattern#stop",
		"kind": "function",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"inherits": "Tone.Loop#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancel all scheduled events greater than or equal to the given time\n\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t *  @return  {Tone.Loop}  this\n\t */",
		"meta": {
			"range": [
				2175,
				2265
			],
			"filename": "Loop.js",
			"lineno": 86,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100037732",
				"name": "Tone.Loop.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			}
		},
		"description": "Cancel all scheduled events greater than or equal to the given time",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The time after which events will be cancel.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Loop"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Pattern#cancel",
		"kind": "function",
		"memberof": "Tone.Pattern",
		"scope": "instance",
		"inherits": "Tone.Loop#cancel",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The state of the Loop, either started or stopped.\n\t *  @memberOf Tone.Loop#\n\t *  @type {String}\n\t *  @name state\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The state of the Loop, either started or stopped.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"String"
			]
		},
		"name": "state",
		"readonly": true,
		"longname": "Tone.Pattern#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The progress of the loop as a value between 0-1. 0, when\n\t *  the loop is stopped or done iterating. \n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 113,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The progress of the loop as a value between 0-1. 0, when\n the loop is stopped or done iterating.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "progress",
		"readonly": true,
		"longname": "Tone.Pattern#progress",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#progress",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The time between successive callbacks. \n\t *  @example\n\t * loop.interval = \"8n\"; //loop every 8n\n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name interval\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 127,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The time between successive callbacks.",
		"examples": [
			"loop.interval = \"8n\"; //loop every 8n\n "
		],
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "interval",
		"longname": "Tone.Pattern#interval",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#interval",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t *  A `playbackRate` of 2 would be twice as fast. \n\t *  @memberOf Tone.Loop#\n\t *  @type {Time}\n\t *  @name playbackRate\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The playback rate of the loop. The normal playback rate is 1 (no change). \n A `playbackRate` of 2 would be twice as fast.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.Pattern#playbackRate",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#playbackRate",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Random variation +/-0.01s to the scheduled time. \n\t *  Or give it a time value which it will randomize by.\n\t *  @type {Boolean|Time}\n\t *  @memberOf Tone.Loop#\n\t *  @name humanize\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 160,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Random variation +/-0.01s to the scheduled time. \n Or give it a time value which it will randomize by.",
		"type": {
			"names": [
				"Boolean",
				"Time"
			]
		},
		"memberof": "Tone.Pattern",
		"name": "humanize",
		"longname": "Tone.Pattern#humanize",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#humanize",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The probably of the callback being invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 176,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The probably of the callback being invoked.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "probability",
		"longname": "Tone.Pattern#probability",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#probability",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Muting the Loop means that no callbacks are invoked.\n\t *  @memberOf Tone.Loop#\n\t *  @type {Boolean}\n\t *  @name mute\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 191,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Muting the Loop means that no callbacks are invoked.",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.Pattern#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#mute",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The number of iterations of the loop. The default\n\t *  value is Infinity (loop forever).\n\t *  @memberOf Tone.Loop#\n\t *  @type {Positive}\n\t *  @name iterations\n\t */",
		"meta": {
			"filename": "Loop.js",
			"lineno": 206,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The number of iterations of the loop. The default\n value is Infinity (loop forever).",
		"memberof": "Tone.Pattern",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "iterations",
		"longname": "Tone.Pattern#iterations",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Loop#iterations",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the part at the given time. \n\t *  @param  {TransportTime}  time    When to start the part.\n\t *  @param  {Time=}  offset  The offset from the start of the part\n\t *                           to begin playing at.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				2140,
				2669
			],
			"filename": "Part.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038218",
				"name": "Tone.Part.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset"
				]
			},
			"vars": {
				"ticks": "Tone.Part#start~ticks",
				"offset": "Tone.Part#start~offset",
				"": null
			}
		},
		"description": "Start the part at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TransportTime"
					]
				},
				"description": "When to start the part.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"description": "The offset from the start of the part\n                          to begin playing at.",
				"name": "offset"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "start",
		"longname": "Tone.Sequence#start",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Part#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the part at the given time.\n\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				4060,
				4300
			],
			"filename": "Part.js",
			"lineno": 148,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038485",
				"name": "Tone.Part.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"ticks": "Tone.Part#stop~ticks",
				"": null
			}
		},
		"description": "Stop the part at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "When to stop the part.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "stop",
		"longname": "Tone.Sequence#stop",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Part#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Remove all of the notes from the group. \n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				8163,
				8304
			],
			"filename": "Part.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100038979",
				"name": "Tone.Part.prototype.removeAll",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"": null,
				"this._events": "Tone.Part#_events"
			}
		},
		"description": "Remove all of the notes from the group.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "removeAll",
		"longname": "Tone.Sequence#removeAll",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Part#removeAll",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t *  @return  {Tone.Part}  this\n\t */",
		"meta": {
			"range": [
				8508,
				8677
			],
			"filename": "Part.js",
			"lineno": 307,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100039011",
				"name": "Tone.Part.prototype.cancel",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"": null
			}
		},
		"description": "Cancel scheduled state change events: i.e. \"start\" and \"stop\".",
		"params": [
			{
				"type": {
					"names": [
						"TimelinePosition"
					]
				},
				"description": "The time after which to cancel the scheduled events.",
				"name": "after"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Part"
					]
				},
				"description": "this"
			}
		],
		"name": "cancel",
		"longname": "Tone.Sequence#cancel",
		"kind": "function",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Part#cancel",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The probability of the notes being triggered.\n\t *  @memberOf Tone.Part#\n\t *  @type {NormalRange}\n\t *  @name probability\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 376,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The probability of the notes being triggered.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "probability",
		"longname": "Tone.Sequence#probability",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#probability",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  If the part should loop or not\n\t *  between Tone.Part.loopStart and \n\t *  Tone.Part.loopEnd. An integer\n\t *  value corresponds to the number of\n\t *  loops the Part does after it starts.\n\t *  @memberOf Tone.Part#\n\t *  @type {Boolean|Positive}\n\t *  @name loop\n\t *  @example\n\t * //loop the part 8 times\n\t * part.loop = 8;\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 411,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "If the part should loop or not\n between Tone.Part.loopStart and \n Tone.Part.loopEnd. An integer\n value corresponds to the number of\n loops the Part does after it starts.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"Boolean",
				"Positive"
			]
		},
		"name": "loop",
		"examples": [
			"//loop the part 8 times\npart.loop = 8;"
		],
		"longname": "Tone.Sequence#loop",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#loop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The loopEnd point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopEnd\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 439,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The loopEnd point determines when it will \n loop if Tone.Part.loop is true.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopEnd",
		"longname": "Tone.Sequence#loopEnd",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#loopEnd",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The loopStart point determines when it will \n\t *  loop if Tone.Part.loop is true.\n\t *  @memberOf Tone.Part#\n\t *  @type {TransportTime}\n\t *  @name loopStart\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 461,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The loopStart point determines when it will \n loop if Tone.Part.loop is true.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"TransportTime"
			]
		},
		"name": "loopStart",
		"longname": "Tone.Sequence#loopStart",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#loopStart",
		"inherited": true
	},
	{
		"comment": "/**\n\t * \tThe playback rate of the part\n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name playbackRate\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 483,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The playback rate of the part",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "playbackRate",
		"longname": "Tone.Sequence#playbackRate",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#playbackRate",
		"inherited": true
	},
	{
		"comment": "/**\n\t * \tThe number of scheduled notes in the part. \n\t *  @memberOf Tone.Part#\n\t *  @type {Positive}\n\t *  @name length\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Part.js",
			"lineno": 499,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The number of scheduled notes in the part.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"Positive"
			]
		},
		"name": "length",
		"readonly": true,
		"longname": "Tone.Sequence#length",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Part#length",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The callback to invoke. \n\t\t *  @type  {Function}\n\t\t */",
		"meta": {
			"range": [
				1216,
				1248
			],
			"filename": "Event.js",
			"lineno": 40,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036450",
				"name": "this.callback",
				"type": "MemberExpression",
				"value": "options.callback",
				"paramnames": []
			}
		},
		"description": "The callback to invoke.",
		"type": {
			"names": [
				"function"
			]
		},
		"name": "callback",
		"longname": "Tone.Sequence#callback",
		"kind": "member",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Event#callback",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If mute is true, the callback won't be\n\t\t *  invoked.\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				2501,
				2525
			],
			"filename": "Event.js",
			"lineno": 106,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {
				"id": "astnode100036532",
				"name": "this.mute",
				"type": "MemberExpression",
				"value": "options.mute",
				"paramnames": []
			}
		},
		"description": "If mute is true, the callback won't be\n invoked.",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "mute",
		"longname": "Tone.Sequence#mute",
		"kind": "member",
		"memberof": "Tone.Sequence",
		"scope": "instance",
		"inherits": "Tone.Event#mute",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t *  @type {String}\n\t *  @readOnly\n\t *  @memberOf Tone.Event#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 172,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "Returns the playback state of the note, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"String"
			]
		},
		"readonly": true,
		"memberof": "Tone.Sequence",
		"name": "state",
		"longname": "Tone.Sequence#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Event#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The current progress of the loop interval.\n\t *  Returns 0 if the event is not started yet or\n\t *  it is not set to loop.\n\t *  @memberOf Tone.Event#\n\t *  @type {NormalRange}\n\t *  @name progress\n\t *  @readOnly\n\t */",
		"meta": {
			"filename": "Event.js",
			"lineno": 395,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/event",
			"code": {}
		},
		"description": "The current progress of the loop interval.\n Returns 0 if the event is not started yet or\n it is not set to loop.",
		"memberof": "Tone.Sequence",
		"type": {
			"names": [
				"NormalRange"
			]
		},
		"name": "progress",
		"readonly": true,
		"longname": "Tone.Sequence#progress",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Event#progress",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Monophonic#volume",
		"kind": "member",
		"memberof": "Tone.Monophonic",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.Monophonic#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.Monophonic",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  clean up\n\t *  @returns {Tone.Instrument} this\n\t */",
		"meta": {
			"range": [
				2209,
				2412
			],
			"filename": "Instrument.js",
			"lineno": 84,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042272",
				"name": "Tone.Instrument.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._volume": "Tone.Instrument#_volume",
				"this.volume": "Tone.Instrument#volume"
			}
		},
		"description": "clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Monophonic#dispose",
		"kind": "function",
		"memberof": "Tone.Monophonic",
		"scope": "instance",
		"inherits": "Tone.Instrument#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.AMSynth#portamento",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#portamento",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.AMSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.AMSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.AMSynth#setNote",
		"kind": "function",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#setNote",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.AMSynth#volume",
		"kind": "member",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.AMSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.AMSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.DuoSynth#portamento",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#portamento",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.DuoSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.DuoSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.DuoSynth#setNote",
		"kind": "function",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#setNote",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.DuoSynth#volume",
		"kind": "member",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.DuoSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.DuoSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.FMSynth#portamento",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#portamento",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.FMSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.FMSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.FMSynth#setNote",
		"kind": "function",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#setNote",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.FMSynth#volume",
		"kind": "member",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.FMSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.FMSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.MembraneSynth#volume",
		"kind": "member",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.MembraneSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.MembraneSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.MetalSynth#volume",
		"kind": "member",
		"memberof": "Tone.MetalSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.MonoSynth#portamento",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#portamento",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.MonoSynth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.MonoSynth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.MonoSynth#setNote",
		"kind": "function",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#setNote",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.MonoSynth#volume",
		"kind": "member",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.MonoSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.MonoSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.NoiseSynth#volume",
		"kind": "member",
		"memberof": "Tone.NoiseSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.PluckSynth#volume",
		"kind": "member",
		"memberof": "Tone.PluckSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  @abstract\n\t *  @param {Time} [time=now] when to trigger the release\n\t */",
		"meta": {
			"range": [
				1235,
				1287
			],
			"filename": "Instrument.js",
			"lineno": 58,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042211",
				"name": "Tone.Instrument.prototype.triggerRelease",
				"type": "MemberExpression",
				"value": "Tone.noOp",
				"paramnames": []
			}
		},
		"virtual": true,
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "when to trigger the release",
				"name": "time"
			}
		],
		"name": "triggerRelease",
		"longname": "Tone.PluckSynth#triggerRelease",
		"kind": "member",
		"memberof": "Tone.PluckSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.PluckSynth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.PluckSynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.PolySynth#volume",
		"kind": "member",
		"memberof": "Tone.PolySynth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The glide time between notes. \n\t\t *  @type {Time}\n\t\t */",
		"meta": {
			"range": [
				629,
				665
			],
			"filename": "Monophonic.js",
			"lineno": 24,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043464",
				"name": "this.portamento",
				"type": "MemberExpression",
				"value": "options.portamento",
				"paramnames": []
			}
		},
		"description": "The glide time between notes.",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "portamento",
		"longname": "Tone.Synth#portamento",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#portamento",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack of the note optionally with a given velocity. \n\t *  \n\t *  \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} [time=now]     When the note should start.\n\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t *                                determines how \"loud\" the note \n\t *                                will be triggered.\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerAttack(\"C4\");\n\t *  @example\n\t * //trigger the note a half second from now at half velocity\n\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				1431,
				1629
			],
			"filename": "Monophonic.js",
			"lineno": 54,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043493",
				"name": "Tone.Monophonic.prototype.triggerAttack",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerAttack~time"
			}
		},
		"description": "Trigger the attack of the note optionally with a given velocity.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should start.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "velocity The velocity scaler \n                               determines how \"loud\" the note \n                               will be triggered.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerAttack(\"C4\");\n ",
			"//trigger the note a half second from now at half velocity\nsynth.triggerAttack(\"C4\", \"+0.5\", 0.5);"
		],
		"name": "triggerAttack",
		"longname": "Tone.Synth#triggerAttack",
		"kind": "function",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerAttack",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the release portion of the envelope\n\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t *  @returns {Tone.Monophonic} this\n\t *  @example\n\t * synth.triggerRelease();\n\t */",
		"meta": {
			"range": [
				1854,
				1999
			],
			"filename": "Monophonic.js",
			"lineno": 68,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043531",
				"name": "Tone.Monophonic.prototype.triggerRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#triggerRelease~time"
			}
		},
		"description": "Trigger the release portion of the envelope",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "If no time is given, the release happens immediatly",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"synth.triggerRelease();"
		],
		"name": "triggerRelease",
		"longname": "Tone.Synth#triggerRelease",
		"kind": "function",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#triggerRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set the note at the given time. If no time is given, the note\n\t *  will set immediately. \n\t *  @param {Frequency} note The note to change to.\n\t *  @param  {Time} [time=now] The time when the note should be set. \n\t *  @returns {Tone.Monophonic} this\n\t * @example\n\t * //change to F#6 in one quarter note from now.\n\t * synth.setNote(\"F#6\", \"+4n\");\n\t * @example\n\t * //change to Bb4 right now\n\t * synth.setNote(\"Bb4\");\n\t */",
		"meta": {
			"range": [
				2747,
				3160
			],
			"filename": "Monophonic.js",
			"lineno": 101,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100043581",
				"name": "Tone.Monophonic.prototype.setNote",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"time"
				]
			},
			"vars": {
				"time": "Tone.Monophonic#setNote~time",
				"currentNote": "Tone.Monophonic#setNote~currentNote",
				"portTime": "Tone.Monophonic#setNote~portTime"
			}
		},
		"description": "Set the note at the given time. If no time is given, the note\n will set immediately.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to change to.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "The time when the note should be set.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Monophonic"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//change to F#6 in one quarter note from now.\nsynth.setNote(\"F#6\", \"+4n\");",
			"//change to Bb4 right now\nsynth.setNote(\"Bb4\");"
		],
		"name": "setNote",
		"longname": "Tone.Synth#setNote",
		"kind": "function",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Monophonic#setNote",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				638,
				671
			],
			"filename": "Instrument.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042165",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Synth#volume",
		"kind": "member",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Instrument#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Trigger the attack and then the release after the duration. \n\t *  @param  {Frequency} note     The note to trigger.\n\t *  @param  {Time} duration How long the note should be held for before\n\t *                          triggering the release. This value must be greater than 0. \n\t *  @param {Time} [time=now]  When the note should be triggered.\n\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t *  @returns {Tone.Instrument} this\n\t *  @example\n\t * //trigger \"C4\" for the duration of an 8th note\n\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t */",
		"meta": {
			"range": [
				1882,
				2144
			],
			"filename": "Instrument.js",
			"lineno": 72,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/instrument",
			"code": {
				"id": "astnode100042223",
				"name": "Tone.Instrument.prototype.triggerAttackRelease",
				"type": "FunctionExpression",
				"paramnames": [
					"note",
					"duration",
					"time",
					"velocity"
				]
			},
			"vars": {
				"time": "Tone.Instrument#triggerAttackRelease~time",
				"duration": "Tone.Instrument#triggerAttackRelease~duration"
			}
		},
		"description": "Trigger the attack and then the release after the duration.",
		"params": [
			{
				"type": {
					"names": [
						"Frequency"
					]
				},
				"description": "The note to trigger.",
				"name": "note"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "How long the note should be held for before\n                         triggering the release. This value must be greater than 0.",
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the note should be triggered.",
				"name": "time"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "The velocity the note should be triggered at.",
				"name": "velocity"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Instrument"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//trigger \"C4\" for the duration of an 8th note\nsynth.triggerAttackRelease(\"C4\", \"8n\");"
		],
		"name": "triggerAttackRelease",
		"longname": "Tone.Synth#triggerAttackRelease",
		"kind": "function",
		"memberof": "Tone.Synth",
		"scope": "instance",
		"inherits": "Tone.Instrument#triggerAttackRelease",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Abs#connect",
		"kind": "function",
		"memberof": "Tone.Abs",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.Signal#units",
		"kind": "member",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.Signal#convert",
		"kind": "member",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.Signal",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.Signal#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.Signal#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.Signal#setRampPoint",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.Signal#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.Signal#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.Signal#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.Signal#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.Signal#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#setTargetAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.Signal#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.Signal#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.Signal#rampTo",
		"kind": "function",
		"memberof": "Tone.Signal",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.Signal",
		"name": "lfo",
		"longname": "Tone.Signal#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.Add#connect",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.Add#units",
		"kind": "member",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.Add#convert",
		"kind": "member",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.Add",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.Add#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.Add#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.Add#setRampPoint",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.Add#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.Add#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.Add#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.Add#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.Add#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#setTargetAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.Add#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.Add#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.Add#rampTo",
		"kind": "function",
		"memberof": "Tone.Add",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.Add",
		"name": "lfo",
		"longname": "Tone.Add#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.AudioToGain#connect",
		"kind": "function",
		"memberof": "Tone.AudioToGain",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.EqualPowerGain#connect",
		"kind": "function",
		"memberof": "Tone.EqualPowerGain",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Expr#connect",
		"kind": "function",
		"memberof": "Tone.Expr",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.GainToAudio#connect",
		"kind": "function",
		"memberof": "Tone.GainToAudio",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.GreaterThan#connect",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.GreaterThan#units",
		"kind": "member",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.GreaterThan#convert",
		"kind": "member",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.GreaterThan",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.GreaterThan#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.GreaterThan#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.GreaterThan#setRampPoint",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.GreaterThan#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.GreaterThan#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.GreaterThan#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.GreaterThan#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.GreaterThan#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#setTargetAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.GreaterThan#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.GreaterThan#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.GreaterThan#rampTo",
		"kind": "function",
		"memberof": "Tone.GreaterThan",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.GreaterThan",
		"name": "lfo",
		"longname": "Tone.GreaterThan#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.GreaterThanZero#connect",
		"kind": "function",
		"memberof": "Tone.GreaterThanZero",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Modulo#connect",
		"kind": "function",
		"memberof": "Tone.Modulo",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.Multiply#connect",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.Multiply#units",
		"kind": "member",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.Multiply#convert",
		"kind": "member",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.Multiply",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.Multiply#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.Multiply#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.Multiply#setRampPoint",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.Multiply#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.Multiply#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.Multiply#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.Multiply#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.Multiply#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#setTargetAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.Multiply#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.Multiply#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.Multiply#rampTo",
		"kind": "function",
		"memberof": "Tone.Multiply",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.Multiply",
		"name": "lfo",
		"longname": "Tone.Multiply#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Negate#connect",
		"kind": "function",
		"memberof": "Tone.Negate",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Normalize#connect",
		"kind": "function",
		"memberof": "Tone.Normalize",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Pow#connect",
		"kind": "function",
		"memberof": "Tone.Pow",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Scale#connect",
		"kind": "function",
		"memberof": "Tone.Scale",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.ScaleExp#connect",
		"kind": "function",
		"memberof": "Tone.ScaleExp",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.Subtract#connect",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.Subtract#units",
		"kind": "member",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.Subtract#convert",
		"kind": "member",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the parameter. \n\t * @memberOf Tone.Param#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 75,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The current value of the parameter.",
		"memberof": "Tone.Subtract",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.Subtract#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				4157,
				4311
			],
			"filename": "Param.js",
			"lineno": 170,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022064",
				"name": "Tone.Param.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"time"
				]
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.Subtract#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Creates a schedule point with the current value at the current time.\n\t *  This is useful for creating an automation anchor point in order to \n\t *  schedule changes from the current value. \n\t *\n\t *  @param {number=} now (Optionally) pass the now value in. \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				4618,
				5007
			],
			"filename": "Param.js",
			"lineno": 183,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022096",
				"name": "Tone.Param.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"now"
				]
			},
			"vars": {
				"now": "Tone.Param#setRampPoint~now",
				"currentVal": "Tone.Param#setRampPoint~currentVal"
			}
		},
		"description": "Creates a schedule point with the current value at the current time.\n This is useful for creating an automation anchor point in order to \n schedule changes from the current value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"description": "(Optionally) pass the now value in.",
				"name": "now"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.Subtract#setRampPoint",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5250,
				5445
			],
			"filename": "Param.js",
			"lineno": 203,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022150",
				"name": "Tone.Param.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#linearRampToValueAtTime~value"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.Subtract#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				5694,
				5943
			],
			"filename": "Param.js",
			"lineno": 217,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022186",
				"name": "Tone.Param.prototype.exponentialRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.Param#exponentialRampToValueAtTime~value"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueAtTime",
		"longname": "Tone.Subtract#exponentialRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.Subtract#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.Subtract#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start exponentially approaching the target value at the given time with\n\t *  a rate having the given time constant.\n\t *  @param {number} value        \n\t *  @param {Time} startTime    \n\t *  @param {number} timeConstant \n\t *  @returns {Tone.Param} this \n\t */",
		"meta": {
			"range": [
				7867,
				8377
			],
			"filename": "Param.js",
			"lineno": 274,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022319",
				"name": "Tone.Param.prototype.setTargetAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime",
					"timeConstant"
				]
			},
			"vars": {
				"value": "Tone.Param#setTargetAtTime~value",
				"timeConstant": "Tone.Param#setTargetAtTime~timeConstant"
			}
		},
		"description": "Start exponentially approaching the target value at the given time with\n a rate having the given time constant.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "timeConstant"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setTargetAtTime",
		"longname": "Tone.Subtract#setTargetAtTime",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#setTargetAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets an array of arbitrary parameter values starting at the given time\n\t *  for the given duration.\n\t *  \t\n\t *  @param {Array} values    \n\t *  @param {Time} startTime \n\t *  @param {Time} duration  \n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				8626,
				9038
			],
			"filename": "Param.js",
			"lineno": 294,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022379",
				"name": "Tone.Param.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration"
				]
			},
			"vars": {
				"duration": "Tone.Param#setValueCurveAtTime~duration",
				"startTime": "Tone.Param#setValueCurveAtTime~startTime",
				"segTime": "Tone.Param#setValueCurveAtTime~segTime",
				"i": "Tone.Param#setValueCurveAtTime~i"
			}
		},
		"description": "Sets an array of arbitrary parameter values starting at the given time\n for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.Subtract#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.Param} this\n\t */",
		"meta": {
			"range": [
				9218,
				9365
			],
			"filename": "Param.js",
			"lineno": 312,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022462",
				"name": "Tone.Param.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"startTime"
				]
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.Subtract#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.Subtract#rampTo",
		"kind": "function",
		"memberof": "Tone.Subtract",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.Subtract",
		"name": "lfo",
		"longname": "Tone.Subtract#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.TimelineSignal#connect",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true,
		"overrides": "Tone.Signal#connect"
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.TimelineSignal#units",
		"kind": "member",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.TimelineSignal#convert",
		"kind": "member",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.TimelineSignal#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.TimelineSignal#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.TimelineSignal#rampTo",
		"kind": "function",
		"memberof": "Tone.TimelineSignal",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.TimelineSignal",
		"name": "lfo",
		"longname": "Tone.TimelineSignal#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The current value of the signal. \n\t * @memberOf Tone.TimelineSignal#\n\t * @type {Number}\n\t * @name value\n\t */",
		"meta": {
			"filename": "TimelineSignal.js",
			"lineno": 50,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {}
		},
		"description": "The current value of the signal.",
		"memberof": "Tone.TickSignal",
		"type": {
			"names": [
				"Number"
			]
		},
		"name": "value",
		"longname": "Tone.TickSignal#value",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.TimelineSignal#value",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a parameter value change at the given time.\n\t *  @param {*}\tvalue The value to set the signal.\n\t *  @param {Time}  time The time when the change should occur.\n\t *  @returns {Tone.TimelineSignal} this\n\t *  @example\n\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t */",
		"meta": {
			"range": [
				2251,
				2609
			],
			"filename": "TimelineSignal.js",
			"lineno": 85,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051601",
				"name": "Tone.TimelineSignal.prototype.setValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"startTime"
				]
			},
			"vars": {
				"value": "Tone.TimelineSignal#setValueAtTime~value",
				"startTime": "Tone.TimelineSignal#setValueAtTime~startTime"
			}
		},
		"description": "Schedules a parameter value change at the given time.",
		"params": [
			{
				"type": {
					"names": [
						"*"
					]
				},
				"description": "The value to set the signal.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time when the change should occur.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//set the frequency to \"G4\" in exactly 1 second from now. \nfreq.setValueAtTime(\"G4\", \"+1\");"
		],
		"name": "setValueAtTime",
		"longname": "Tone.TickSignal#setValueAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"overrides": "Tone.TimelineSignal#setValueAtTime",
		"inherits": "Tone.TimelineSignal#setValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules a linear continuous change in parameter value from the \n\t *  previous scheduled parameter value to the given value.\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} endTime \n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				2861,
				3200
			],
			"filename": "TimelineSignal.js",
			"lineno": 106,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051661",
				"name": "Tone.TimelineSignal.prototype.linearRampToValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"endTime"
				]
			},
			"vars": {
				"value": "Tone.TimelineSignal#linearRampToValueAtTime~value",
				"endTime": "Tone.TimelineSignal#linearRampToValueAtTime~endTime"
			}
		},
		"description": "Schedules a linear continuous change in parameter value from the \n previous scheduled parameter value to the given value.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "endTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueAtTime",
		"longname": "Tone.TickSignal#linearRampToValueAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"overrides": "Tone.TimelineSignal#linearRampToValueAtTime",
		"inherits": "Tone.TimelineSignal#linearRampToValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t *  @param {Float32Array} values        \n\t *  @param {Time} startTime    \n\t *  @param {Time} duration\n\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t *  @returns {Tone.TimelineSignal} this \n\t */",
		"meta": {
			"range": [
				5490,
				5959
			],
			"filename": "TimelineSignal.js",
			"lineno": 182,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100051936",
				"name": "Tone.TimelineSignal.prototype.setValueCurveAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"values",
					"startTime",
					"duration",
					"scaling"
				]
			},
			"vars": {
				"scaling": "Tone.TimelineSignal#setValueCurveAtTime~scaling",
				"duration": "Tone.TimelineSignal#setValueCurveAtTime~duration",
				"startTime": "Tone.TimelineSignal#setValueCurveAtTime~startTime",
				"segTime": "Tone.TimelineSignal#setValueCurveAtTime~segTime",
				"i": "Tone.TimelineSignal#setValueCurveAtTime~i"
			}
		},
		"description": "Set an array of arbitrary values starting at the given time for the given duration.",
		"params": [
			{
				"type": {
					"names": [
						"Float32Array"
					]
				},
				"name": "values"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "duration"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "If the values in the curve should be scaled by some value",
				"name": "scaling"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setValueCurveAtTime",
		"longname": "Tone.TickSignal#setValueCurveAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#setValueCurveAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Cancels all scheduled parameter changes with times greater than or \n\t *  equal to startTime.\n\t *  \n\t *  @param  {Time} startTime\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				6148,
				6345
			],
			"filename": "TimelineSignal.js",
			"lineno": 201,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052027",
				"name": "Tone.TimelineSignal.prototype.cancelScheduledValues",
				"type": "FunctionExpression",
				"paramnames": [
					"after"
				]
			},
			"vars": {
				"after": "Tone.TimelineSignal#cancelScheduledValues~after"
			}
		},
		"description": "Cancels all scheduled parameter changes with times greater than or \n equal to startTime.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "cancelScheduledValues",
		"longname": "Tone.TickSignal#cancelScheduledValues",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#cancelScheduledValues",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sets the computed value at the given time. This provides\n\t *  a point from which a linear or exponential curve\n\t *  can be scheduled after. Will cancel events after \n\t *  the given time and shorten the currently scheduled\n\t *  linear or exponential ramp so that it ends at `time` .\n\t *  This is to avoid discontinuities and clicks in envelopes. \n\t *  @param {Time} time When to set the ramp point\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				6802,
				7707
			],
			"filename": "TimelineSignal.js",
			"lineno": 218,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052065",
				"name": "Tone.TimelineSignal.prototype.setRampPoint",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.TimelineSignal#setRampPoint~time",
				"val": "Tone.TimelineSignal#setRampPoint~val",
				"before": "Tone.TimelineSignal#setRampPoint~before",
				"after": "Tone.TimelineSignal#setRampPoint~after"
			}
		},
		"description": "Sets the computed value at the given time. This provides\n a point from which a linear or exponential curve\n can be scheduled after. Will cancel events after \n the given time and shorten the currently scheduled\n linear or exponential ramp so that it ends at `time` .\n This is to avoid discontinuities and clicks in envelopes.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "When to set the ramp point",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "setRampPoint",
		"longname": "Tone.TickSignal#setRampPoint",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#setRampPoint",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Do a linear ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				8099,
				8282
			],
			"filename": "TimelineSignal.js",
			"lineno": 253,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052191",
				"name": "Tone.TimelineSignal.prototype.linearRampToValueBetween",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"start",
					"finish"
				]
			}
		},
		"description": "Do a linear ramp to the given value between the start and finish times.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The beginning anchor point to do the linear ramp",
				"name": "start"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
				"name": "finish"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "linearRampToValueBetween",
		"longname": "Tone.TickSignal#linearRampToValueBetween",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#linearRampToValueBetween",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Do a exponential ramp to the given value between the start and finish times.\n\t *  @param {Number} value The value to ramp to.\n\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t *  @param {Time} finish The ending anchor point by which the value of\n\t *                       the signal will equal the given value.\n\t *  @returns {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				8684,
				8877
			],
			"filename": "TimelineSignal.js",
			"lineno": 267,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052220",
				"name": "Tone.TimelineSignal.prototype.exponentialRampToValueBetween",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"start",
					"finish"
				]
			}
		},
		"description": "Do a exponential ramp to the given value between the start and finish times.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The beginning anchor point to do the exponential ramp",
				"name": "start"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The ending anchor point by which the value of\n                      the signal will equal the given value.",
				"name": "finish"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "exponentialRampToValueBetween",
		"longname": "Tone.TickSignal#exponentialRampToValueBetween",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#exponentialRampToValueBetween",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Get the scheduled value at the given time. This will\n\t *  return the unconverted (raw) value.\n\t *  @param  {Number}  time  The time in seconds.\n\t *  @return  {Number}  The scheduled value at the given time.\n\t */",
		"meta": {
			"range": [
				9852,
				10907
			],
			"filename": "TimelineSignal.js",
			"lineno": 303,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052289",
				"name": "Tone.TimelineSignal.prototype.getValueAtTime",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.TimelineSignal#getValueAtTime~time",
				"after": "Tone.TimelineSignal#getValueAtTime~after",
				"before": "Tone.TimelineSignal#getValueAtTime~before",
				"value": "Tone.TimelineSignal#getValueAtTime~value",
				"previous": "Tone.TimelineSignal#getValueAtTime~previous",
				"previouVal": "Tone.TimelineSignal#getValueAtTime~previouVal"
			}
		},
		"description": "Get the scheduled value at the given time. This will\n return the unconverted (raw) value.",
		"params": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The time in seconds.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Number"
					]
				},
				"description": "The scheduled value at the given time."
			}
		],
		"name": "getValueAtTime",
		"longname": "Tone.TickSignal#getValueAtTime",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#getValueAtTime",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t *  @method\n\t */",
		"meta": {
			"range": [
				2369,
				2434
			],
			"filename": "Signal.js",
			"lineno": 73,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050354",
				"name": "Tone.Signal.prototype.connect",
				"type": "MemberExpression",
				"value": "Tone.SignalBase.prototype.connect",
				"paramnames": []
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"kind": "function",
		"name": "connect",
		"longname": "Tone.TickSignal#connect",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Signal#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up.\n\t *  @return {Tone.TimelineSignal} this\n\t */",
		"meta": {
			"range": [
				12593,
				12740
			],
			"filename": "TimelineSignal.js",
			"lineno": 381,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100052615",
				"name": "Tone.TimelineSignal.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._events": "Tone.TimelineSignal#_events"
			}
		},
		"description": "Clean up.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimelineSignal"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.TickSignal#dispose",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.TimelineSignal#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  The units of the parameter\n\t\t *  @type {Tone.Type}\n\t\t */",
		"meta": {
			"range": [
				871,
				897
			],
			"filename": "Param.js",
			"lineno": 31,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021688",
				"name": "this.units",
				"type": "MemberExpression",
				"value": "options.units",
				"paramnames": []
			}
		},
		"description": "The units of the parameter",
		"type": {
			"names": [
				"Tone.Type"
			]
		},
		"name": "units",
		"longname": "Tone.TickSignal#units",
		"kind": "member",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Param#units",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t *  If the value should be converted or not\n\t\t *  @type {Boolean}\n\t\t */",
		"meta": {
			"range": [
				982,
				1012
			],
			"filename": "Param.js",
			"lineno": 37,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100021696",
				"name": "this.convert",
				"type": "MemberExpression",
				"value": "options.convert",
				"paramnames": []
			}
		},
		"description": "If the value should be converted or not",
		"type": {
			"names": [
				"Boolean"
			]
		},
		"name": "convert",
		"longname": "Tone.TickSignal#convert",
		"kind": "member",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Param#convert",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an exponential continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //exponentially ramp to the value 2 over 4 seconds. \n\t * signal.exponentialRampToValue(2, 4);\n\t */",
		"meta": {
			"range": [
				6526,
				6782
			],
			"filename": "Param.js",
			"lineno": 238,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022233",
				"name": "Tone.Param.prototype.exponentialRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#exponentialRampToValue~startTime"
			}
		},
		"description": "Schedules an exponential continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//exponentially ramp to the value 2 over 4 seconds. \nsignal.exponentialRampToValue(2, 4);"
		],
		"name": "exponentialRampToValue",
		"longname": "Tone.TickSignal#exponentialRampToValue",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Param#exponentialRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Schedules an linear continuous change in parameter value from \n\t *  the current time and current value to the given value over the \n\t *  duration of the rampTime.\n\t *  \n\t *  @param  {number} value   The value to ramp to.\n\t *  @param  {Time} rampTime the time that it takes the \n\t *                               value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //linearly ramp to the value 4 over 3 seconds. \n\t * signal.linearRampToValue(4, 3);\n\t */",
		"meta": {
			"range": [
				7350,
				7596
			],
			"filename": "Param.js",
			"lineno": 259,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022276",
				"name": "Tone.Param.prototype.linearRampToValue",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"startTime": "Tone.Param#linearRampToValue~startTime"
			}
		},
		"description": "Schedules an linear continuous change in parameter value from \n the current time and current value to the given value over the \n duration of the rampTime.",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"description": "The value to ramp to.",
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "the time that it takes the \n                              value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//linearly ramp to the value 4 over 3 seconds. \nsignal.linearRampToValue(4, 3);"
		],
		"name": "linearRampToValue",
		"longname": "Tone.TickSignal#linearRampToValue",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Param#linearRampToValue",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Ramps to the given value over the duration of the rampTime. \n\t *  Automatically selects the best ramp type (exponential or linear)\n\t *  depending on the `units` of the signal\n\t *  \n\t *  @param  {number} value   \n\t *  @param  {Time} rampTime \tThe time that it takes the \n\t *                              value to ramp from it's current value\n\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t *  @returns {Tone.Param} this\n\t *  @example\n\t * //ramp to the value either linearly or exponentially \n\t * //depending on the \"units\" value of the signal\n\t * signal.rampTo(0, 10);\n\t *  @example\n\t * //schedule it to ramp starting at a specific time\n\t * signal.rampTo(0, 10, 5)\n\t */",
		"meta": {
			"range": [
				10067,
				10437
			],
			"filename": "Param.js",
			"lineno": 335,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {
				"id": "astnode100022488",
				"name": "Tone.Param.prototype.rampTo",
				"type": "FunctionExpression",
				"paramnames": [
					"value",
					"rampTime",
					"startTime"
				]
			},
			"vars": {
				"rampTime": "Tone.Param#rampTo~rampTime"
			}
		},
		"description": "Ramps to the given value over the duration of the rampTime. \n Automatically selects the best ramp type (exponential or linear)\n depending on the `units` of the signal",
		"params": [
			{
				"type": {
					"names": [
						"number"
					]
				},
				"name": "value"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The time that it takes the \n                             value to ramp from it's current value",
				"name": "rampTime"
			},
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the ramp should start.",
				"name": "startTime"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Param"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//ramp to the value either linearly or exponentially \n//depending on the \"units\" value of the signal\nsignal.rampTo(0, 10);\n ",
			"//schedule it to ramp starting at a specific time\nsignal.rampTo(0, 10, 5)"
		],
		"name": "rampTo",
		"longname": "Tone.TickSignal#rampTo",
		"kind": "function",
		"memberof": "Tone.TickSignal",
		"scope": "instance",
		"inherits": "Tone.Param#rampTo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  The LFO created by the signal instance. If none\n\t *  was created, this is null.\n\t *  @type {Tone.LFO}\n\t *  @readOnly\n\t *  @memberOf Tone.Param#\n\t *  @name lfo\n\t */",
		"meta": {
			"filename": "Param.js",
			"lineno": 345,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/core",
			"code": {}
		},
		"description": "The LFO created by the signal instance. If none\n was created, this is null.",
		"type": {
			"names": [
				"Tone.LFO"
			]
		},
		"readonly": true,
		"memberof": "Tone.TickSignal",
		"name": "lfo",
		"longname": "Tone.TickSignal#lfo",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Param#lfo",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.WaveShaper#connect",
		"kind": "function",
		"memberof": "Tone.WaveShaper",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  When signals connect to other signals or AudioParams, \n\t *  they take over the output value of that signal or AudioParam. \n\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t *\n\t *  @override\n\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t *  @returns {Tone.SignalBase} this\n\t */",
		"meta": {
			"range": [
				741,
				1421
			],
			"filename": "SignalBase.js",
			"lineno": 28,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/signal",
			"code": {
				"id": "astnode100050432",
				"name": "Tone.SignalBase.prototype.connect",
				"type": "FunctionExpression",
				"paramnames": [
					"node",
					"outputNumber",
					"inputNumber"
				]
			},
			"vars": {
				"node._param.value": "node._param.value",
				"node.overridden": "node.overridden",
				"node.value": "node.value"
			}
		},
		"description": "When signals connect to other signals or AudioParams, \n they take over the output value of that signal or AudioParam. \n For all other nodes, the behavior is the same as a default <code>connect</code>.",
		"override": true,
		"params": [
			{
				"type": {
					"names": [
						"AudioParam",
						"AudioNode",
						"Tone.Signal",
						"Tone"
					]
				},
				"name": "node"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The output number to connect from.",
				"name": "outputNumber"
			},
			{
				"type": {
					"names": [
						"number"
					]
				},
				"optional": true,
				"defaultvalue": 0,
				"description": "The input number to connect to.",
				"name": "inputNumber"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.SignalBase"
					]
				},
				"description": "this"
			}
		],
		"name": "connect",
		"longname": "Tone.Zero#connect",
		"kind": "function",
		"memberof": "Tone.Zero",
		"scope": "instance",
		"inherits": "Tone.SignalBase#connect",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.Oscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.Oscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.Oscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.Oscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Oscillator#volume",
		"kind": "member",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Oscillator",
		"name": "state",
		"longname": "Tone.Oscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.Oscillator#start",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.Oscillator#stop",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.Oscillator#sync",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.Oscillator#unsync",
		"kind": "function",
		"memberof": "Tone.Oscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t *  will also affect the oscillators frequency. \n\t *  @returns {Tone.Oscillator} this\n\t *  @example\n\t * Tone.Transport.bpm.value = 120;\n\t * osc.frequency.value = 440;\n\t * //the ration between the bpm and the frequency will be maintained\n\t * osc.syncFrequency();\n\t * Tone.Transport.bpm.value = 240; \n\t * // the frequency of the oscillator is doubled to 880\n\t */",
		"meta": {
			"range": [
				4118,
				4234
			],
			"filename": "Oscillator.js",
			"lineno": 164,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100059988",
				"name": "Tone.Oscillator.prototype.syncFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n will also affect the oscillators frequency.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Oscillator"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Transport.bpm.value = 120;\nosc.frequency.value = 440;\n//the ration between the bpm and the frequency will be maintained\nosc.syncFrequency();\nTone.Transport.bpm.value = 240; \n// the frequency of the oscillator is doubled to 880"
		],
		"name": "syncFrequency",
		"longname": "Tone.AMOscillator#syncFrequency",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Oscillator#syncFrequency",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the oscillator's frequency from the Transport. \n\t *  See Tone.Oscillator.syncFrequency\n\t *  @returns {Tone.Oscillator} this\n\t */",
		"meta": {
			"range": [
				4384,
				4504
			],
			"filename": "Oscillator.js",
			"lineno": 174,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100060011",
				"name": "Tone.Oscillator.prototype.unsyncFrequency",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Unsync the oscillator's frequency from the Transport. \n See Tone.Oscillator.syncFrequency",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Oscillator"
					]
				},
				"description": "this"
			}
		],
		"name": "unsyncFrequency",
		"longname": "Tone.AMOscillator#unsyncFrequency",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Oscillator#unsyncFrequency",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.AMOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.AMOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.AMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.AMOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.AMOscillator#volume",
		"kind": "member",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.AMOscillator",
		"name": "state",
		"longname": "Tone.AMOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.AMOscillator#start",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.AMOscillator#stop",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.AMOscillator#sync",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.AMOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.AMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.FatOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.FatOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.FatOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.FatOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.FatOscillator#volume",
		"kind": "member",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.FatOscillator",
		"name": "state",
		"longname": "Tone.FatOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.FatOscillator#start",
		"kind": "function",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.FatOscillator#stop",
		"kind": "function",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.FatOscillator#sync",
		"kind": "function",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.FatOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.FatOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.FMOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.FMOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.FMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.FMOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.FMOscillator#volume",
		"kind": "member",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.FMOscillator",
		"name": "state",
		"longname": "Tone.FMOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.FMOscillator#start",
		"kind": "function",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.FMOscillator#stop",
		"kind": "function",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.FMOscillator#sync",
		"kind": "function",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.FMOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.FMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Noise",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.Noise#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.Noise",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.Noise#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.Noise",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.Noise#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Noise#volume",
		"kind": "member",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Noise",
		"name": "state",
		"longname": "Tone.Noise#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.Noise#start",
		"kind": "function",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.Noise#stop",
		"kind": "function",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.Noise#sync",
		"kind": "function",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.Noise#unsync",
		"kind": "function",
		"memberof": "Tone.Noise",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.OmniOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.OmniOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.OmniOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.OmniOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.OmniOscillator#volume",
		"kind": "member",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.OmniOscillator",
		"name": "state",
		"longname": "Tone.OmniOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.OmniOscillator#start",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.OmniOscillator#stop",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.OmniOscillator#sync",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.OmniOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.OmniOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.Player",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.Player#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.Player#volume",
		"kind": "member",
		"memberof": "Tone.Player",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.Player",
		"name": "state",
		"longname": "Tone.Player#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.Player#stop",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.Player#sync",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.Player#unsync",
		"kind": "function",
		"memberof": "Tone.Player",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.PulseOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.PulseOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.PulseOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.PulseOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.PulseOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.PulseOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.PulseOscillator#volume",
		"kind": "member",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.PulseOscillator",
		"name": "state",
		"longname": "Tone.PulseOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.PulseOscillator#start",
		"kind": "function",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.PulseOscillator#stop",
		"kind": "function",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.PulseOscillator#sync",
		"kind": "function",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.PulseOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.PulseOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t * Mute the output. \n\t * @memberOf Tone.Source#\n\t * @type {boolean}\n\t * @name mute\n\t * @example\n\t * //mute the output\n\t * source.mute = true;\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 104,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Mute the output.",
		"memberof": "Tone.PWMOscillator",
		"type": {
			"names": [
				"boolean"
			]
		},
		"name": "mute",
		"examples": [
			"//mute the output\nsource.mute = true;"
		],
		"longname": "Tone.PWMOscillator#mute",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#mute",
		"inherited": true,
		"overrides": "Tone.Source#mute"
	},
	{
		"comment": "/**\n\t * The fadeIn time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeIn\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 122,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeIn time of the amplitude envelope.",
		"memberof": "Tone.PWMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeIn",
		"longname": "Tone.PWMOscillator#fadeIn",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeIn",
		"inherited": true
	},
	{
		"comment": "/**\n\t * The fadeOut time of the amplitude envelope.\n\t * @memberOf Tone.Source#\n\t * @type {Time}\n\t * @name fadeOut\n\t */",
		"meta": {
			"filename": "Players.js",
			"lineno": 140,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "The fadeOut time of the amplitude envelope.",
		"memberof": "Tone.PWMOscillator",
		"type": {
			"names": [
				"Time"
			]
		},
		"name": "fadeOut",
		"longname": "Tone.PWMOscillator#fadeOut",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#fadeOut",
		"inherited": true
	},
	{
		"comment": "/**\n\t\t * The volume of the output in decibels.\n\t\t * @type {Decibels}\n\t\t * @signal\n\t\t * @example\n\t\t * source.volume.value = -6;\n\t\t */",
		"meta": {
			"range": [
				1173,
				1206
			],
			"filename": "Source.js",
			"lineno": 48,
			"columnno": 2,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063313",
				"name": "this.volume",
				"type": "MemberExpression",
				"value": "this._volume.volume",
				"paramnames": []
			}
		},
		"description": "The volume of the output in decibels.",
		"type": {
			"names": [
				"Decibels"
			]
		},
		"tags": [
			{
				"originalTitle": "signal",
				"title": "signal",
				"text": ""
			}
		],
		"examples": [
			"source.volume.value = -6;"
		],
		"name": "volume",
		"longname": "Tone.PWMOscillator#volume",
		"kind": "member",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#volume",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t *  @type {Tone.State}\n\t *  @readOnly\n\t *  @memberOf Tone.Source#\n\t *  @name state\n\t */",
		"meta": {
			"filename": "Source.js",
			"lineno": 93,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {}
		},
		"description": "Returns the playback state of the source, either \"started\" or \"stopped\".",
		"type": {
			"names": [
				"Tone.State"
			]
		},
		"readonly": true,
		"memberof": "Tone.PWMOscillator",
		"name": "state",
		"longname": "Tone.PWMOscillator#state",
		"scope": "instance",
		"kind": "member",
		"inherits": "Tone.Source#state",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Start the source at the specified time. If no time is given, \n\t *  start the source now.\n\t *  @param  {Time} [time=now] When the source should be started.\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t */",
		"meta": {
			"range": [
				3304,
				4091
			],
			"filename": "Source.js",
			"lineno": 144,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063536",
				"name": "Tone.Source.prototype.start",
				"type": "FunctionExpression",
				"paramnames": [
					"time",
					"offset",
					"duration"
				]
			},
			"vars": {
				"time": "Tone.Source#start~time",
				"event": "Tone.Source#start~event",
				"event.offset": "Tone.Source#start~event.offset",
				"event.duration": "Tone.Source#start~event.duration",
				"sched": "Tone.Source#start~sched",
				"": null
			}
		},
		"description": "Start the source at the specified time. If no time is given, \n start the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be started.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.start(\"+0.5\"); //starts the source 0.5 seconds from now"
		],
		"name": "start",
		"longname": "Tone.PWMOscillator#start",
		"kind": "function",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#start",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Stop the source at the specified time. If no time is given, \n\t *  stop the source now.\n\t *  @param  {Time} [time=now] When the source should be stopped. \n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * source.stop(); // stops the source immediately\n\t */",
		"meta": {
			"range": [
				4362,
				4809
			],
			"filename": "Source.js",
			"lineno": 178,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063694",
				"name": "Tone.Source.prototype.stop",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"time": "Tone.Source#stop~time",
				"sched": "Tone.Source#stop~sched"
			}
		},
		"description": "Stop the source at the specified time. If no time is given, \n stop the source now.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"optional": true,
				"defaultvalue": "now",
				"description": "When the source should be stopped.",
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"source.stop(); // stops the source immediately"
		],
		"name": "stop",
		"longname": "Tone.PWMOscillator#stop",
		"kind": "function",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#stop",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Sync the source to the Transport so that all subsequent\n\t *  calls to `start` and `stop` are synced to the TransportTime\n\t *  instead of the AudioContext time. \n\t *\n\t *  @returns {Tone.Source} this\n\t *  @example\n\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t * source.sync().start(0).stop(0.3);\n\t * //start the transport.\n\t * Tone.Transport.start();\n\t *\n\t *  @example\n\t * //start the transport with an offset and the sync'ed sources\n\t * //will start in the correct position\n\t * source.sync().start(0.1);\n\t * //the source will be invoked with an offset of 0.4\n\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t */",
		"meta": {
			"range": [
				5467,
				6485
			],
			"filename": "Source.js",
			"lineno": 214,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063798",
				"name": "Tone.Source.prototype.sync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"this._syncedStart": "Tone.Source#_syncedStart",
				"": null,
				"this._syncedStop": "Tone.Source#_syncedStop"
			}
		},
		"description": "Sync the source to the Transport so that all subsequent\n calls to `start` and `stop` are synced to the TransportTime\n instead of the AudioContext time.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"//sync the source so that it plays between 0 and 0.3 on the Transport's timeline\nsource.sync().start(0).stop(0.3);\n//start the transport.\nTone.Transport.start();\n\n ",
			"//start the transport with an offset and the sync'ed sources\n//will start in the correct position\nsource.sync().start(0.1);\n//the source will be invoked with an offset of 0.4\nTone.Transport.start(\"+0.5\", 0.5);"
		],
		"name": "sync",
		"longname": "Tone.PWMOscillator#sync",
		"kind": "function",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#sync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t *  @returns {Tone.Source} this\n\t */",
		"meta": {
			"range": [
				6594,
				7029
			],
			"filename": "Source.js",
			"lineno": 246,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/source",
			"code": {
				"id": "astnode100063971",
				"name": "Tone.Source.prototype.unsync",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._synced": "Tone.Source#_synced",
				"i": "Tone.Source#unsync~i",
				"id": "Tone.Source#unsync~id",
				"this._scheduled": "Tone.Source#_scheduled"
			}
		},
		"description": "Unsync the source to the Transport. See Tone.Source.sync",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Source"
					]
				},
				"description": "this"
			}
		],
		"name": "unsync",
		"longname": "Tone.PWMOscillator#unsync",
		"kind": "function",
		"memberof": "Tone.PWMOscillator",
		"scope": "instance",
		"inherits": "Tone.Source#unsync",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Repalce the current time value with the value\n\t *  given by the expression string.\n\t *  @param  {String}  exprString\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				1532,
				1651
			],
			"filename": "TimeBase.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066531",
				"name": "Tone.TimeBase.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"exprString"
				]
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Repalce the current time value with the value\n given by the expression string.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"name": "exprString"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.Frequency#set",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#set",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return a clone of the TimeBase object.\n\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t */",
		"meta": {
			"range": [
				1768,
				1897
			],
			"filename": "TimeBase.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066555",
				"name": "Tone.TimeBase.prototype.clone",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"instance": "Tone.TimeBase#clone~instance"
			}
		},
		"description": "Return a clone of the TimeBase object.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "The new cloned Tone.TimeBase"
			}
		],
		"name": "clone",
		"longname": "Tone.Frequency#clone",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#clone",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Copies the value of time to this Time\n\t *  @param {Tone.TimeBase} time\n\t *  @return  {TimeBase}\n\t */",
		"meta": {
			"range": [
				2012,
				2111
			],
			"filename": "TimeBase.js",
			"lineno": 76,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066581",
				"name": "Tone.TimeBase.prototype.copy",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"val": "Tone.TimeBase#copy~val"
			}
		},
		"description": "Copies the value of time to this Time",
		"params": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"TimeBase"
					]
				}
			}
		],
		"name": "copy",
		"longname": "Tone.Frequency#copy",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#copy",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Add to the current value.\n\t *  @param  {Time}  val    The value to add\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t */",
		"meta": {
			"range": [
				11983,
				12079
			],
			"filename": "TimeBase.js",
			"lineno": 495,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067764",
				"name": "Tone.TimeBase.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Add to the current value.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to add",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
		],
		"name": "add",
		"longname": "Tone.Frequency#add",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#add",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Subtract the value from the current time.\n\t *  @param  {Time}  val    The value to subtract\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t */",
		"meta": {
			"range": [
				12351,
				12447
			],
			"filename": "TimeBase.js",
			"lineno": 507,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067785",
				"name": "Tone.TimeBase.prototype.sub",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Subtract the value from the current time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to subtract",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
		],
		"name": "sub",
		"longname": "Tone.Frequency#sub",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#sub",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Multiply the current value by the given time.\n\t *  @param  {Time}  val    The value to multiply\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t */",
		"meta": {
			"range": [
				12723,
				12820
			],
			"filename": "TimeBase.js",
			"lineno": 519,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067806",
				"name": "Tone.TimeBase.prototype.mult",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Multiply the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to multiply",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
		],
		"name": "mult",
		"longname": "Tone.Frequency#mult",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#mult",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Divide the current value by the given time.\n\t *  @param  {Time}  val    The value to divide by\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t */",
		"meta": {
			"range": [
				13092,
				13188
			],
			"filename": "TimeBase.js",
			"lineno": 531,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067827",
				"name": "Tone.TimeBase.prototype.div",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Divide the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to divide by",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").div(2); //\"1m\""
		],
		"name": "div",
		"longname": "Tone.Frequency#div",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#div",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Evaluate the time value. Returns the time\n\t *  in seconds.\n\t *  @return  {Seconds} \n\t */",
		"meta": {
			"range": [
				13291,
				13362
			],
			"filename": "TimeBase.js",
			"lineno": 540,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067848",
				"name": "Tone.TimeBase.prototype.valueOf",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Evaluate the time value. Returns the time\n in seconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Seconds"
					]
				}
			}
		],
		"name": "valueOf",
		"longname": "Tone.Frequency#valueOf",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#valueOf",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				13424,
				13493
			],
			"filename": "TimeBase.js",
			"lineno": 548,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067864",
				"name": "Tone.TimeBase.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Frequency#dispose",
		"kind": "function",
		"memberof": "Tone.Frequency",
		"scope": "instance",
		"inherits": "Tone.TimeBase#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Repalce the current time value with the value\n\t *  given by the expression string.\n\t *  @param  {String}  exprString\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				1532,
				1651
			],
			"filename": "TimeBase.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066531",
				"name": "Tone.TimeBase.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"exprString"
				]
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Repalce the current time value with the value\n given by the expression string.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"name": "exprString"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.Time#set",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#set",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return a clone of the TimeBase object.\n\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t */",
		"meta": {
			"range": [
				1768,
				1897
			],
			"filename": "TimeBase.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066555",
				"name": "Tone.TimeBase.prototype.clone",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"instance": "Tone.TimeBase#clone~instance"
			}
		},
		"description": "Return a clone of the TimeBase object.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "The new cloned Tone.TimeBase"
			}
		],
		"name": "clone",
		"longname": "Tone.Time#clone",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#clone",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Add to the current value.\n\t *  @param  {Time}  val    The value to add\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t */",
		"meta": {
			"range": [
				11983,
				12079
			],
			"filename": "TimeBase.js",
			"lineno": 495,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067764",
				"name": "Tone.TimeBase.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Add to the current value.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to add",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
		],
		"name": "add",
		"longname": "Tone.Time#add",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#add",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Subtract the value from the current time.\n\t *  @param  {Time}  val    The value to subtract\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t */",
		"meta": {
			"range": [
				12351,
				12447
			],
			"filename": "TimeBase.js",
			"lineno": 507,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067785",
				"name": "Tone.TimeBase.prototype.sub",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Subtract the value from the current time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to subtract",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
		],
		"name": "sub",
		"longname": "Tone.Time#sub",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#sub",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Multiply the current value by the given time.\n\t *  @param  {Time}  val    The value to multiply\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t */",
		"meta": {
			"range": [
				12723,
				12820
			],
			"filename": "TimeBase.js",
			"lineno": 519,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067806",
				"name": "Tone.TimeBase.prototype.mult",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Multiply the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to multiply",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
		],
		"name": "mult",
		"longname": "Tone.Time#mult",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#mult",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Divide the current value by the given time.\n\t *  @param  {Time}  val    The value to divide by\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t */",
		"meta": {
			"range": [
				13092,
				13188
			],
			"filename": "TimeBase.js",
			"lineno": 531,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067827",
				"name": "Tone.TimeBase.prototype.div",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Divide the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to divide by",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").div(2); //\"1m\""
		],
		"name": "div",
		"longname": "Tone.Time#div",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#div",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				13424,
				13493
			],
			"filename": "TimeBase.js",
			"lineno": 548,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067864",
				"name": "Tone.TimeBase.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.Time#dispose",
		"kind": "function",
		"memberof": "Tone.Time",
		"scope": "instance",
		"inherits": "Tone.TimeBase#dispose",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Quantize the time by the given subdivision. Optionally add a\n\t *  percentage which will move the time value towards the ideal\n\t *  quantized value by that percentage. \n\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t *                                   towards the quantized value by\n\t *                                   a percentage.\n\t *  @return  {Tone.Time}  this\n\t *  @example\n\t * Tone.Time(21).quantize(2) //returns 22\n\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t */",
		"meta": {
			"range": [
				2402,
				2848
			],
			"filename": "Time.js",
			"lineno": 82,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065677",
				"name": "Tone.Time.prototype.quantize",
				"type": "FunctionExpression",
				"paramnames": [
					"subdiv",
					"percent"
				]
			},
			"vars": {
				"percent": "Tone.Time#quantize~percent",
				"this._expr": "Tone.Time#_expr",
				"": null
			}
		},
		"description": "Quantize the time by the given subdivision. Optionally add a\n percentage which will move the time value towards the ideal\n quantized value by that percentage.",
		"params": [
			{
				"type": {
					"names": [
						"Number",
						"Time"
					]
				},
				"description": "The subdivision to quantize to",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"NormalRange"
					]
				},
				"optional": true,
				"defaultvalue": 1,
				"description": "Move the time value\n                                  towards the quantized value by\n                                  a percentage.",
				"name": "percent"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.Time(21).quantize(2) //returns 22\nTone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55"
		],
		"name": "quantize",
		"longname": "Tone.TransportTime#quantize",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#quantize",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Adds the clock time to the time expression at the \n\t *  moment of evaluation. \n\t *  @return  {Tone.Time}  this\n\t */",
		"meta": {
			"range": [
				2978,
				3060
			],
			"filename": "Time.js",
			"lineno": 100,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065764",
				"name": "Tone.Time.prototype.addNow",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._plusNow": "Tone.Time#_plusNow"
			}
		},
		"description": "Adds the clock time to the time expression at the \n moment of evaluation.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"description": "this"
			}
		],
		"name": "addNow",
		"longname": "Tone.TransportTime#addNow",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#addNow",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Copies the value of time to this Time\n\t *  @param {Tone.Time} time\n\t *  @return  {Time}\n\t */",
		"meta": {
			"range": [
				3408,
				3550
			],
			"filename": "Time.js",
			"lineno": 121,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065804",
				"name": "Tone.Time.prototype.copy",
				"type": "FunctionExpression",
				"paramnames": [
					"time"
				]
			},
			"vars": {
				"this._plusNow": "Tone.Time#_plusNow"
			}
		},
		"description": "Copies the value of time to this Time",
		"params": [
			{
				"type": {
					"names": [
						"Tone.Time"
					]
				},
				"name": "time"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Time"
					]
				}
			}
		],
		"name": "copy",
		"longname": "Tone.TransportTime#copy",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#copy",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t *  @return {Notation} \n\t *  @example\n\t * //if the Transport is at 120bpm:\n\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t */",
		"meta": {
			"range": [
				3851,
				4505
			],
			"filename": "Time.js",
			"lineno": 136,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100065839",
				"name": "Tone.Time.prototype.toNotation",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"time": "Tone.Time#toNotation~time",
				"testNotations": "Tone.Time#toNotation~testNotations",
				"retNotation": "Tone.Time#toNotation~retNotation",
				"testTripletNotations": "Tone.Time#toNotation~testTripletNotations",
				"retTripletNotation": "Tone.Time#toNotation~retTripletNotation"
			}
		},
		"description": "Convert a Time to Notation. Values will be thresholded to the nearest 128th note.",
		"returns": [
			{
				"type": {
					"names": [
						"Notation"
					]
				}
			}
		],
		"examples": [
			"//if the Transport is at 120bpm:\nTone.Time(2).toNotation();//returns \"1m\""
		],
		"name": "toNotation",
		"longname": "Tone.TransportTime#toNotation",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#toNotation",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t *  @return  {BarsBeatsSixteenths}\n\t */",
		"meta": {
			"range": [
				6276,
				6872
			],
			"filename": "Time.js",
			"lineno": 213,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066144",
				"name": "Tone.Time.prototype.toBarsBeatsSixteenths",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"quarterTime": "Tone.Time#toBarsBeatsSixteenths~quarterTime",
				"quarters": "Tone.Time#toBarsBeatsSixteenths~quarters",
				"measures": "Tone.Time#toBarsBeatsSixteenths~measures",
				"sixteenths": "Tone.Time#toBarsBeatsSixteenths~sixteenths",
				"progress": "Tone.Time#toBarsBeatsSixteenths~progress"
			}
		},
		"description": "Return the time encoded as Bars:Beats:Sixteenths.",
		"returns": [
			{
				"type": {
					"names": [
						"BarsBeatsSixteenths"
					]
				}
			}
		],
		"name": "toBarsBeatsSixteenths",
		"longname": "Tone.TransportTime#toBarsBeatsSixteenths",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#toBarsBeatsSixteenths",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return the time in samples\n\t *  @return  {Samples}  \n\t */",
		"meta": {
			"range": [
				7197,
				7296
			],
			"filename": "Time.js",
			"lineno": 242,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066285",
				"name": "Tone.Time.prototype.toSamples",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in samples",
		"returns": [
			{
				"type": {
					"names": [
						"Samples"
					]
				}
			}
		],
		"name": "toSamples",
		"longname": "Tone.TransportTime#toSamples",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#toSamples",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return the time in milliseconds.\n\t *  @return  {Milliseconds} \n\t */",
		"meta": {
			"range": [
				7733,
				7818
			],
			"filename": "Time.js",
			"lineno": 268,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066341",
				"name": "Tone.Time.prototype.toMilliseconds",
				"type": "FunctionExpression",
				"paramnames": []
			}
		},
		"description": "Return the time in milliseconds.",
		"returns": [
			{
				"type": {
					"names": [
						"Milliseconds"
					]
				}
			}
		],
		"name": "toMilliseconds",
		"longname": "Tone.TransportTime#toMilliseconds",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.Time#toMilliseconds",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Repalce the current time value with the value\n\t *  given by the expression string.\n\t *  @param  {String}  exprString\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				1532,
				1651
			],
			"filename": "TimeBase.js",
			"lineno": 56,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066531",
				"name": "Tone.TimeBase.prototype.set",
				"type": "FunctionExpression",
				"paramnames": [
					"exprString"
				]
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Repalce the current time value with the value\n given by the expression string.",
		"params": [
			{
				"type": {
					"names": [
						"String"
					]
				},
				"name": "exprString"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "set",
		"longname": "Tone.TransportTime#set",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#set",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Return a clone of the TimeBase object.\n\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t */",
		"meta": {
			"range": [
				1768,
				1897
			],
			"filename": "TimeBase.js",
			"lineno": 65,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100066555",
				"name": "Tone.TimeBase.prototype.clone",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"instance": "Tone.TimeBase#clone~instance"
			}
		},
		"description": "Return a clone of the TimeBase object.",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "The new cloned Tone.TimeBase"
			}
		],
		"name": "clone",
		"longname": "Tone.TransportTime#clone",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#clone",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Add to the current value.\n\t *  @param  {Time}  val    The value to add\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t */",
		"meta": {
			"range": [
				11983,
				12079
			],
			"filename": "TimeBase.js",
			"lineno": 495,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067764",
				"name": "Tone.TimeBase.prototype.add",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Add to the current value.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to add",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\""
		],
		"name": "add",
		"longname": "Tone.TransportTime#add",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#add",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Subtract the value from the current time.\n\t *  @param  {Time}  val    The value to subtract\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t */",
		"meta": {
			"range": [
				12351,
				12447
			],
			"filename": "TimeBase.js",
			"lineno": 507,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067785",
				"name": "Tone.TimeBase.prototype.sub",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Subtract the value from the current time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to subtract",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\""
		],
		"name": "sub",
		"longname": "Tone.TransportTime#sub",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#sub",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Multiply the current value by the given time.\n\t *  @param  {Time}  val    The value to multiply\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t */",
		"meta": {
			"range": [
				12723,
				12820
			],
			"filename": "TimeBase.js",
			"lineno": 519,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067806",
				"name": "Tone.TimeBase.prototype.mult",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Multiply the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to multiply",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\""
		],
		"name": "mult",
		"longname": "Tone.TransportTime#mult",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#mult",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Divide the current value by the given time.\n\t *  @param  {Time}  val    The value to divide by\n\t *  @param  {String=}  units  Optional units to use with the value.\n\t *  @return  {Tone.TimeBase}  this\n\t *  @example\n\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t */",
		"meta": {
			"range": [
				13092,
				13188
			],
			"filename": "TimeBase.js",
			"lineno": 531,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067827",
				"name": "Tone.TimeBase.prototype.div",
				"type": "FunctionExpression",
				"paramnames": [
					"val",
					"units"
				]
			}
		},
		"description": "Divide the current value by the given time.",
		"params": [
			{
				"type": {
					"names": [
						"Time"
					]
				},
				"description": "The value to divide by",
				"name": "val"
			},
			{
				"type": {
					"names": [
						"String"
					]
				},
				"optional": true,
				"description": "Optional units to use with the value.",
				"name": "units"
			}
		],
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"examples": [
			"Tone.TimeBase(\"2m\").div(2); //\"1m\""
		],
		"name": "div",
		"longname": "Tone.TransportTime#div",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#div",
		"inherited": true
	},
	{
		"comment": "/**\n\t *  Clean up\n\t *  @return {Tone.TimeBase} this\n\t */",
		"meta": {
			"range": [
				13424,
				13493
			],
			"filename": "TimeBase.js",
			"lineno": 548,
			"columnno": 1,
			"path": "/home/travis/build/Tonejs/Tone.js/Tone/type",
			"code": {
				"id": "astnode100067864",
				"name": "Tone.TimeBase.prototype.dispose",
				"type": "FunctionExpression",
				"paramnames": []
			},
			"vars": {
				"this._expr": "Tone.TimeBase#_expr"
			}
		},
		"description": "Clean up",
		"returns": [
			{
				"type": {
					"names": [
						"Tone.TimeBase"
					]
				},
				"description": "this"
			}
		],
		"name": "dispose",
		"longname": "Tone.TransportTime#dispose",
		"kind": "function",
		"memberof": "Tone.TransportTime",
		"scope": "instance",
		"inherits": "Tone.TimeBase#dispose",
		"inherited": true
	}
]