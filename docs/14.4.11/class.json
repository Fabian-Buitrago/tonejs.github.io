{
	"id": 4219,
	"name": "Offline",
	"kind": 64,
	"kindString": "Function",
	"flags": {
		"isExported": true
	},
	"signatures": [
		{
			"id": 4220,
			"name": "Offline",
			"kind": 4096,
			"kindString": "Call signature",
			"flags": {},
			"comment": {
				"shortText": "Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.\nThe OfflineAudioContext is capable of rendering much faster than real time in many cases.\nThe callback function also passes in an offline instance of [[Context]] which can be used\nto schedule events along the Transport.",
				"returns": "The promise which is invoked with the ToneAudioBuffer of the recorded output.",
				"tags": [
					{
						"tag": "example",
						"text": "\n//render 2 seconds of the oscillator\nTone.Offline(() => {\n\t//only nodes created in this callback will be recorded\n\tvar oscillator = new Tone.Oscillator().toDestination().start(0)\n\t//schedule their events\n}, 2).then((buffer) => {\n\t//do something with the output buffer\n})"
					},
					{
						"tag": "example",
						"text": "\n//can also schedule events along the Transport\n//using the passed in Offline Transport\nTone.Offline(({ transport }) => {\n\tvar osc = new Tone.Oscillator().toDestination()\n\ttransport.schedule(function(time){\n\t\tosc.start(time).stop(time + 0.1)\n\t}, 1)\n\ttransport.start(0.2)\n}, 4).then((buffer) => {\n\t//do something with the output buffer\n})"
					}
				]
			},
			"parameters": [
				{
					"id": 4221,
					"name": "callback",
					"kind": 32768,
					"kindString": "Parameter",
					"flags": {},
					"comment": {
						"text": "All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer."
					},
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 4222,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 4223,
									"name": "__call",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 4224,
											"name": "context",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "OfflineContext",
												"id": 1919
											}
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "Promise",
												"typeArguments": [
													{
														"type": "intrinsic",
														"name": "void"
													}
												]
											},
											{
												"type": "intrinsic",
												"name": "void"
											}
										]
									}
								}
							],
							"sources": [
								{
									"fileName": "core/context/Offline.ts",
									"line": 38,
									"character": 10
								}
							]
						}
					}
				},
				{
					"id": 4225,
					"name": "duration",
					"kind": 32768,
					"kindString": "Parameter",
					"flags": {},
					"comment": {
						"text": "the amount of time to record for."
					},
					"type": {
						"type": "reference",
						"name": "Seconds",
						"id": 20
					}
				},
				{
					"id": 4226,
					"name": "channels",
					"kind": 32768,
					"kindString": "Parameter",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "2"
				},
				{
					"id": 4227,
					"name": "sampleRate",
					"kind": 32768,
					"kindString": "Parameter",
					"flags": {},
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": " getContext().sampleRate"
				}
			],
			"type": {
				"type": "reference",
				"name": "Promise",
				"typeArguments": [
					{
						"type": "reference",
						"name": "ToneAudioBuffer",
						"id": 1836
					}
				]
			}
		}
	],
	"sources": [
		{
			"fileName": "core/context/Offline.ts",
			"line": 37,
			"character": 29
		}
	]
}